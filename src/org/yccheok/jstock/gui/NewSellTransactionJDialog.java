/*
 * NewSellTransactionJDialog.java
 *
 * Created on March 30, 2008, 6:31 AM
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 *
 * Copyright (C) 2008 Cheok YanCheng <yccheok@yahoo.com>
 */

package org.yccheok.jstock.gui;

import java.text.NumberFormat;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.JFormattedTextField;
import javax.swing.SpinnerNumberModel;
import javax.swing.text.NumberFormatter;
import javax.swing.SwingUtilities;
import net.sf.nachocalendar.CalendarFactory;
import net.sf.nachocalendar.components.DateField;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.yccheok.jstock.engine.Code;
import org.yccheok.jstock.engine.SimpleDate;
import org.yccheok.jstock.engine.Stock;
import org.yccheok.jstock.engine.Symbol;
import org.yccheok.jstock.portfolio.Broker;
import org.yccheok.jstock.portfolio.BrokingFirm;
import org.yccheok.jstock.portfolio.ClearingFee;
import org.yccheok.jstock.portfolio.Contract;
import org.yccheok.jstock.portfolio.SimpleBroker;
import org.yccheok.jstock.portfolio.SimpleClearingFee;
import org.yccheok.jstock.portfolio.SimpleStampDuty;
import org.yccheok.jstock.portfolio.StampDuty;
import org.yccheok.jstock.portfolio.Transaction;

/**
 *
 * @author  yccheok
 */
public class NewSellTransactionJDialog extends javax.swing.JDialog {
    /** Creates new form NewSellTransactionJDialog */
    public NewSellTransactionJDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        
        if(shouldAutoCalculateBrokerFee())
        {
            this.jFormattedTextField4.setEditable(false);
            this.jFormattedTextField5.setEditable(false);
            this.jFormattedTextField7.setEditable(false);
        }
    }

    private void setMaxSellQuantity(int maxSellQuantity) {
        SpinnerNumberModel spinnerNumberModel = (SpinnerNumberModel)jSpinner1.getModel();
        spinnerNumberModel.setMaximum(maxSellQuantity);
    }

    private boolean shouldAutoCalculateBrokerFee() {
        final JStockOptions jStockOptions = MainFrame.getInstance().getJStockOptions();
        
        return 
                (jStockOptions.isAutoBrokerFeeCalculationEnabled()) && 
                (jStockOptions.getSelectedBrokingFirm() != null);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jTextField1 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jSpinner1 = new javax.swing.JSpinner();
        jPanel3 = CalendarFactory.createDateField();
        jLabel4 = new javax.swing.JLabel();
        jFormattedTextField1 = getCurrencyJFormattedTextField(false);
        jFormattedTextField2 = getCurrencyJFormattedTextField(false);
        jFormattedTextField3 = getCurrencyJFormattedTextField(false);
        jFormattedTextField4 = getCurrencyJFormattedTextField(false);
        jFormattedTextField5 = getCurrencyJFormattedTextField(false);
        jLabel10 = new javax.swing.JLabel();
        jFormattedTextField6 = getCurrencyJFormattedTextField(true);
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jFormattedTextField7 = getCurrencyJFormattedTextField(false);
        jLabel11 = new javax.swing.JLabel();
        jFormattedTextField8 = getCurrencyJFormattedTextField(true);
        jLabel12 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Sell");
        setResizable(false);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Transaction"));

        jTextField1.setEditable(false);

        jLabel2.setText("Symbol");

        jSpinner1.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(100), Integer.valueOf(1), null, Integer.valueOf(100)));
        jSpinner1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinner1StateChanged(evt);
            }
        });

        jPanel3.setBackground(new java.awt.Color(204, 255, 255));
        jPanel3.setMaximumSize(new java.awt.Dimension(32767, 20));
        jPanel3.setPreferredSize(new java.awt.Dimension(100, 20));

        jLabel4.setText("Date");

        jFormattedTextField1.setValue(new Double(0.0));
        jFormattedTextField1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jFormattedTextField1FocusLost(evt);
            }
        });

        jFormattedTextField2.setEditable(false);
        jFormattedTextField2.setValue(new Double(0.0));

        jFormattedTextField3.setEditable(false);
        jFormattedTextField3.setValue(new Double(0.0));

        jFormattedTextField4.setValue(new Double(0.0));
        jFormattedTextField4.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jFormattedTextField4FocusLost(evt);
            }
        });

        jFormattedTextField5.setValue(new Double(0.0));
        jFormattedTextField5.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jFormattedTextField5FocusLost(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel10.setText("Profit (%)");

        jFormattedTextField6.setEditable(false);
        jFormattedTextField6.setFont(new java.awt.Font("Tahoma", 1, 11));
        jFormattedTextField6.setValue(new Double(0.0));

        jLabel1.setText("Unit");

        jLabel3.setText("Price");

        jLabel5.setText("Value");

        jLabel7.setText("Buy Cost");

        jLabel8.setText("Broker");

        jLabel9.setText("Clearing");

        jFormattedTextField7.setValue(new Double(0.0));
        jFormattedTextField7.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jFormattedTextField7FocusLost(evt);
            }
        });

        jLabel11.setText("Stamp Duty");

        jFormattedTextField8.setEditable(false);
        jFormattedTextField8.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jFormattedTextField8.setValue(new Double(0.0));

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel12.setText("Profit ($)");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel5)
                    .addComponent(jLabel7)
                    .addComponent(jLabel8)
                    .addComponent(jLabel1)
                    .addComponent(jLabel4)
                    .addComponent(jLabel11)
                    .addComponent(jLabel12)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jFormattedTextField6, javax.swing.GroupLayout.DEFAULT_SIZE, 109, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 109, Short.MAX_VALUE)
                            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, 109, Short.MAX_VALUE)
                            .addComponent(jSpinner1, javax.swing.GroupLayout.DEFAULT_SIZE, 109, Short.MAX_VALUE)
                            .addComponent(jFormattedTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 109, Short.MAX_VALUE)
                            .addComponent(jFormattedTextField2, javax.swing.GroupLayout.DEFAULT_SIZE, 109, Short.MAX_VALUE)
                            .addComponent(jFormattedTextField3, javax.swing.GroupLayout.DEFAULT_SIZE, 109, Short.MAX_VALUE)
                            .addComponent(jFormattedTextField4, javax.swing.GroupLayout.DEFAULT_SIZE, 109, Short.MAX_VALUE)
                            .addComponent(jFormattedTextField5, javax.swing.GroupLayout.DEFAULT_SIZE, 109, Short.MAX_VALUE)
                            .addComponent(jFormattedTextField7, javax.swing.GroupLayout.DEFAULT_SIZE, 109, Short.MAX_VALUE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jFormattedTextField8, javax.swing.GroupLayout.DEFAULT_SIZE, 108, Short.MAX_VALUE)
                                .addGap(1, 1, 1)))
                        .addGap(18, 18, 18))))
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jFormattedTextField1, jFormattedTextField2, jFormattedTextField3, jFormattedTextField4, jFormattedTextField5, jFormattedTextField6, jPanel3, jSpinner1, jTextField1});

        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(9, 9, 9)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jFormattedTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jFormattedTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jFormattedTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jFormattedTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(jLabel9))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jFormattedTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel11)
                            .addComponent(jFormattedTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jFormattedTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(jFormattedTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jFormattedTextField1, jFormattedTextField2, jFormattedTextField3, jFormattedTextField4, jFormattedTextField5, jFormattedTextField6, jPanel3, jSpinner1, jTextField1});

        getContentPane().add(jPanel2, java.awt.BorderLayout.CENTER);

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/16x16/apply.png"))); // NOI18N
        jButton1.setText("OK");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel4.add(jButton1);

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/16x16/button_cancel.png"))); // NOI18N
        jButton2.setText("Cancel");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel4.add(jButton2);

        getContentPane().add(jPanel4, java.awt.BorderLayout.SOUTH);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Stock"));

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/16x16/outbox.png"))); // NOI18N

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/16x16/idea.png"))); // NOI18N
        jButton3.setText("Best Price");
        jButton3.setToolTipText("Suggest the best selling price to break even.");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 43, Short.MAX_VALUE)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton3)
                    .addComponent(jLabel6))
                .addContainerGap(12, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1, java.awt.BorderLayout.NORTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        resultSellTransactions.clear();
        this.setVisible(false);
        this.dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    public void setBuyTransactions(List<Transaction> transactions) {
        // Ensure we only perform batch update.
        if (this.sellTransaction != null) {
            throw new java.lang.UnsupportedOperationException("You cannot sell transaction and edit transaction at the same time");
        }

        buyTransactions.clear();
        buyTransactions.addAll(transactions);
        isBatchUpdate = buyTransactions.size() > 1;
        if (isBatchUpdate) {
            // Batch edit. Disable the quantity.
            this.jSpinner1.setEnabled(false);
        }

        final Stock _stock = transactions.get(0).getContract().getStock();
        final Symbol symbol = _stock.getSymbol();
        final Date date = java.util.Calendar.getInstance().getTime();
        int quantity = 0;
        this.buyValue = 0.0;
        for (Transaction transaction : transactions) {
            quantity += transaction.getQuantity();
            this.buyValue += transaction.getNetTotal();
        }
        MainFrame mainFrame = MainFrame.getInstance();
        double price = mainFrame.getPortfolioManagementJPanel().getStockLastPrice(_stock);
        double value = price * quantity;

        this.jTextField1.setText(symbol.toString());
        ((DateField)jPanel3).setValue(date);
        this.jSpinner1.setValue(quantity);
        this.jFormattedTextField1.setValue(price);
        this.jFormattedTextField2.setValue(value);

        // Limit maximum sell quantity.
        setMaxSellQuantity(quantity);

        this.stock = _stock;
        this.type = Contract.Type.Sell;
        this.buyPrice = this.buyValue / quantity;

        update();
    }

    public void setSellTransaction(Transaction transaction) {
        assert(transaction.getContract().getType() == Contract.Type.Sell);

        // Ensure we only edit.
        if (this.buyTransactions.size() > 0) {
            throw new java.lang.UnsupportedOperationException("You cannot sell transaction and edit transaction at the same time");
        }

        if (transaction.getContract().getType() != Contract.Type.Sell) {
            throw new java.lang.UnsupportedOperationException("You can only edit sell transaction");
        }

        this.sellTransaction = transaction;

        final Stock _stock = transaction.getContract().getStock();
        final Symbol symbol = _stock.getSymbol();
        final Date date = transaction.getContract().getDate().getCalendar().getTime();
        final int quantity = transaction.getContract().getQuantity();
        final double price = transaction.getContract().getPrice();
        final double value = transaction.getTotal();
        final double brokerFee = transaction.getCalculatedBroker();
        final double clearingFee = transaction.getCalculatdClearingFee();
        final double stampDuty = transaction.getCalculatedStampDuty();
        final double netValue = transaction.getNetTotal();
        
        this.jTextField1.setText(symbol.toString());
        ((DateField)jPanel3).setValue(date);
        this.jSpinner1.setValue(quantity);
        this.jFormattedTextField1.setValue(price);
        this.jFormattedTextField2.setValue(value);
        this.jFormattedTextField4.setValue(brokerFee);
        this.jFormattedTextField5.setValue(clearingFee);
        this.jFormattedTextField7.setValue(stampDuty);
        this.jFormattedTextField6.setValue(netValue);

        this.stock = transaction.getContract().getStock();
        this.type = Contract.Type.Sell;
        this.buyPrice = transaction.getContract().getReferencePrice();

        update();
    }
    
    private List<Transaction> generateTransactions() {
        if (this.sellTransaction != null && this.buyTransactions.size() > 0) {
            throw new java.lang.UnsupportedOperationException("You cannot sell transaction and edit transaction at the same time");
        }

        final List<Transaction> transactions = new ArrayList<Transaction>();

        if (this.sellTransaction != null)
        {
            final DateField dateField = (DateField)jPanel3;
            final SimpleDate date = new SimpleDate((Date)dateField.getValue());
            final int unit = ((java.lang.Integer)this.jSpinner1.getValue());
            final double price = ((Double)this.jFormattedTextField1.getValue());
            Contract.ContractBuilder builder = new Contract.ContractBuilder(stock, date);
            final Contract contract = builder.type(type).quantity(unit).price(price).referencePrice(this.sellTransaction.getContract().getReferencePrice()).referenceDate(this.sellTransaction.getContract().getReferenceDate()).build();

            Broker broker = null;
            StampDuty stampDuty = null;
            ClearingFee clearingFee = null;

            if (this.shouldAutoCalculateBrokerFee()) {
                final BrokingFirm brokingFirm = MainFrame.getInstance().getJStockOptions().getSelectedBrokingFirm();
                broker = brokingFirm.getBroker();
                stampDuty = brokingFirm.getStampDuty();
                clearingFee = brokingFirm.getClearingFee();
            }
            else {
                final double brokerFeeValue = (Double)this.jFormattedTextField4.getValue();
                final double clearingFeeValue = (Double)this.jFormattedTextField5.getValue();
                final double stampDutyValue = (Double)jFormattedTextField7.getValue();

                broker = new SimpleBroker("SimpleBroker", Double.MAX_VALUE, brokerFeeValue, 0);
                /* We are limit to ourselves, that the fraction calculation, is based on contract's total. */
                stampDuty = new SimpleStampDuty("SimpleStampDuty", Double.MAX_VALUE, contract.getTotal(), stampDutyValue);
                clearingFee = new SimpleClearingFee("SimpleClearingfee", Double.MAX_VALUE, clearingFeeValue, 0);
            }

            Transaction t = new Transaction(contract, broker, stampDuty, clearingFee);
            t.setComment(this.sellTransaction.getComment());
            transactions.add(t);
        }
        else {
            final DateField dateField = (DateField)jPanel3;
            final SimpleDate date = new SimpleDate((Date)dateField.getValue());
            final int unit = ((java.lang.Integer)this.jSpinner1.getValue());
            final double price = ((Double)this.jFormattedTextField1.getValue());

            for (Transaction transaction : this.buyTransactions) {
                Contract.ContractBuilder builder = new Contract.ContractBuilder(stock, date);
                final Contract contract = builder.type(type).quantity(this.isBatchUpdate ? transaction.getQuantity() : unit).price(price).referencePrice(transaction.getNetTotal() / (double)transaction.getQuantity()).referenceDate(transaction.getDate()).build();

                Broker broker = null;
                StampDuty stampDuty = null;
                ClearingFee clearingFee = null;

                // For batch update. Don't use auto calculation. This is because when we display to client,
                // we calculated the auto based on lump sum. However, when we want to write to individual contract,
                // we can no longer using the auto calculation since the lump sum is not same anymore.
                if (this.shouldAutoCalculateBrokerFee() && !this.isBatchUpdate) {
                    final BrokingFirm brokingFirm = MainFrame.getInstance().getJStockOptions().getSelectedBrokingFirm();
                    broker = brokingFirm.getBroker();
                    stampDuty = brokingFirm.getStampDuty();
                    clearingFee = brokingFirm.getClearingFee();
                }
                else {
                    final double brokerFeeValue = (Double)this.jFormattedTextField4.getValue();
                    final double clearingFeeValue = (Double)this.jFormattedTextField5.getValue();
                    final double stampDutyValue = (Double)jFormattedTextField7.getValue();

                    broker = new SimpleBroker("SimpleBroker", Double.MAX_VALUE, brokerFeeValue / unit * (double)transaction.getQuantity(), 0);
                    /* We are limit to ourselves, that the fraction calculation, is based on contract's total. */
                    stampDuty = new SimpleStampDuty("SimpleStampDuty", Double.MAX_VALUE, contract.getTotal(), stampDutyValue / unit * (double)transaction.getQuantity());
                    clearingFee = new SimpleClearingFee("SimpleClearingfee", Double.MAX_VALUE, clearingFeeValue / unit * (double)transaction.getQuantity(), 0);
                }

                Transaction t = new Transaction(contract, broker, stampDuty, clearingFee);
                t.setComment(transaction.getComment());
                transactions.add(t);
            }
        }

        return transactions;
    }
    
    private boolean isValidInput() {
        
        if(this.jFormattedTextField1.getText().length() <= 0) {
            this.jFormattedTextField1.requestFocus();
            return false;
        }

        if(this.jFormattedTextField2.getText().length() <= 0) {
            this.jFormattedTextField2.requestFocus();
            return false;
        }

        if(this.jFormattedTextField4.getText().length() <= 0) {
            this.jFormattedTextField4.requestFocus();
            return false;
        }

        if(this.jFormattedTextField5.getText().length() <= 0) {
            this.jFormattedTextField5.requestFocus();
            return false;
        }

        if(this.jFormattedTextField7.getText().length() <= 0) {
            this.jFormattedTextField7.requestFocus();
            return false;
        }

        if(this.jFormattedTextField6.getText().length() <= 0) {
            this.jFormattedTextField6.requestFocus();
            return false;
        }
        
        return true;
    }
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        if(isValidInput() == false) {
            return;
        }
        
        commitEdit();
        this.resultSellTransactions = generateTransactions();
        this.setVisible(false);
        this.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void update() {
        // Commit the value first before updating. This is to prevent
        // double rounding issue. We force the current value to
        // follow the formatter text field's.
        commitEdit();

        if (shouldAutoCalculateBrokerFee())
        {
            final BrokingFirm brokingFirm = MainFrame.getInstance().getJStockOptions().getSelectedBrokingFirm();

            SwingUtilities.invokeLater(new Runnable() {@Override public void run() {
                final String name = jTextField1.getText();
                final int unit = (Integer)jSpinner1.getValue();
                final double price = (Double)jFormattedTextField1.getValue();
                final DateField dateField = (DateField)jPanel3;
                final Date date = (Date)dateField.getValue();
                // Stock and date information is not important at this moment.
                Contract.ContractBuilder builder = new Contract.ContractBuilder(Utils.getEmptyStock(Code.newInstance(name), Symbol.newInstance(name)), new SimpleDate(date));
                Contract contract = builder.type(Contract.Type.Sell).quantity(unit).price(price).build();

                final double brokerFee = brokingFirm.brokerCalculate(contract);
                final double clearingFee = brokingFirm.clearingFeeCalculate(contract);
                final double stampDuty = brokingFirm.stampDutyCalculate(contract);
                jFormattedTextField4.setValue(brokerFee);
                jFormattedTextField5.setValue(clearingFee);
                jFormattedTextField7.setValue(stampDuty);

                final double sellValue = price * (double)unit;
                final double buyValue = isBatchUpdate ? NewSellTransactionJDialog.this.buyValue : (buyPrice * (double)unit);
                final double totalCost = buyValue + brokerFee + clearingFee + stampDuty;
                final double netProfit = sellValue - totalCost;
                final double netProfitPercentage = (totalCost == 0.0) ? 0.0 : netProfit / totalCost * 100.0;

                jFormattedTextField2.setValue(sellValue);
                jFormattedTextField3.setValue(buyValue);
                jFormattedTextField6.setValue(netProfitPercentage);
                jFormattedTextField6.setForeground(Utils.getColor(netProfitPercentage, 0.0));
                jFormattedTextField8.setValue(netProfit);
                jFormattedTextField8.setForeground(Utils.getColor(netProfit, 0.0));
            }});
        }
        else {
            SwingUtilities.invokeLater(new Runnable() {@Override public void run() {
                final int unit = (Integer)jSpinner1.getValue();
                final double price = (Double)jFormattedTextField1.getValue();
                final double brokerFee = (Double)jFormattedTextField4.getValue();
                final double clearingFee = (Double)jFormattedTextField5.getValue();
                final double stampDuty = (Double)jFormattedTextField7.getValue();

                final double sellValue = price * (double)unit;
                final double buyValue = isBatchUpdate ? NewSellTransactionJDialog.this.buyValue : (buyPrice * (double)unit);
                final double totalCost = buyValue + brokerFee + clearingFee + stampDuty;
                final double netProfit = sellValue - totalCost;
                final double netProfitPercentage = (totalCost == 0.0) ? 0.0 : netProfit / totalCost * 100.0;

                jFormattedTextField2.setValue(sellValue);
                jFormattedTextField3.setValue(buyValue);
                jFormattedTextField6.setValue(netProfitPercentage);
                jFormattedTextField6.setForeground(Utils.getColor(netProfitPercentage, 0.0));
                jFormattedTextField8.setValue(netProfit);
                jFormattedTextField8.setForeground(Utils.getColor(netProfit, 0.0));
            }});
        }
    }
    
    private void jSpinner1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinner1StateChanged
        // TODO add your handling code here:  
        update();
    }//GEN-LAST:event_jSpinner1StateChanged

    private void jFormattedTextField1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jFormattedTextField1FocusLost
        // TODO add your handling code here:
        update();
    }//GEN-LAST:event_jFormattedTextField1FocusLost

    private void jFormattedTextField4FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jFormattedTextField4FocusLost
        // TODO add your handling code here:
        update();
    }//GEN-LAST:event_jFormattedTextField4FocusLost

    private void jFormattedTextField5FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jFormattedTextField5FocusLost
        // TODO add your handling code here:
        update();
    }//GEN-LAST:event_jFormattedTextField5FocusLost

    private void jFormattedTextField7FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jFormattedTextField7FocusLost
        // TODO add your handling code here:
        update();
    }//GEN-LAST:event_jFormattedTextField7FocusLost

    private void setPrice(double price) {
        this.jFormattedTextField1.setValue(price);
        update();
    }

	private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
		// TODO add your handling code here:
    	this.setPrice(this.suggestBestSellingPrice());
	}//GEN-LAST:event_jButton3ActionPerformed
    
    private void commitEdit() {
        try {
            jFormattedTextField1.commitEdit();
            jFormattedTextField2.commitEdit();
            jFormattedTextField3.commitEdit();
            jFormattedTextField4.commitEdit();
            jFormattedTextField5.commitEdit();
            jFormattedTextField6.commitEdit();
            jFormattedTextField7.commitEdit();
            jFormattedTextField8.commitEdit();
        } catch (ParseException ex) {
            log.error("", ex);
        }
    }
    
    private JFormattedTextField getCurrencyJFormattedTextField(boolean isNegativeAllowed) {
        NumberFormat format= NumberFormat.getNumberInstance();
        NumberFormatter formatter= new NumberFormatter(format);
        
        if(isNegativeAllowed == false)
            formatter.setMinimum(0.0);
        else
            formatter.setMinimum(null);
        
        formatter.setValueClass(Double.class);
        JFormattedTextField field= new JFormattedTextField(formatter);
        
        return field;
    }
    
    public List<Transaction> getTransactions() {
        return this.resultSellTransactions;
    }

    public double suggestBestSellingPrice() {
        final double expectedProfitPercentage = MainFrame.getInstance().getJStockOptions().getExpectedProfitPercentage();
        
        final int unit = (Integer)jSpinner1.getValue();
        
        if(unit <= 0) return 0.0;
        
        final double brokerFee = (Double)jFormattedTextField4.getValue();
        final double clearingFee = (Double)jFormattedTextField5.getValue();
        final double stampDuty = (Double)jFormattedTextField7.getValue();
                
        final double _buyValue = isBatchUpdate ? this.buyValue : (buyPrice * (double)unit);
        final double totalCost = _buyValue + brokerFee + clearingFee + stampDuty;
        
        final double bestSellingValue = (1.0 + expectedProfitPercentage / 100.0) * totalCost;
        final double bestPrice = bestSellingValue / (double)unit;

        MainFrame mainFrame = MainFrame.getInstance();
        double currentPrice = mainFrame.getPortfolioManagementJPanel().getStockLastPrice(stock);

        return bestPrice > currentPrice ? bestPrice : currentPrice;
    }
    
    private static final Log log = LogFactory.getLog(NewSellTransactionJDialog.class);

    /* For edit purpose on sell transaction */
    private Transaction sellTransaction = null;
    /* For single selling, batch selling purpose. */
    private List<Transaction> buyTransactions = new ArrayList<Transaction>();
    private List<Transaction> resultSellTransactions = new ArrayList<Transaction>();

    private Stock stock;                // immutable.
    // private SimpleDate date;         // mutable
    private Contract.Type type;         // immutable
    // private int quantity;            // mutable for edit. immutable for batch update.
    // private double price;            // mutable
    private double buyPrice;            // immutable

    private boolean isBatchUpdate = false;
    // Only valid for batch update. This is to avoid we cannot get back the original x value.
    // y = x / quantity;
    // But we cannot ensure y * quantity will get back x, due to floating point characteristic
    private double buyValue = 0.0;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JFormattedTextField jFormattedTextField1;
    private javax.swing.JFormattedTextField jFormattedTextField2;
    private javax.swing.JFormattedTextField jFormattedTextField3;
    private javax.swing.JFormattedTextField jFormattedTextField4;
    private javax.swing.JFormattedTextField jFormattedTextField5;
    private javax.swing.JFormattedTextField jFormattedTextField6;
    private javax.swing.JFormattedTextField jFormattedTextField7;
    private javax.swing.JFormattedTextField jFormattedTextField8;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
    
}
