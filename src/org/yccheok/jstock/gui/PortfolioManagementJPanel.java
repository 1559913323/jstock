/*
 * PortfoliioJPanel.java
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 *
 * Copyright (C) 2008 Cheok YanCheng <yccheok@yahoo.com>
 */

package org.yccheok.jstock.gui;

import com.thoughtworks.xstream.XStream;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.swing.ImageIcon;
import javax.swing.JMenuItem;
import javax.swing.JPopupMenu;

import javax.swing.tree.TreePath;
import org.apache.commons.logging.*;
import org.yccheok.jstock.portfolio.*;
import org.yccheok.jstock.engine.*;
import org.jdesktop.swingx.treetable.*;

/**
 *
 * @author  Owner
 */
public class PortfolioManagementJPanel extends javax.swing.JPanel {
    
    /** Creates new form PortfoliioJPanel */
    public PortfolioManagementJPanel() {
        initComponents();        
        
        this.initJTreeTable();
        this.initPortfolio();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel2 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setLayout(new java.awt.BorderLayout());

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Portfolio Management"));
        jPanel1.setLayout(new java.awt.BorderLayout());
        jPanel1.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        add(jPanel1, java.awt.BorderLayout.CENTER);

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/16x16/inbox.png"))); // NOI18N
        jButton1.setText("New Trasaction...");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton1);

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/16x16/button_cancel.png"))); // NOI18N
        jButton2.setText("Delete Transaction");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton2);

        add(jPanel2, java.awt.BorderLayout.SOUTH);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        this.showNewTransactionJDialog(getSelectedStockSymbolForNewTransactionJDialog(), getSelectedStockLastPriceForNewTransactionJDialog(), true);
    }//GEN-LAST:event_jButton1ActionPerformed
    
    private boolean isValidTreeTableNode(TreeTableModel treeTableModel, Object node) {
        boolean result = false;
        
        final Object root = treeTableModel.getRoot();
        
        if (node instanceof TreeTableNode) {
            TreeTableNode ttn = (TreeTableNode) node;

            while (!result && ttn != null) {
                result = ttn == root;

                ttn = ttn.getParent();
            }
        }

        return result;
    }
    
    private String getSelectedStockSymbolForNewTransactionJDialog() {
        final TreePath[] treePaths = treeTable.getTreeSelectionModel().getSelectionPaths();

        if(treePaths == null) return "";
        
        if(treePaths.length == 1) {
            if(treePaths[0].getLastPathComponent() instanceof TransactionSummary) {
                final TransactionSummary transactionSummary = (TransactionSummary)treePaths[0].getLastPathComponent();
                assert(transactionSummary.getChildCount() > 0);
                final Transaction transaction = (Transaction)transactionSummary.getChildAt(0);
                return transaction.getContract().getStock().getSymbol();
                
            }
            else if(treePaths[0].getLastPathComponent() instanceof Transaction) {
                final Transaction transaction = (Transaction)treePaths[0].getLastPathComponent();
                return transaction.getContract().getStock().getSymbol();
            }
        }        
        
        return "";
    }
    
    private double getSelectedStockLastPriceForNewTransactionJDialog() {
        final TreePath[] treePaths = treeTable.getTreeSelectionModel().getSelectionPaths();
        final PortfolioTreeTableModel portfolioTreeTableModel = (PortfolioTreeTableModel)treeTable.getTreeTableModel();
        
        if(treePaths == null) return 0.0;
        
        if(treePaths.length == 1) {
            if(treePaths[0].getLastPathComponent() instanceof TransactionSummary) {
                final TransactionSummary transactionSummary = (TransactionSummary)treePaths[0].getLastPathComponent();
                assert(transactionSummary.getChildCount() > 0);
                final Transaction transaction = (Transaction)transactionSummary.getChildAt(0);
                final String code = transaction.getContract().getStock().getCode();
                return portfolioTreeTableModel.getLastPrice(code);
            }
            else if(treePaths[0].getLastPathComponent() instanceof Transaction) {
                final Transaction transaction = (Transaction)treePaths[0].getLastPathComponent();
                final String code = transaction.getContract().getStock().getCode();
                return portfolioTreeTableModel.getLastPrice(code);
            }
        }        
        
        return 0.0;
    }
    
    private void showEditTransactionJDialog(Transaction transaction) {
        final MainFrame mainFrame = (MainFrame)javax.swing.SwingUtilities.getAncestorOfClass(MainFrame.class, PortfolioManagementJPanel.this);

        NewTransactionJDialog newTransactionJDialog = new NewTransactionJDialog(mainFrame, true);
        newTransactionJDialog.setStockSelectionEnabled(false);
        newTransactionJDialog.setTransaction(transaction);
        newTransactionJDialog.setTitle("Edit " + transaction.getContract().getStock().getSymbol() + " Transaction");
        newTransactionJDialog.setLocationRelativeTo(this);
        newTransactionJDialog.setVisible(true);
        
        final Transaction newTransaction = newTransactionJDialog.getTransaction();
        if(newTransaction != null) {
            this.editTransaction(newTransaction, transaction);
        }        
    }
    
    public void showNewTransactionJDialog(String stockSymbol, double lastPrice, boolean JComboBoxEnabled) {

        final MainFrame mainFrame = (MainFrame)javax.swing.SwingUtilities.getAncestorOfClass(MainFrame.class, PortfolioManagementJPanel.this);

        final StockCodeAndSymbolDatabase stockCodeAndSymbolDatabase = mainFrame.getStockCodeAndSymbolDatabase();
        
        if(stockCodeAndSymbolDatabase == null) {
            javax.swing.JOptionPane.showMessageDialog(this, "We haven't connected to KLSE server.", "Not Connected", javax.swing.JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        
        NewTransactionJDialog newTransactionJDialog = new NewTransactionJDialog(mainFrame, true);
        newTransactionJDialog.setLocationRelativeTo(this);
        newTransactionJDialog.setStockSymbol(stockSymbol);
        newTransactionJDialog.setPrice(lastPrice);
        newTransactionJDialog.setJComboBoxEnabled(JComboBoxEnabled);
        newTransactionJDialog.setStockCodeAndSymbolDatabase(stockCodeAndSymbolDatabase);
        newTransactionJDialog.initjComboBox1EditorComponentKeyListerner();                
        newTransactionJDialog.setVisible(true);
        
        final Transaction transaction = newTransactionJDialog.getTransaction();
        if(transaction != null) {
            this.addTransaction(transaction);
        }
    }
    
    public void clearTableSelection() {
        treeTable.getSelectionModel().clearSelection();
    }
    
    private void deteleSelectedTreeTableRow() {
        final PortfolioTreeTableModel portfolioTreeTableModel = (PortfolioTreeTableModel)treeTable.getTreeTableModel();
        final TreePath[] treePaths = treeTable.getTreeSelectionModel().getSelectionPaths();
        for(TreePath treePath : treePaths) {
            final Object o = treePath.getLastPathComponent();

            if(portfolioTreeTableModel.getRoot() == o) continue;
            
            final MutableTreeTableNode mutableTreeTableNode = (MutableTreeTableNode)o;

            if(isValidTreeTableNode(portfolioTreeTableModel, mutableTreeTableNode) == false) {
                portfolioTreeTableModel.fireTreeTableNodeChanged(mutableTreeTableNode);
                continue;
            }
                        
            if(o instanceof Transaction)
                portfolioTreeTableModel.removeNodeFromParent(mutableTreeTableNode);
            else if(o instanceof TransactionSummary) {
                portfolioTreeTableModel.removeNodeFromParent(mutableTreeTableNode);
            }
        }        
    }
    
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        deteleSelectedTreeTableRow();
    }//GEN-LAST:event_jButton2ActionPerformed
    
    // Will return null, if more than one transaction being selected, or no
    // transaction being selected.
    private Transaction getSelectedTransaction() {
        if(treeTable.getSelectedRowCount() != 1) return null;
        
        final TreePath[] treePaths = treeTable.getTreeSelectionModel().getSelectionPaths();
        
        final Object o = treePaths[0].getLastPathComponent();

        if (o instanceof Transaction) {
            return (Transaction)o;
        }
        
        return null;        
    }
    
    private boolean isOnlyTreeTableRootBeingSelected() {
        if(treeTable.getSelectedRowCount() != 1) return false;
        
        final TreePath[] treePaths = treeTable.getTreeSelectionModel().getSelectionPaths();
        
        final Object o = treePaths[0].getLastPathComponent();

        final PortfolioTreeTableModel portfolioTreeTableModel = (PortfolioTreeTableModel)treeTable.getTreeTableModel();
        
        return (portfolioTreeTableModel.getRoot() == o);
    }
        
    private class TableRowPopupListener extends MouseAdapter {
        
        public void mouseClicked(MouseEvent evt) {
            if(evt.getClickCount() == 2) {
                final Transaction transaction = getSelectedTransaction();
                if(transaction != null) {
                    PortfolioManagementJPanel.this.showEditTransactionJDialog(transaction);
                }
            }
        }
        
        public void mousePressed(MouseEvent e) {
            maybeShowPopup(e);
        }

        @Override
        public void mouseReleased(MouseEvent e) {
            maybeShowPopup(e);
        }
        
        private void maybeShowPopup(MouseEvent e) {
            if (e.isPopupTrigger()) {
                getMyJTablePopupMenu().show(e.getComponent(), e.getX(), e.getY());
            }
        }
    }
        
    private ImageIcon getImageIcon(String imageIcon) {
        return new javax.swing.ImageIcon(getClass().getResource(imageIcon));
    }
    
    private void showPortfolioChartJDialog() {
        final MainFrame m = (MainFrame)javax.swing.SwingUtilities.getAncestorOfClass(MainFrame.class, this);
        final PortfolioTreeTableModel portfolioTreeTableModel = (PortfolioTreeTableModel)treeTable.getTreeTableModel();
        PortfolioChartJDialog portfolioChartJDialog = new PortfolioChartJDialog(m, false, portfolioTreeTableModel);
        portfolioChartJDialog.setVisible(true);                                    
    }
    
    private JPopupMenu getMyJTablePopupMenu() {                
        JPopupMenu popup = new JPopupMenu();

        JMenuItem menuItem = new JMenuItem("New Transaction...", this.getImageIcon("/images/16x16/inbox.png"));

        menuItem.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                PortfolioManagementJPanel.this.showNewTransactionJDialog(getSelectedStockSymbolForNewTransactionJDialog(), getSelectedStockLastPriceForNewTransactionJDialog(), true);
            }
        });

        popup.add(menuItem);

        popup.addSeparator();
        
        final Transaction transaction = getSelectedTransaction();
        if(transaction != null) {
            menuItem = new JMenuItem("Edit Transaction...", this.getImageIcon("/images/16x16/edit.png"));
            
            menuItem.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent evt) {
                    PortfolioManagementJPanel.this.showEditTransactionJDialog(transaction);
                }
            });            
            
            popup.add(menuItem);
            
            popup.addSeparator();    
        }       
        
        menuItem = new JMenuItem("Portfolio Chart...", this.getImageIcon("/images/16x16/chart.png"));
        
        menuItem.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                PortfolioManagementJPanel.this.showPortfolioChartJDialog();
            }
        });

        popup.add(menuItem);                
        
        if(isOnlyTreeTableRootBeingSelected() == false && (treeTable.getSelectedRow() > 0)) {
            popup.addSeparator();
            
            final MainFrame m = (MainFrame)javax.swing.SwingUtilities.getAncestorOfClass(MainFrame.class, this);
                                
            menuItem = new JMenuItem("History...", this.getImageIcon("/images/16x16/strokedocker.png"));

            menuItem.addActionListener(new ActionListener() {
                    public void actionPerformed(ActionEvent evt) {
                        List<Stock> stocks = getSelectedStock();

                        for(Stock stock : stocks) {
                            m.displayHistoryChart(stock);
                        }
                    }
            });
                        
            popup.add(menuItem);
            popup.addSeparator();
            
            menuItem = new JMenuItem("Delete Transaction", this.getImageIcon("/images/16x16/button_cancel.png"));

            menuItem.addActionListener(new ActionListener() {
                    public void actionPerformed(ActionEvent evt) {
                        PortfolioManagementJPanel.this.deteleSelectedTreeTableRow();
                    }
            });

            popup.add(menuItem);
        }
        
        return popup;
    }

    private void initJTreeTable() {
        treeTable = new org.jdesktop.swingx.JXTreeTable(new PortfolioTreeTableModel());   
        treeTable.setRootVisible(true);
        treeTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        treeTable.getTableHeader().addMouseListener(new TableColumnSelectionPopupListener(1)); 
        // treeTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        this.treeTable.addMouseListener(new TableRowPopupListener());

        this.jScrollPane1.setViewportView(treeTable);        
    }

    private void editTransaction(Transaction newTransaction, Transaction oldTransaction) {
        final PortfolioTreeTableModel portfolioTreeTableModel = (PortfolioTreeTableModel)treeTable.getTreeTableModel();
        portfolioTreeTableModel.editTransaction(newTransaction, oldTransaction);        
    }
    
    private void addTransaction(Transaction transaction) {
        final PortfolioTreeTableModel portfolioTreeTableModel = (PortfolioTreeTableModel)treeTable.getTreeTableModel();
        portfolioTreeTableModel.addTransaction(transaction);
        this.realTimeStockMonitor.addStockCode(transaction.getContract().getStock().getCode());
    }
    
    private void updateRealTimeStockMonitorAccordingToPortfolioTreeTableModel() {
        if(this.realTimeStockMonitor == null) return;
        
        final PortfolioTreeTableModel portfolioTreeTableModel = (PortfolioTreeTableModel)treeTable.getTreeTableModel();
                
        if(portfolioTreeTableModel != null) {
            this.treeTable.setTreeTableModel(portfolioTreeTableModel);
            
            Portfolio portfolio = (Portfolio)portfolioTreeTableModel.getRoot();
            final int count = portfolio.getChildCount();
            
            for(int i=0; i<count; i++) {
                TransactionSummary transactionSummary = (TransactionSummary)portfolio.getChildAt(i);
                
                if(transactionSummary.getChildCount() <= 0) continue;
                
                final Transaction transaction = (Transaction)transactionSummary.getChildAt(0);

                this.realTimeStockMonitor.addStockCode(transaction.getContract().getStock().getCode());
            }
        }
        
    }
    
    private List<Stock> getSelectedStock() {
        final TreePath[] treePaths = treeTable.getTreeSelectionModel().getSelectionPaths();
        List<Stock> stocks = new ArrayList<Stock>();
        Set<String> s = new HashSet<String>();
        
        for(TreePath treePath : treePaths) {
            if(treePath.getLastPathComponent() instanceof TransactionSummary) {
                final TransactionSummary transactionSummary = (TransactionSummary)treePaths[0].getLastPathComponent();
                assert(transactionSummary.getChildCount() > 0);
                final Transaction transaction = (Transaction)transactionSummary.getChildAt(0);
                final Stock stock = transaction.getContract().getStock();
                final String code = stock.getCode();
                
                if(s.contains(code)) continue;
                
                stocks.add(stock);
                s.add(code);
            }
            else if(treePath.getLastPathComponent() instanceof Transaction) {
                final Transaction transaction = (Transaction)treePaths[0].getLastPathComponent();
                final Stock stock = transaction.getContract().getStock();
                final String code = stock.getCode();
                
                if(s.contains(code)) continue;
                
                stocks.add(stock);
                s.add(code);
            }                        
        }
        
        return Collections.unmodifiableList(stocks);
    }
    
    private void initPortfolio() {
        try {
            File f = new File("config" + File.separator + "portfolio.xml");

            XStream xStream = new XStream();
            InputStream inputStream = new java.io.FileInputStream(f);
            final PortfolioTreeTableModel portfolioTreeTableModel = (PortfolioTreeTableModel)xStream.fromXML(inputStream);
            this.treeTable.setTreeTableModel(portfolioTreeTableModel);
        }
        catch(java.io.FileNotFoundException exp) {
            log.error("", exp);
        }
        catch(com.thoughtworks.xstream.core.BaseException exp) {
            log.error("", exp);
        }
        
        updateRealTimeStockMonitorAccordingToPortfolioTreeTableModel();
    }
    
    public boolean savePortfolio() {
        if(Utils.createDirectoryIfDoesNotExist("config") == false)
        {
            return false;
        }
        
        File f = new File("config" + File.separator + "portfolio.xml");
                
        XStream xStream = new XStream();   
        
        try {
            OutputStream outputStream = new FileOutputStream(f);
            final PortfolioTreeTableModel portfolioTreeTableModel = (PortfolioTreeTableModel)treeTable.getTreeTableModel();
            xStream.toXML(portfolioTreeTableModel, outputStream);  
        }
        catch(java.io.FileNotFoundException exp) {
            log.error("", exp);
            return false;
        }
        catch(com.thoughtworks.xstream.core.BaseException exp) {
            log.error("", exp);
            return false;
        }
                      
        return true;
    }
    
    public void initRealTimeStockMonitor(java.util.List<StockServerFactory> stockServerFactories) {
        realTimeStockMonitor = new RealTimeStockMonitor(4, 20, MainFrame.getJStockOptions().getScanningSpeed());
        
        for(StockServerFactory factory : stockServerFactories) {
            realTimeStockMonitor.addStockServerFactory(factory);
        }
        
        realTimeStockMonitor.attach(this.realTimeStockMonitorObserver);
        
        updateRealTimeStockMonitorAccordingToPortfolioTreeTableModel();
    }
    
    // This is the workaround to overcome Erasure by generics. We are unable to make MainFrame to
    // two observers at the same time.
    private org.yccheok.jstock.engine.Observer<RealTimeStockMonitor, java.util.List<Stock>> getRealTimeStockMonitorObserver() {
        return new org.yccheok.jstock.engine.Observer<RealTimeStockMonitor, java.util.List<Stock>>() {
            public void update(RealTimeStockMonitor monitor, java.util.List<Stock> stocks)
            {
                PortfolioManagementJPanel.this.update(monitor, stocks);
            }
        };
    }
    
    public void update(RealTimeStockMonitor monitor, final java.util.List<Stock> stocks) {
        final PortfolioTreeTableModel portfolioTreeTableModel = (PortfolioTreeTableModel)treeTable.getTreeTableModel();
 
        for(Stock stock : stocks) {
            if(false == portfolioTreeTableModel.updateStockLastPrice(stock)) {
                this.realTimeStockMonitor.removeStockCode(stock.getCode());
            }
        }                
    }  
    
    public void softStart() {
        if(realTimeStockMonitor == null) return;
                
        realTimeStockMonitor.softStart();
    }
    
    public void softStop() {
        if(realTimeStockMonitor == null) return;
        
        realTimeStockMonitor.softStop();
    }
    
    private static final Log log = LogFactory.getLog(PortfolioManagementJPanel.class);
    
    private RealTimeStockMonitor realTimeStockMonitor = null;
    private org.yccheok.jstock.engine.Observer<RealTimeStockMonitor, java.util.List<Stock>> realTimeStockMonitorObserver = this.getRealTimeStockMonitorObserver();

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    private org.jdesktop.swingx.JXTreeTable treeTable; 
}
