/*
 * JStock - Free Stock Market Software
 * Copyright (C) 2010 Yan Cheng CHEOK <yccheok@yahoo.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

package org.yccheok.jstock.gui;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.text.DateFormat;
import java.text.MessageFormat;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.swing.ImageIcon;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;

import javax.swing.JTable;
import javax.swing.SwingUtilities;
import javax.swing.table.*;
import javax.swing.tree.TreePath;
import org.apache.commons.logging.*;
import org.jdesktop.swingx.JXTreeTable;
import org.jdesktop.swingx.table.TableColumnExt;
import org.yccheok.jstock.portfolio.*;
import org.yccheok.jstock.engine.*;
import org.jdesktop.swingx.treetable.*;
import org.yccheok.jstock.file.Statement;
import org.yccheok.jstock.file.Statements;
import org.yccheok.jstock.gui.charting.InvestmentFlowChartJDialog;
import org.yccheok.jstock.gui.portfolio.CommentJDialog;
import org.yccheok.jstock.gui.portfolio.DepositSummaryJDialog;
import org.yccheok.jstock.gui.portfolio.DepositSummaryTableModel;
import org.yccheok.jstock.gui.portfolio.DividendSummaryBarChartJDialog;
import org.yccheok.jstock.gui.portfolio.DividendSummaryJDialog;
import org.yccheok.jstock.gui.portfolio.DividendSummaryTableModel;
import org.yccheok.jstock.gui.portfolio.ToolTipHighlighter;
import org.yccheok.jstock.internationalization.GUIBundle;
import org.yccheok.jstock.internationalization.MessagesBundle;

/**
 *
 * @author  Owner
 */
public class PortfolioManagementJPanel extends javax.swing.JPanel {
   
    /** Creates new form PortfoliioJPanel */
    public PortfolioManagementJPanel() {
        initComponents();        
        
        this.initPortfolio();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jSplitPane1 = new javax.swing.JSplitPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        buyTreeTable = new org.jdesktop.swingx.JXTreeTable(new BuyPortfolioTreeTableModel());
        // We need to have a hack way, to have "Comment" in the model, but not visible to user.
        // So that our ToolTipHighlighter can work correctly.
        // setVisible should be called after JXTreeTable has been constructed. This is to avoid
        // initGUIOptions from calling JTable.removeColumn
        // ToolTipHighlighter will not work correctly if we tend to hide column view by removeColumn.
        // We need to hide the view by using TableColumnExt.setVisible.
        // Why? Don't ask me. Ask SwingX team.
        ((TableColumnExt)buyTreeTable.getColumn(GUIBundle.getString("PortfolioManagementJPanel_Comment"))).setVisible(false);
        jScrollPane2 = new javax.swing.JScrollPane();
        sellTreeTable = new org.jdesktop.swingx.JXTreeTable(new SellPortfolioTreeTableModel());

        // We need to have a hack way, to have "Comment" in the model, but not visible to user.
        // So that our ToolTipHighlighter can work correctly.
        // setVisible should be called after JXTreeTable has been constructed. This is to avoid
        // initGUIOptions from calling JTable.removeColumn
        // ToolTipHighlighter will not work correctly if we tend to hide column view by removeColumn.
        // We need to hide the view by using TableColumnExt.setVisible.
        // Why? Don't ask me. Ask SwingX team.
        ((TableColumnExt)sellTreeTable.getColumn(GUIBundle.getString("PortfolioManagementJPanel_Comment"))).setVisible(false);
        jPanel2 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();

        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });
        setLayout(new java.awt.BorderLayout());

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Portfolio Management"));
        jPanel1.setLayout(new java.awt.BorderLayout(0, 5));

        jPanel4.setLayout(new java.awt.BorderLayout());

        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jLabel1.setText(getShareLabel());
        jPanel3.add(jLabel1);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11));
        jPanel3.add(jLabel2);

        jLabel3.setText(getCashLabel());
        jPanel3.add(jLabel3);

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11));
        jPanel3.add(jLabel4);

        jPanel4.add(jPanel3, java.awt.BorderLayout.WEST);

        jLabel5.setText(getPaperProfitLabel());
        jPanel5.add(jLabel5);

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 11));
        jPanel5.add(jLabel6);

        jLabel7.setText(getRealizedProfitLabel());
        jPanel5.add(jLabel7);

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 11));
        jPanel5.add(jLabel8);

        jPanel4.add(jPanel5, java.awt.BorderLayout.EAST);

        jPanel1.add(jPanel4, java.awt.BorderLayout.NORTH);

        jSplitPane1.setDividerLocation(250);
        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        jScrollPane1.setBorder(javax.swing.BorderFactory.createTitledBorder("Buy"));

        buyTreeTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        buyTreeTable.setRootVisible(true);
        // We need to have a hack way, to have "Comment" in the model, but not visible to user.
        // So that our ToolTipHighlighter can work correctly.
        buyTreeTable.getTableHeader().addMouseListener(new TableColumnSelectionPopupListener(1, new String[]{GUIBundle.getString("PortfolioManagementJPanel_Comment")}));
        buyTreeTable.addMouseListener(new BuyTableRowPopupListener());
        buyTreeTable.addKeyListener(new TableKeyEventListener());

        org.jdesktop.swingx.decorator.Highlighter highlighter0 = org.jdesktop.swingx.decorator.HighlighterFactory.createSimpleStriping(new Color(245, 245, 220));
        buyTreeTable.addHighlighter(highlighter0);
        buyTreeTable.addHighlighter(new ToolTipHighlighter());
        buyTreeTable.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                buyTreeTableValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(buyTreeTable);

        jSplitPane1.setLeftComponent(jScrollPane1);

        jScrollPane2.setBorder(javax.swing.BorderFactory.createTitledBorder("Sell"));

        sellTreeTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        sellTreeTable.setRootVisible(true);
        // We need to have a hack way, to have "Comment" in the model, but not visible to user.
        // So that our ToolTipHighlighter can work correctly.
        sellTreeTable.getTableHeader().addMouseListener(new TableColumnSelectionPopupListener(1, new String[]{GUIBundle.getString("PortfolioManagementJPanel_Comment")}));
        sellTreeTable.addMouseListener(new SellTableRowPopupListener());
        sellTreeTable.addKeyListener(new TableKeyEventListener());

        org.jdesktop.swingx.decorator.Highlighter highlighter1 = org.jdesktop.swingx.decorator.HighlighterFactory.createSimpleStriping(new Color(245, 245, 220));
        sellTreeTable.addHighlighter(highlighter1);
        sellTreeTable.addHighlighter(new ToolTipHighlighter());
        sellTreeTable.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                sellTreeTableValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(sellTreeTable);

        jSplitPane1.setRightComponent(jScrollPane2);

        jPanel1.add(jSplitPane1, java.awt.BorderLayout.CENTER);

        add(jPanel1, java.awt.BorderLayout.CENTER);

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/16x16/inbox.png"))); // NOI18N
        jButton1.setText("Buy...");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton1);

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/16x16/outbox.png"))); // NOI18N
        jButton3.setText("Sell...");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton3);

        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/16x16/money.png"))); // NOI18N
        jButton4.setText("Deposit...");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton4);

        jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/16x16/money2.png"))); // NOI18N
        jButton5.setText("Dividend...");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton5);

        add(jPanel2, java.awt.BorderLayout.SOUTH);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        List<Stock> stocks = getSelectedStocks();
        if (stocks.size() == 1) {
            this.showNewBuyTransactionJDialog(stocks.get(0), this.getStockLastPrice(stocks.get(0)), true);
        }
        else {
            this.showNewBuyTransactionJDialog(Utils.getEmptyStock(Code.newInstance(""), Symbol.newInstance("")), 0.0, true);
        }
    }//GEN-LAST:event_jButton1ActionPerformed
    
    private boolean isValidTreeTableNode(TreeTableModel treeTableModel, Object node) {
        boolean result = false;
        
        final Object root = treeTableModel.getRoot();
        
        if (node instanceof TreeTableNode) {
            TreeTableNode ttn = (TreeTableNode) node;

            while (!result && ttn != null) {
                result = ttn == root;

                ttn = ttn.getParent();
            }
        }

        return result;
    }

    private String getSelectedFirstColumnString(JXTreeTable treeTable) {
        final TreePath[] treePaths = treeTable.getTreeSelectionModel().getSelectionPaths();

        if(treePaths == null) {
            return null;
        }

        if(treePaths.length == 1) {
            return treePaths[0].getLastPathComponent().toString();
        }

        return null;
    }

    private Commentable getSelectedCommentable(JXTreeTable treeTable) {
        final TreePath[] treePaths = treeTable.getTreeSelectionModel().getSelectionPaths();

        if(treePaths == null) {
            return null;
        }

        if(treePaths.length == 1) {
            if(treePaths[0].getLastPathComponent() instanceof Commentable) {
                return (Commentable)treePaths[0].getLastPathComponent();
            }
        }

        return null;
    }

    public boolean openAsExcelFile(File file) {
        final java.util.List<Statements> statementsList = Statements.newInstanceFromExcelFile(file);
        boolean status = true;
        for (Statements statements : statementsList) {
            status = status & this.openAsStatements(statements, file);
        }
        return status;
    }

    public boolean openAsCSVFile(File file) {
        final Statements statements = Statements.newInstanceFromCSVFile(file);
        return this.openAsStatements(statements, file);
    }

    public boolean openAsStatements(Statements statements, File file) {
        if (statements == null) {
            return false;
        }
        if (statements.getType() == Statement.Type.PortfolioManagementBuy || statements.getType() == Statement.Type.PortfolioManagementSell || statements.getType() == Statement.Type.PortfolioManagementDeposit || statements.getType() == Statement.Type.PortfolioManagementDividend) {
            final DateFormat dateFormat = DateFormat.getDateInstance();
            final int size = statements.size();
            switch(statements.getType()) {
                case PortfolioManagementBuy:
                {
                    final List<Transaction> transactions = new ArrayList<Transaction>();

                    for (int i = 0; i < size; i++) {
                        final Statement statement = statements.get(i);
                        final String _code = statement.getValueAsString(GUIBundle.getString("MainFrame_Code"));
                        final String _symbol = statement.getValueAsString(GUIBundle.getString("MainFrame_Symbol"));
                        final String _date = statement.getValueAsString(GUIBundle.getString("PortfolioManagementJPanel_Date"));
                        final Integer units = statement.getValueAsInteger(GUIBundle.getString("PortfolioManagementJPanel_Units"));
                        final Double purchasePrice = statement.getValueAsDouble(GUIBundle.getString("PortfolioManagementJPanel_PurchasePrice"));
                        final Double broker = statement.getValueAsDouble(GUIBundle.getString("PortfolioManagementJPanel_Broker"));
                        final Double clearingFee = statement.getValueAsDouble(GUIBundle.getString("PortfolioManagementJPanel_ClearingFee"));
                        final Double stampDuty = statement.getValueAsDouble(GUIBundle.getString("PortfolioManagementJPanel_StampDuty"));
                        final String _comment = statement.getValueAsString(GUIBundle.getString("PortfolioManagementJPanel_Comment"));

                        Stock stock = null;
                        if (_code.length() > 0 && _symbol.length() > 0) {
                            stock = Utils.getEmptyStock(Code.newInstance(_code), Symbol.newInstance(_symbol));
                        }
                        else {
                            log.error("Unexpected empty stock. Ignore");
                            // stock is null.
                            continue;
                        }
                        Date date = null;
                        try {
                            date = dateFormat.parse((String)_date);
                        }
                        catch (ParseException exp) {
                            log.error(null, exp);
                        }

                        if (date == null) {
                            log.error("Unexpected wrong date. Ignore");
                            continue;
                        }

                        // Shall we continue to ignore, or shall we just return false to
                        // flag an error?
                        if (units == null) {
                            log.error("Unexpected wrong units. Ignore");
                            continue;
                        }
                        if (purchasePrice == null || broker == null || clearingFee == null || stampDuty == null) {
                            log.error("Unexpected wrong purchasePrice/broker/clearingFee/stampDuty. Ignore");
                            continue;
                        }

                        final SimpleDate simpleDate = new SimpleDate(date);
                        final Contract.Type type = Contract.Type.Buy;
                        final Contract.ContractBuilder builder = new Contract.ContractBuilder(stock, simpleDate);
                        final Contract contract = builder.type(type).quantity(units).price(purchasePrice).build();
                        final Transaction t = new Transaction(contract, org.yccheok.jstock.portfolio.Utils.getDummyBroker(broker), org.yccheok.jstock.portfolio.Utils.getDummyStampDuty(contract, stampDuty), org.yccheok.jstock.portfolio.Utils.getDummyClearingFee(clearingFee));
                        t.setComment(_comment);
                        transactions.add(t);
                    }

                    if (transactions.size() <= 0) {
                        return false;
                    }

                    if (this.getBuyTransactionSize() > 0) {
                        final String output = MessageFormat.format(MessagesBundle.getString("question_message_load_file_for_buy_portfolio_template"), file.getName());
                        final int result = javax.swing.JOptionPane.showConfirmDialog(MainFrame.getInstance(), output, MessagesBundle.getString("question_title_load_file_for_buy_portfolio"), javax.swing.JOptionPane.YES_NO_OPTION, javax.swing.JOptionPane.QUESTION_MESSAGE);
                        if (result != javax.swing.JOptionPane.YES_OPTION) {
                            // Assume success.
                            return true;
                        }
                    }
                    this.buyTreeTable.setTreeTableModel(new BuyPortfolioTreeTableModel());
                    for (Transaction transaction : transactions) {
                        this.addBuyTransaction(transaction);
                    }
                    updateRealTimeStockMonitorAccordingToBuyPortfolioTreeTableModel();
                }
                break;

                case PortfolioManagementSell:
                {
                    final List<Transaction> transactions = new ArrayList<Transaction>();

                    for (int i = 0; i < size; i++) {
                        final Statement statement = statements.get(i);
                        final String _code = statement.getValueAsString(GUIBundle.getString("MainFrame_Code"));
                        final String _symbol = statement.getValueAsString(GUIBundle.getString("MainFrame_Symbol"));
                        final String _referenceDate = statement.getValueAsString(GUIBundle.getString("PortfolioManagementJPanel_ReferenceDate"));
                        final String _date = statement.getValueAsString(GUIBundle.getString("PortfolioManagementJPanel_Date"));
                        final Integer units = statement.getValueAsInteger(GUIBundle.getString("PortfolioManagementJPanel_Units"));
                        final Double sellingPrice =  statement.getValueAsDouble(GUIBundle.getString("PortfolioManagementJPanel_SellingPrice"));
                        final Double purchasePrice = statement.getValueAsDouble(GUIBundle.getString("PortfolioManagementJPanel_PurchasePrice"));
                        final Double broker = statement.getValueAsDouble(GUIBundle.getString("PortfolioManagementJPanel_Broker"));
                        final Double clearingFee = statement.getValueAsDouble(GUIBundle.getString("PortfolioManagementJPanel_ClearingFee"));
                        final Double stampDuty = statement.getValueAsDouble(GUIBundle.getString("PortfolioManagementJPanel_StampDuty"));
                        final String _comment = statement.getValueAsString(GUIBundle.getString("PortfolioManagementJPanel_Comment"));

                        Stock stock = null;
                        if (_code.length() > 0 && _symbol.length() > 0) {
                            stock = Utils.getEmptyStock(Code.newInstance(_code), Symbol.newInstance(_symbol));
                        }
                        else {
                            log.error("Unexpected empty stock. Ignore");
                            // stock is null.
                            continue;
                        }

                        Date date = null;
                        Date referenceDate = null;
                        try {
                            date = dateFormat.parse((String)_date);
                            referenceDate = dateFormat.parse((String)_referenceDate);
                        }
                        catch (ParseException exp) {
                            log.error(null, exp);
                        }

                        if (date == null || referenceDate == null) {
                            log.error("Unexpected wrong date/referenceDate. Ignore");
                            continue;
                        }
                        // Shall we continue to ignore, or shall we just return false to
                        // flag an error?
                        if (units == null) {
                            log.error("Unexpected wrong units. Ignore");
                            continue;
                        }
                        if (purchasePrice == null || broker == null || clearingFee == null || stampDuty == null || sellingPrice == null) {
                            log.error("Unexpected wrong purchasePrice/broker/clearingFee/stampDuty/sellingPrice. Ignore");
                            continue;
                        }
                        
                        final SimpleDate simpleDate = new SimpleDate(date);
                        final SimpleDate simpleReferenceDate = new SimpleDate(referenceDate);
                        final Contract.Type type = Contract.Type.Sell;
                        final Contract.ContractBuilder builder = new Contract.ContractBuilder(stock, simpleDate);
                        final Contract contract = builder.type(type).quantity(units).price(sellingPrice).referencePrice(purchasePrice).referenceDate(simpleReferenceDate).build();
                        final Transaction t = new Transaction(contract, org.yccheok.jstock.portfolio.Utils.getDummyBroker(broker), org.yccheok.jstock.portfolio.Utils.getDummyStampDuty(contract, stampDuty), org.yccheok.jstock.portfolio.Utils.getDummyClearingFee(clearingFee));
                        t.setComment(_comment);
                        transactions.add(t);
                    }
                    if (transactions.size() <= 0) {
                        return false;
                    }

                    if (this.getSellTransactionSize() > 0) {
                        final String output = MessageFormat.format(MessagesBundle.getString("question_message_load_file_for_sell_portfolio_template"), file.getName());
                        final int result = javax.swing.JOptionPane.showConfirmDialog(MainFrame.getInstance(), output, MessagesBundle.getString("question_title_load_file_for_sell_portfolio"), javax.swing.JOptionPane.YES_NO_OPTION, javax.swing.JOptionPane.QUESTION_MESSAGE);
                        if (result != javax.swing.JOptionPane.YES_OPTION) {
                            // Assume success.
                            return true;
                        }
                    }
                    this.sellTreeTable.setTreeTableModel(new SellPortfolioTreeTableModel());
                    for (Transaction transaction : transactions) {
                        this.addSellTransaction(transaction);
                    }
                }
                break;

                case PortfolioManagementDeposit:
                {
                    final List<Deposit> deposits = new ArrayList<Deposit>();

                    for (int i = 0; i < size; i++) {
                        Date date = null;
                        final Statement statement = statements.get(i);
                        final String object0 = statement.getValueAsString(GUIBundle.getString("PortfolioManagementJPanel_Date"));
                        assert(object0 != null);
                        try {
                            date = dateFormat.parse(object0);
                        }
                        catch (ParseException exp) {
                            log.error(null, exp);
                        }
                        // Shall we continue to ignore, or shall we just return false to
                        // flag an error?
                        if (date == null) {
                            log.error("Unexpected wrong date. Ignore");
                            continue;
                        }
                        final Double cash = statement.getValueAsDouble(GUIBundle.getString("PortfolioManagementJPanel_Cash"));
                        // Shall we continue to ignore, or shall we just return false to
                        // flag an error?
                        if (cash == null) {
                            log.error("Unexpected wrong cash. Ignore");
                            continue;
                        }
                        final Deposit deposit = new Deposit(cash, new SimpleDate(date));
                        deposits.add(deposit);
                    }

                    if (deposits.size() <= 0) {
                        return false;
                    }

                    if (this.depositSummary.size() > 0) {
                        final String output = MessageFormat.format(MessagesBundle.getString("question_message_load_file_for_cash_deposit_template"), file.getName());
                        final int result = javax.swing.JOptionPane.showConfirmDialog(MainFrame.getInstance(), output, MessagesBundle.getString("question_title_load_file_for_cash_deposit"), javax.swing.JOptionPane.YES_NO_OPTION, javax.swing.JOptionPane.QUESTION_MESSAGE);
                        if (result != javax.swing.JOptionPane.YES_OPTION) {
                            // Assume success.
                            return true;
                        }
                        this.depositSummary = new DepositSummary();
                    }

                    for (Deposit deposit : deposits) {
                        depositSummary.add(deposit);
                    }
                }
                break;

                case PortfolioManagementDividend:
                {
                    final List<Dividend> dividends = new ArrayList<Dividend>();

                    for (int i = 0; i < size; i++) {
                        Date date = null;
                        Stock stock = null;
                        final Statement statement = statements.get(i);
                        final String object0 = statement.getValueAsString(GUIBundle.getString("PortfolioManagementJPanel_Date"));
                        assert(object0 != null);
                        try {
                            date = dateFormat.parse((String)object0);
                        }
                        catch (ParseException exp) {
                            log.error(null, exp);
                        }
                        // Shall we continue to ignore, or shall we just return false to
                        // flag an error?
                        if (date == null) {
                            log.error("Unexpected wrong date. Ignore");
                            continue;
                        }
                        final Double dividend = statement.getValueAsDouble(GUIBundle.getString("PortfolioManagementJPanel_Dividend"));
                        // Shall we continue to ignore, or shall we just return false to
                        // flag an error?
                        if (dividend == null) {
                            log.error("Unexpected wrong dividend. Ignore");
                            continue;
                        }
                        final String codeStr = statement.getValueAsString(GUIBundle.getString("MainFrame_Code"));
                        final String symbolStr = statement.getValueAsString(GUIBundle.getString("MainFrame_Symbol"));
                        if (codeStr.length() > 0 && symbolStr.length() > 0) {
                            stock = Utils.getEmptyStock(Code.newInstance(codeStr), Symbol.newInstance(symbolStr));
                        }
                        else {
                            log.error("Unexpected wrong stock. Ignore");
                            // stock is null.
                            continue;
                        }
                        final Dividend d = new Dividend(stock, dividend, new SimpleDate(date));
                        dividends.add(d);
                    }

                    if (dividends.size() <= 0) {
                        return false;
                    }

                    if (this.dividendSummary.size() > 0) {
                        final String output = MessageFormat.format(MessagesBundle.getString("question_message_load_file_for_dividend_template"), file.getName());
                        final int result = javax.swing.JOptionPane.showConfirmDialog(MainFrame.getInstance(), output, MessagesBundle.getString("question_title_load_file_for_dividend"), javax.swing.JOptionPane.YES_NO_OPTION, javax.swing.JOptionPane.QUESTION_MESSAGE);
                        if (result != javax.swing.JOptionPane.YES_OPTION) {
                            // Assume success.
                            return true;
                        }
                        this.dividendSummary = new DividendSummary();
                    }

                    for (Dividend dividend : dividends) {
                        dividendSummary.add(dividend);
                    }
                }
                break;

                default:
                    assert(false);
            }
            this.updateWealthHeader();
        }
        else if (statements.getType() == Statement.Type.RealtimeInfo) {
            /* Open using other tabs. */
            return MainFrame.getInstance().openAsStatements(statements, file);
        }
        else {
            return false;
        }
        return true;
    }

    private List<Stock> getSelectedStocks() {
        List<Stock> stocks0 = this.getSelectedStocks(buyTreeTable);
        List<Stock> stocks1 = this.getSelectedStocks(sellTreeTable);
        Set<Code> c = new HashSet<Code>();
        List<Stock> stocks = new ArrayList<Stock>();

        for (Stock stock : stocks0) {
            if (c.contains(stock.getCode()) == false) {
                c.add(stock.getCode());
                stocks.add(stock);
            }
        }

        for (Stock stock : stocks1) {
            if (c.contains(stock.getCode()) == false) {
                c.add(stock.getCode());
                stocks.add(stock);
            }
        }

        return Collections.unmodifiableList(stocks);
    }
    
    public double getStockLastPrice(Stock stock) {
        final BuyPortfolioTreeTableModel buyPortfolioTreeTableModel = (BuyPortfolioTreeTableModel)buyTreeTable.getTreeTableModel();
        return buyPortfolioTreeTableModel.getLastPrice(stock.getCode());
    }

    private void showNewSellTransactionJDialog(List<Transaction> buyTransactions) {
        final MainFrame mainFrame = MainFrame.getInstance();        
        NewSellTransactionJDialog newSellTransactionJDialog = new NewSellTransactionJDialog(mainFrame, true);
        if (buyTransactions.size() > 1) {
            newSellTransactionJDialog.setTitle(newSellTransactionJDialog.getTitle() + " ["+ buyTransactions.size() + " Batch Sell]");
        }
        newSellTransactionJDialog.setLocationRelativeTo(this);
        newSellTransactionJDialog.setBuyTransactions(buyTransactions);       
        newSellTransactionJDialog.setVisible(true);
        
        final List<Transaction> newSellTransactions = newSellTransactionJDialog.getTransactions();

        assert(newSellTransactions.size() == buyTransactions.size());
        for (int i = 0; i < newSellTransactions.size(); i++) {
            Transaction newSellTransaction = newSellTransactions.get(i);
            Transaction buyTransaction = buyTransactions.get(i);

            final int remain = buyTransaction.getQuantity() - newSellTransaction.getQuantity();
            
            assert(remain >= 0);
            
            addSellTransaction(newSellTransaction);
            
            final BuyPortfolioTreeTableModel portfolioTreeTableModel = (BuyPortfolioTreeTableModel)buyTreeTable.getTreeTableModel();
            
            if (remain <= 0) {
                portfolioTreeTableModel.removeTransaction(buyTransaction);
            }
            else {
                this.editBuyTransaction(buyTransaction.setQuantity(remain), buyTransaction);
            }                        
        }

        updateWealthHeader();
    }
    
    private void showEditTransactionJDialog(Transaction transaction) {
        final MainFrame mainFrame = MainFrame.getInstance();

        if (transaction.getContract().getType() == Contract.Type.Buy) {
            NewBuyTransactionJDialog newTransactionJDialog = new NewBuyTransactionJDialog(mainFrame, true);
            newTransactionJDialog.setStockSelectionEnabled(false);
            newTransactionJDialog.setTransaction(transaction);
            newTransactionJDialog.setTitle("Edit " + transaction.getContract().getStock().getSymbol() + " Buy");
            newTransactionJDialog.setLocationRelativeTo(this);
            newTransactionJDialog.setVisible(true);

            final Transaction newTransaction = newTransactionJDialog.getTransaction();
            if(newTransaction != null) {
                this.editBuyTransaction(newTransaction, transaction);
                updateWealthHeader();
            }        
        }
        else {
            assert(transaction.getContract().getType() == Contract.Type.Sell);
            
            NewSellTransactionJDialog newTransactionJDialog = new NewSellTransactionJDialog(mainFrame, true);
            newTransactionJDialog.setSellTransaction(transaction);
            newTransactionJDialog.setTitle("Edit " + transaction.getContract().getStock().getSymbol() + " Sell");
            newTransactionJDialog.setLocationRelativeTo(this);
            newTransactionJDialog.setVisible(true);

            List<Transaction> transactions = newTransactionJDialog.getTransactions();
            for (Transaction newTransaction : transactions) {
                this.editSellTransaction(newTransaction, transaction);
                updateWealthHeader();
            }                    
        }
    }
    
    public void showNewBuyTransactionJDialog(Stock stock, double lastPrice, boolean JComboBoxEnabled) {

        final MainFrame mainFrame = MainFrame.getInstance();

        final StockCodeAndSymbolDatabase stockCodeAndSymbolDatabase = mainFrame.getStockCodeAndSymbolDatabase();
        
        if(stockCodeAndSymbolDatabase == null) {
            javax.swing.JOptionPane.showMessageDialog(this, "We haven't connected to stock server.", "Not Connected", javax.swing.JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        
        NewBuyTransactionJDialog newTransactionJDialog = new NewBuyTransactionJDialog(mainFrame, true);
        newTransactionJDialog.setLocationRelativeTo(this);
        newTransactionJDialog.setStock(stock);
        newTransactionJDialog.setPrice(lastPrice);
        newTransactionJDialog.setJComboBoxEnabled(JComboBoxEnabled);
        newTransactionJDialog.setStockCodeAndSymbolDatabase(stockCodeAndSymbolDatabase);               
        newTransactionJDialog.setVisible(true);
        
        final Transaction transaction = newTransactionJDialog.getTransaction();
        if(transaction != null) {
            this.addBuyTransaction(transaction);
            updateWealthHeader();
        }
    }
    
    public void clearTableSelection() {
        buyTreeTable.getSelectionModel().clearSelection();
        sellTreeTable.getSelectionModel().clearSelection();
    }
    
    private void deleteSelectedTreeTableRow(org.jdesktop.swingx.JXTreeTable treeTable) {
        final AbstractPortfolioTreeTableModel portfolioTreeTableModel = (AbstractPortfolioTreeTableModel)treeTable.getTreeTableModel();
        final TreePath[] treePaths = treeTable.getTreeSelectionModel().getSelectionPaths();
        
        if(treePaths == null) {
            return;
        }
        
        for(TreePath treePath : treePaths) {
            final Object o = treePath.getLastPathComponent();

            if(portfolioTreeTableModel.getRoot() == o) continue;
            
            final MutableTreeTableNode mutableTreeTableNode = (MutableTreeTableNode)o;

            if(isValidTreeTableNode(portfolioTreeTableModel, mutableTreeTableNode) == false) {
                //???
                portfolioTreeTableModel.fireTreeTableNodeChanged(mutableTreeTableNode);
                continue;
            }
                        
            if(o instanceof Transaction) {                
                portfolioTreeTableModel.removeTransaction((Transaction)o);
                
            }
            else if(o instanceof TransactionSummary) {
                portfolioTreeTableModel.removeTransactionSummary((TransactionSummary)o);
            }
        }        
    }
    
    private void deteleSelectedTreeTableRow() {
        deleteSelectedTreeTableRow(this.buyTreeTable);
        deleteSelectedTreeTableRow(this.sellTreeTable);
        
        updateWealthHeader();
    }
    
    private void buyTreeTableValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_buyTreeTableValueChanged
        // TODO add your handling code here:
        javax.swing.SwingUtilities.invokeLater(new Runnable() {
                public void run() {
                    if(buyTreeTable.getSelectedRowCount() > 0) {
                        sellTreeTable.clearSelection();
                    }
                }        
        });
    }//GEN-LAST:event_buyTreeTableValueChanged

    private void sellTreeTableValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_sellTreeTableValueChanged
        // TODO add your handling code here:
        javax.swing.SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                if(sellTreeTable.getSelectedRowCount() > 0) {
                    buyTreeTable.clearSelection();
                }
            }
        });
    }//GEN-LAST:event_sellTreeTableValueChanged

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        // TODO add your handling code here:
        this.clearTableSelection();
    }//GEN-LAST:event_formMouseClicked

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        final List<Stock> stocks = this.getSelectedStocks(buyTreeTable);
        if (stocks.size() != 1) {
            JOptionPane.showMessageDialog(this, "You need to select only single stock from buy portfolio to perform sell transaction.", "Single Stock Selection Needed", JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        List<Transaction> transactions = this.getSelectedTransactions(buyTreeTable);
        this.showNewSellTransactionJDialog(transactions);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        showDepositSummaryJDialog();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        showDividendSummaryJDialog();
    }//GEN-LAST:event_jButton5ActionPerformed

    // When transaction summary being selected, we assume all its transactions are being selected.
    // This is most of the users intention too, I guess.
    private List<Transaction> getSelectedTransactions(JXTreeTable treeTable) {
        final TreePath[] treePaths = treeTable.getTreeSelectionModel().getSelectionPaths();
        List<Transaction> transactions = new ArrayList<Transaction>();

        if(treePaths == null) {
            return Collections.unmodifiableList(transactions);
        }

        for (TreePath treePath : treePaths) {
            final Object o = treePath.getLastPathComponent();
            if (o instanceof Transaction) {
                final Transaction transaction = (Transaction)o;

                if (transactions.contains(transaction) == false) {
                    transactions.add(transaction);
                }
            }
            else if (o instanceof TransactionSummary) {
                final TransactionSummary transactionSummary = (TransactionSummary)o;
                final int count = transactionSummary.getChildCount();
                for (int i = 0; i < count; i++) {
                    final Transaction transaction = (Transaction)transactionSummary.getChildAt(i);

                    if (transactions.contains(transaction) == false) {
                        transactions.add(transaction);
                    }
                }
            }
        }
        
        return Collections.unmodifiableList(transactions);
    }
    
    private boolean isOnlyTreeTableRootBeingSelected(JXTreeTable treeTable) {
        if(treeTable.getSelectedRowCount() != 1) return false;
        
        final TreePath[] treePaths = treeTable.getTreeSelectionModel().getSelectionPaths();
        
        final Object o = treePaths[0].getLastPathComponent();

        final AbstractPortfolioTreeTableModel portfolioTreeTableModel = (AbstractPortfolioTreeTableModel)treeTable.getTreeTableModel();
        
        return (portfolioTreeTableModel.getRoot() == o);
    }

    private void showDividendSummaryJDialog() {
        final MainFrame mainFrame = MainFrame.getInstance();
        DividendSummaryJDialog dividendSummaryJDialog = new DividendSummaryJDialog(mainFrame, true, this.getDividendSummary(), this);
        dividendSummaryJDialog.setLocationRelativeTo(this);

        List<Stock> stocks = this.getSelectedStocks();
        if (stocks.size() == 1) {
            dividendSummaryJDialog.addNewDividend(stocks.get(0));
        }
        dividendSummaryJDialog.setVisible(true);

        final DividendSummary _dividendSummary = dividendSummaryJDialog.getDividendSummary();
        if (_dividendSummary != null) {
            this.dividendSummary = _dividendSummary;
            updateWealthHeader();
        }
    }

    private void showDepositSummaryJDialog() {
        final MainFrame mainFrame = MainFrame.getInstance();
        DepositSummaryJDialog depositSummaryJDialog = new DepositSummaryJDialog(mainFrame, true, this.getDepositSummary());
        depositSummaryJDialog.setLocationRelativeTo(this);
        depositSummaryJDialog.setVisible(true);

        final DepositSummary _depositSummary = depositSummaryJDialog.getDepositSummary();
        if (_depositSummary != null) {
            this.depositSummary = _depositSummary;
            updateWealthHeader();
        }
    }
    
    private void showCommentJDialog(Commentable commentable, String title) {
        if (commentable == null) {
            // Nothing to be shown.
            return;
        }

        final MainFrame mainFrame = MainFrame.getInstance();
        CommentJDialog commentJDialog = new CommentJDialog(mainFrame, true, commentable);
        commentJDialog.setTitle(title);
        commentJDialog.setLocationRelativeTo(this);
        commentJDialog.setVisible(true);
    }

    /**
     * @return the depositSummary
     */
    public DepositSummary getDepositSummary() {
        return depositSummary;
    }

    /**
     * @return the dividendSummary
     */
    public DividendSummary getDividendSummary() {
        return dividendSummary;
    }

    private class TableKeyEventListener extends java.awt.event.KeyAdapter {
        @Override
        public void keyTyped(java.awt.event.KeyEvent e) {
            PortfolioManagementJPanel.this.clearTableSelection();
        }
    }

    private class BuyTableRowPopupListener extends MouseAdapter {
        
        @Override
        public void mouseClicked(MouseEvent evt) {
            if(evt.getClickCount() == 2) {
                final List<Transaction> transactions = getSelectedTransactions(buyTreeTable);
                if (transactions.size() == 1) {
                    PortfolioManagementJPanel.this.showEditTransactionJDialog(transactions.get(0));
                }
            }
        }
        
        @Override
        public void mousePressed(MouseEvent e) {
            maybeShowPopup(e);
        }

        @Override
        public void mouseReleased(MouseEvent e) {
            maybeShowPopup(e);
        }
        
        private void maybeShowPopup(MouseEvent e) {
            if (e.isPopupTrigger()) {
                getBuyTreeTablePopupMenu().show(e.getComponent(), e.getX(), e.getY());
            }
        }
    }

    private class SellTableRowPopupListener extends MouseAdapter {
        
        @Override
        public void mouseClicked(MouseEvent evt) {
            if(evt.getClickCount() == 2) {
                final List<Transaction> transactions = getSelectedTransactions(sellTreeTable);
                if (transactions.size() == 1) {
                    PortfolioManagementJPanel.this.showEditTransactionJDialog(transactions.get(0));
                }
            }
        }
        
        @Override
        public void mousePressed(MouseEvent e) {
            maybeShowPopup(e);
        }

        @Override
        public void mouseReleased(MouseEvent e) {
            maybeShowPopup(e);
        }
        
        private void maybeShowPopup(MouseEvent e) {
            if (e.isPopupTrigger()) {
                final JPopupMenu popupMenu = getSellTreeTablePopupMenu();
                if(popupMenu != null)
                    popupMenu.show(e.getComponent(), e.getX(), e.getY());
            }
        }
    }
    
    private ImageIcon getImageIcon(String imageIcon) {
        return new javax.swing.ImageIcon(getClass().getResource(imageIcon));
    }
    
    private void showBuyPortfolioChartJDialog() {
        final MainFrame m = MainFrame.getInstance();
        final BuyPortfolioTreeTableModel buyPortfolioTreeTableModel = (BuyPortfolioTreeTableModel)buyTreeTable.getTreeTableModel();
        BuyPortfolioChartJDialog buyPortfolioChartJDialog = new BuyPortfolioChartJDialog(m, false, buyPortfolioTreeTableModel, this.getDividendSummary());
        buyPortfolioChartJDialog.setVisible(true);                                    
    }

    private void showChashFlowChartJDialog() {
        final MainFrame m = MainFrame.getInstance();
        InvestmentFlowChartJDialog cashFlowChartJDialog = new InvestmentFlowChartJDialog(m, false, this);
        cashFlowChartJDialog.setVisible(true);
    }

    private void showSellPortfolioChartJDialog() {
        final MainFrame m = MainFrame.getInstance();
        final SellPortfolioTreeTableModel sellPortfolioTreeTableModel = (SellPortfolioTreeTableModel)sellTreeTable.getTreeTableModel();
        SellPortfolioChartJDialog sellPortfolioChartJDialog = new SellPortfolioChartJDialog(m, false, sellPortfolioTreeTableModel, this.getDividendSummary());
        sellPortfolioChartJDialog.setVisible(true);                                    
    }
    
    private JPopupMenu getSellTreeTablePopupMenu() {                
        final List<Transaction> transactions = getSelectedTransactions(this.sellTreeTable);

        JPopupMenu popup = new JPopupMenu();

        JMenuItem menuItem = null;

        menuItem = new JMenuItem("Deposit...", this.getImageIcon("/images/16x16/money.png"));

        menuItem.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                showDepositSummaryJDialog();
            }
        });

        popup.add(menuItem);

        menuItem = new JMenuItem("Dividend...", this.getImageIcon("/images/16x16/money2.png"));

        menuItem.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                showDividendSummaryJDialog();
            }
        });

        popup.add(menuItem);

        popup.addSeparator();
        
        if (transactions.size() == 1) {
            menuItem = new JMenuItem("Edit...", this.getImageIcon("/images/16x16/edit.png"));

            menuItem.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent evt) {
                    PortfolioManagementJPanel.this.showEditTransactionJDialog(transactions.get(0));
                }
            });            

            popup.add(menuItem);
        }

        final Commentable commentable = getSelectedCommentable(this.sellTreeTable);
        final String tmp = getSelectedFirstColumnString(this.sellTreeTable);
        if (commentable != null && tmp != null) {
            menuItem = new JMenuItem("Note...", this.getImageIcon("/images/16x16/sticky.png"));

            menuItem.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent evt) {
                    final String title = "Note for " + tmp;
                    PortfolioManagementJPanel.this.showCommentJDialog(commentable, title);
                }
            });

            popup.add(menuItem);

            popup.addSeparator();
        }
        else if (transactions.size() == 1) {
            popup.addSeparator();
        }

        menuItem = new JMenuItem("Investment Chart...", this.getImageIcon("/images/16x16/graph.png"));

        menuItem.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                showChashFlowChartJDialog();
            }
        });

        popup.add(menuItem);

        menuItem = new JMenuItem(GUIBundle.getString("PortfolioManagementJPanel_DividendChart"), this.getImageIcon("/images/16x16/chart.png"));

        menuItem.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                PortfolioManagementJPanel.this.showDividendSummaryBarChartJDialog();
            }
        });

        popup.add(menuItem);

        menuItem = new JMenuItem("Summary...", this.getImageIcon("/images/16x16/pie_chart.png"));
        
        menuItem.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                PortfolioManagementJPanel.this.showSellPortfolioChartJDialog();
            }
        });

        popup.add(menuItem);        
        
        if(isOnlyTreeTableRootBeingSelected(sellTreeTable) == false && (sellTreeTable.getSelectedRow() > 0)) {
            final MainFrame m = MainFrame.getInstance();
                                
            menuItem = new JMenuItem("History...", this.getImageIcon("/images/16x16/strokedocker.png"));

            menuItem.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent evt) {
                    List<Stock> stocks = getSelectedStocks(sellTreeTable);

                    for(Stock stock : stocks) {
                        m.displayHistoryChart(stock);
                    }
                }
            });
                        
            popup.add(menuItem);
            popup.addSeparator();
            
            menuItem = new JMenuItem("Delete", this.getImageIcon("/images/16x16/editdelete.png"));

            menuItem.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent evt) {
                    PortfolioManagementJPanel.this.deteleSelectedTreeTableRow();
                }
            });

            popup.add(menuItem);
        }
        
        return popup;
    }

    private void showDividendSummaryBarChartJDialog() {
        final MainFrame m = MainFrame.getInstance();
        final DividendSummaryBarChartJDialog dividendSummaryBarChartJDialog = new DividendSummaryBarChartJDialog(m, false, this.getDividendSummary());
        dividendSummaryBarChartJDialog.setVisible(true);
    }

    private JPopupMenu getBuyTreeTablePopupMenu() {                
        JPopupMenu popup = new JPopupMenu();

        JMenuItem menuItem = new JMenuItem("Buy...", this.getImageIcon("/images/16x16/inbox.png"));

        menuItem.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                List<Stock> stocks = getSelectedStocks();
                if (stocks.size() == 1) {
                    PortfolioManagementJPanel.this.showNewBuyTransactionJDialog(stocks.get(0), PortfolioManagementJPanel.this.getStockLastPrice(stocks.get(0)), true);
                }
                else {
                    PortfolioManagementJPanel.this.showNewBuyTransactionJDialog(Utils.getEmptyStock(Code.newInstance(""), Symbol.newInstance("")), 0.0, true);
                }
            }
        });

        popup.add(menuItem);

        final List<Transaction> transactions = getSelectedTransactions(this.buyTreeTable);
        final List<Stock> stocks = this.getSelectedStocks(this.buyTreeTable);

        if (transactions.size() > 0 && stocks.size() == 1) {
            menuItem = new JMenuItem("Sell...", this.getImageIcon("/images/16x16/outbox.png"));
            
            menuItem.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent evt) {
                    PortfolioManagementJPanel.this.showNewSellTransactionJDialog(transactions);
                }
            });            
            
            popup.add(menuItem);  
        }       

        popup.addSeparator();

        menuItem = new JMenuItem("Deposit...", this.getImageIcon("/images/16x16/money.png"));

        menuItem.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                showDepositSummaryJDialog();
            }
        });

        popup.add(menuItem);

        menuItem = new JMenuItem("Dividend...", this.getImageIcon("/images/16x16/money2.png"));

        menuItem.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                showDividendSummaryJDialog();
            }
        });

        popup.add(menuItem);

        popup.addSeparator();
                
        if (transactions.size() == 1) {
            menuItem = new JMenuItem("Edit...", this.getImageIcon("/images/16x16/edit.png"));
            
            menuItem.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent evt) {
                    PortfolioManagementJPanel.this.showEditTransactionJDialog(transactions.get(0));
                }
            });            
            
            popup.add(menuItem);
        }       

        final Commentable commentable = getSelectedCommentable(this.buyTreeTable);
        final String tmp = getSelectedFirstColumnString(this.buyTreeTable);
        if (commentable != null && tmp != null) {
            menuItem = new JMenuItem("Note...", this.getImageIcon("/images/16x16/sticky.png"));

            menuItem.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent evt) {
                    final String title = "Note for " + tmp;
                    PortfolioManagementJPanel.this.showCommentJDialog(commentable, title);
                }
            });

            popup.add(menuItem);

            popup.addSeparator();
        }
        else if (transactions.size() == 1) {
            popup.addSeparator();
        }

        menuItem = new JMenuItem("Investment Chart...", this.getImageIcon("/images/16x16/graph.png"));

        menuItem.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                showChashFlowChartJDialog();
            }
        });

        popup.add(menuItem);

        menuItem = new JMenuItem(GUIBundle.getString("PortfolioManagementJPanel_DividendChart"), this.getImageIcon("/images/16x16/chart.png"));

        menuItem.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                PortfolioManagementJPanel.this.showDividendSummaryBarChartJDialog();
            }
        });

        popup.add(menuItem);

        menuItem = new JMenuItem("Summary...", this.getImageIcon("/images/16x16/pie_chart.png"));
        
        menuItem.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                PortfolioManagementJPanel.this.showBuyPortfolioChartJDialog();
            }
        });

        popup.add(menuItem);                
        
        if(isOnlyTreeTableRootBeingSelected(buyTreeTable) == false && (buyTreeTable.getSelectedRow() > 0)) {
            //popup.addSeparator();
            
            final MainFrame m = MainFrame.getInstance();
                                
            menuItem = new JMenuItem("History...", this.getImageIcon("/images/16x16/strokedocker.png"));

            menuItem.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent evt) {
                    List<Stock> stocks = getSelectedStocks(buyTreeTable);

                    for(Stock stock : stocks) {
                        m.displayHistoryChart(stock);
                    }
                }
            });
                        
            popup.add(menuItem);
            popup.addSeparator();
            
            menuItem = new JMenuItem("Delete", this.getImageIcon("/images/16x16/editdelete.png"));

            menuItem.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent evt) {
                    PortfolioManagementJPanel.this.deteleSelectedTreeTableRow();
                }
            });

            popup.add(menuItem);
        }
        
        return popup;
    }

    private void editSellTransaction(Transaction newTransaction, Transaction oldTransaction) {
        assert(newTransaction.getContract().getType() == Contract.Type.Sell);
        assert(oldTransaction.getContract().getType() == Contract.Type.Sell);
        
        final SellPortfolioTreeTableModel portfolioTreeTableModel = (SellPortfolioTreeTableModel)sellTreeTable.getTreeTableModel();
        portfolioTreeTableModel.editTransaction(newTransaction, oldTransaction);        
    }
    
    private void editBuyTransaction(Transaction newTransaction, Transaction oldTransaction) {
        assert(newTransaction.getContract().getType() == Contract.Type.Buy);
        assert(oldTransaction.getContract().getType() == Contract.Type.Buy);
        
        final BuyPortfolioTreeTableModel portfolioTreeTableModel = (BuyPortfolioTreeTableModel)buyTreeTable.getTreeTableModel();
        portfolioTreeTableModel.editTransaction(newTransaction, oldTransaction);        
    }

    private int getBuyTransactionSize() {
        final BuyPortfolioTreeTableModel portfolioTreeTableModel = (BuyPortfolioTreeTableModel)buyTreeTable.getTreeTableModel();
        return portfolioTreeTableModel.getTransactionSize();
    }

    private int getSellTransactionSize() {
        final SellPortfolioTreeTableModel portfolioTreeTableModel = (SellPortfolioTreeTableModel)sellTreeTable.getTreeTableModel();
        return portfolioTreeTableModel.getTransactionSize();
    }

    private void addBuyTransaction(Transaction transaction) {
        assert(transaction.getContract().getType() == Contract.Type.Buy);
        
        final BuyPortfolioTreeTableModel portfolioTreeTableModel = (BuyPortfolioTreeTableModel)buyTreeTable.getTreeTableModel();
        portfolioTreeTableModel.addTransaction(transaction);
        this.realTimeStockMonitor.addStockCode(transaction.getContract().getStock().getCode());
    }

    public List<TransactionSummary> getTransactionSummariesFromPortfolios() {
        final BuyPortfolioTreeTableModel buyPortfolioTreeTableModel = (BuyPortfolioTreeTableModel)buyTreeTable.getTreeTableModel();
        final SellPortfolioTreeTableModel sellPortfolioTreeTableModel = (SellPortfolioTreeTableModel)sellTreeTable.getTreeTableModel();
        final Portfolio buyPortfolio = (Portfolio) buyPortfolioTreeTableModel.getRoot();
        final Portfolio sellPortfolio = (Portfolio) sellPortfolioTreeTableModel.getRoot();
        List<TransactionSummary> summaries = new ArrayList<TransactionSummary>();

        for (int i = 0, count = buyPortfolio.getChildCount(); i < count; i++) {
            summaries.add((TransactionSummary)buyPortfolio.getChildAt(i));
        }
        
        for (int i = 0, count = sellPortfolio.getChildCount(); i < count; i++) {
            summaries.add((TransactionSummary)sellPortfolio.getChildAt(i));
        }

        return summaries;
    }

    public List<Stock> getStocksFromPortfolios() {
        final BuyPortfolioTreeTableModel buyPortfolioTreeTableModel = (BuyPortfolioTreeTableModel)buyTreeTable.getTreeTableModel();
        final SellPortfolioTreeTableModel sellPortfolioTreeTableModel = (SellPortfolioTreeTableModel)sellTreeTable.getTreeTableModel();
        final Portfolio buyPortfolio = (Portfolio) buyPortfolioTreeTableModel.getRoot();
        final Portfolio sellPortfolio = (Portfolio) sellPortfolioTreeTableModel.getRoot();

        List<Code> codes = new ArrayList<Code>();
        List<Stock> stocks = new ArrayList<Stock>();

        final int count = buyPortfolio.getChildCount();
        TransactionSummary transactionSummary = null;
        for (int i = 0; i < count; i++) {
            transactionSummary = (TransactionSummary)buyPortfolio.getChildAt(i);

            assert(transactionSummary.getChildCount() > 0);

            Transaction transaction = (Transaction)transactionSummary.getChildAt(0);

            Stock stock = transaction.getContract().getStock();

            if (codes.contains(stock.getCode()) == false) {
                codes.add(stock.getCode());
                stocks.add(stock);
            }
        }

        final int count2 = sellPortfolio.getChildCount();
        transactionSummary = null;
        for (int i = 0; i < count2; i++) {
            transactionSummary = (TransactionSummary)sellPortfolio.getChildAt(i);

            assert(transactionSummary.getChildCount() > 0);

            Transaction transaction = (Transaction)transactionSummary.getChildAt(0);

            Stock stock = transaction.getContract().getStock();

            if (codes.contains(stock.getCode()) == false) {
                codes.add(stock.getCode());
                stocks.add(stock);
            }
        }

        return stocks;
    }

    private void addSellTransaction(Transaction transaction) {
        assert(transaction.getContract().getType() == Contract.Type.Sell);
        
        final SellPortfolioTreeTableModel portfolioTreeTableModel = (SellPortfolioTreeTableModel)sellTreeTable.getTreeTableModel();
        portfolioTreeTableModel.addTransaction(transaction);
    }
    
    private void updateRealTimeStockMonitorAccordingToBuyPortfolioTreeTableModel() {
        if (this.realTimeStockMonitor == null) {
            return;
        }
        
        final BuyPortfolioTreeTableModel portfolioTreeTableModel = (BuyPortfolioTreeTableModel)buyTreeTable.getTreeTableModel();
                
        if (portfolioTreeTableModel != null) {
            this.buyTreeTable.setTreeTableModel(portfolioTreeTableModel);
            
            Portfolio portfolio = (Portfolio)portfolioTreeTableModel.getRoot();
            final int count = portfolio.getChildCount();
            
            for(int i=0; i<count; i++) {
                TransactionSummary transactionSummary = (TransactionSummary)portfolio.getChildAt(i);
                
                if(transactionSummary.getChildCount() <= 0) continue;
                
                final Transaction transaction = (Transaction)transactionSummary.getChildAt(0);

                this.realTimeStockMonitor.addStockCode(transaction.getContract().getStock().getCode());
            }
        }
        
    }
    
    private List<Stock> getSelectedStocks(JXTreeTable treeTable) {
        final TreePath[] treePaths = treeTable.getTreeSelectionModel().getSelectionPaths();
        List<Stock> stocks = new ArrayList<Stock>();
        Set<Code> c = new HashSet<Code>();
        
        if(treePaths == null) {
            return Collections.unmodifiableList(stocks);
        }
        
        for(TreePath treePath : treePaths) {
            final Object lastPathComponent = treePath.getLastPathComponent();
            
            if (lastPathComponent instanceof TransactionSummary) {
                final TransactionSummary transactionSummary = (TransactionSummary)lastPathComponent;
                assert(transactionSummary.getChildCount() > 0);
                final Transaction transaction = (Transaction)transactionSummary.getChildAt(0);
                final Stock stock = transaction.getContract().getStock();
                final Code code = stock.getCode();
                
                if(c.contains(code)) continue;
                
                stocks.add(stock);
                c.add(code);
            }
            else if (lastPathComponent instanceof Transaction) {
                final Transaction transaction = (Transaction)lastPathComponent;
                final Stock stock = transaction.getContract().getStock();
                final Code code = stock.getCode();
                
                if(c.contains(code)) continue;
                
                stocks.add(stock);
                c.add(code);
            }                        
        }
        
        return Collections.unmodifiableList(stocks);
    }
    
    public void initPortfolio() {
        final JStockOptions jStockOptions = MainFrame.getInstance().getJStockOptions();

        final Country country = jStockOptions.getCountry();

        // First, we need to determine what portfolio names are there for
        // this country.
        final List<String> availablePortfolioNames = org.yccheok.jstock.portfolio.Utils.getPortfolioNames();
        final boolean oldData;
        if (availablePortfolioNames.size() <= 0) {
            // This is a fresh country selection without any portfolio.
            // If we are switching from a country with portfolio, to another
            // country without portfolio, the previous portfolio name will be
            // carried over. By following Principle of least suprise, portfolio
            // name will be reset to default.
            jStockOptions.setPortfolioName(org.yccheok.jstock.portfolio.Utils.getDefaultPortfolioName());
            oldData = true;
        }
        else {
            // Is user selected portfolio name within current available portfolio names?
            if (false == availablePortfolioNames.contains(jStockOptions.getPortfolioName())) {
                // Nope. Reset user selected portfolio name to the first available name.
                jStockOptions.setPortfolioName(availablePortfolioNames.get(0));
            }
            oldData = false;
        }

        final File buyPortfolioFile;
        final File sellPortfolioFile;
        final File depositSummaryFile;
        final File dividendSummaryFile;

        // Determine the files to be loaded from disc.
        if (oldData) {
            buyPortfolioFile = new File(org.yccheok.jstock.gui.Utils.getUserDataDirectory() + country + File.separator + "config" + File.separator + "buyportfolio.xml");
            sellPortfolioFile = new File(org.yccheok.jstock.gui.Utils.getUserDataDirectory() + country + File.separator + "config" + File.separator + "sellportfolio.xml");
            depositSummaryFile = new File(org.yccheok.jstock.gui.Utils.getUserDataDirectory() + country + File.separator + "config" + File.separator + "depositsummary.xml");
            dividendSummaryFile = new File(org.yccheok.jstock.gui.Utils.getUserDataDirectory() + country + File.separator + "config" + File.separator + "dividendsummary.xml");
        }
        else {
            buyPortfolioFile = new File(org.yccheok.jstock.portfolio.Utils.getPortfolioDirectory() + "buyportfolio.xml");
            sellPortfolioFile = new File(org.yccheok.jstock.portfolio.Utils.getPortfolioDirectory() + "sellportfolio.xml");
            depositSummaryFile = new File(org.yccheok.jstock.portfolio.Utils.getPortfolioDirectory() + "depositsummary.xml");
            dividendSummaryFile = new File(org.yccheok.jstock.portfolio.Utils.getPortfolioDirectory() + "dividendsummary.xml");
        }

        // Try to load files from disc.
        BuyPortfolioTreeTableModel buyPortfolioTreeTableModel = Utils.fromXML(BuyPortfolioTreeTableModel.class, buyPortfolioFile);
        SellPortfolioTreeTableModel sellPortfolioTreeTableModel = Utils.fromXML(SellPortfolioTreeTableModel.class, sellPortfolioFile);
        DepositSummary _depositSummary = Utils.fromXML(DepositSummary.class, depositSummaryFile);
        DividendSummary _dividendSummary = Utils.fromXML(DividendSummary.class, dividendSummaryFile);

        // Is XML files reading success? If not, initialize data structure with
        // empty data.
        if (buyPortfolioTreeTableModel == null) {
            buyPortfolioTreeTableModel = new BuyPortfolioTreeTableModel();
        }
        if (sellPortfolioTreeTableModel == null) {
            sellPortfolioTreeTableModel = new SellPortfolioTreeTableModel();
        }
        if (_depositSummary == null) {
            _depositSummary = new DepositSummary();
        }
        if (_dividendSummary == null) {
            _dividendSummary = new DividendSummary();
        }

        // Update GUI. Shall we?
        if (SwingUtilities.isEventDispatchThread()) {
            PortfolioManagementJPanel.this.buyTreeTable.setTreeTableModel(buyPortfolioTreeTableModel);
            PortfolioManagementJPanel.this.sellTreeTable.setTreeTableModel(sellPortfolioTreeTableModel);
            PortfolioManagementJPanel.this.depositSummary = _depositSummary;
            PortfolioManagementJPanel.this.dividendSummary = _dividendSummary;
            // We need to have a hack way, to have "Comment" in the model, but not visible to user.
            // So that our ToolTipHighlighter can work correctly.
            // setVisible should be called after JXTreeTable has been constructed. This is to avoid
            // initGUIOptions from calling JTable.removeColumn
            // ToolTipHighlighter will not work correctly if we tend to hide column view by removeColumn.
            // We need to hide the view by using TableColumnExt.setVisible.
            // Why? Don't ask me. Ask SwingX team.
            ((TableColumnExt)PortfolioManagementJPanel.this.buyTreeTable.getColumn("Comment")).setVisible(false);
            ((TableColumnExt)PortfolioManagementJPanel.this.sellTreeTable.getColumn("Comment")).setVisible(false);

            // New directory creation is needed, as we had moved the directory of portolio.
            if (oldData) {
                if (PortfolioManagementJPanel.this.savePortfolio()) {
                    // OK. We have the saved portfolio in new directory structure.
                    // Let's remove all the files from old directory structure.
                    buyPortfolioFile.delete();
                    sellPortfolioFile.delete();
                    depositSummaryFile.delete();
                    dividendSummaryFile.delete();
                    final File config_directory = new File(org.yccheok.jstock.gui.Utils.getUserDataDirectory() + country + File.separator + "config");
                    if (config_directory.list().length <= 0) {
                        // Empty directory. Remove it.
                        config_directory.delete();
                    }
                }
            }

            PortfolioManagementJPanel.this.updateRealTimeStockMonitorAccordingToBuyPortfolioTreeTableModel();

            PortfolioManagementJPanel.this.updateWealthHeader();

            // Give user preferred GUI look. We do it here, because the entire table model is being changed.
            PortfolioManagementJPanel.this.initGUIOptions();
        }
        else {
            final BuyPortfolioTreeTableModel tmp0 = buyPortfolioTreeTableModel;
            final SellPortfolioTreeTableModel tmp1 = sellPortfolioTreeTableModel;
            final DepositSummary tmp2 = _depositSummary;
            final DividendSummary tmp3 = _dividendSummary;

            SwingUtilities.invokeLater(new Runnable() {
                @Override
                public void run() {
                    PortfolioManagementJPanel.this.buyTreeTable.setTreeTableModel(tmp0);
                    PortfolioManagementJPanel.this.sellTreeTable.setTreeTableModel(tmp1);
                    PortfolioManagementJPanel.this.depositSummary = tmp2;
                    PortfolioManagementJPanel.this.dividendSummary = tmp3;
                    // We need to have a hack way, to have "Comment" in the model, but not visible to user.
                    // So that our ToolTipHighlighter can work correctly.
                    // setVisible should be called after JXTreeTable has been constructed. This is to avoid
                    // initGUIOptions from calling JTable.removeColumn
                    // ToolTipHighlighter will not work correctly if we tend to hide column view by removeColumn.
                    // We need to hide the view by using TableColumnExt.setVisible.
                    // Why? Don't ask me. Ask SwingX team.
                    ((TableColumnExt)PortfolioManagementJPanel.this.buyTreeTable.getColumn("Comment")).setVisible(false);
                    ((TableColumnExt)PortfolioManagementJPanel.this.sellTreeTable.getColumn("Comment")).setVisible(false);

                    // New directory creation is needed, as we had moved the directory of portolio.
                    if (oldData) {
                        if (PortfolioManagementJPanel.this.savePortfolio()) {
                            // OK. We have the saved portfolio in new directory structure.
                            // Let's remove all the files from old directory structure.
                            buyPortfolioFile.delete();
                            sellPortfolioFile.delete();
                            depositSummaryFile.delete();
                            dividendSummaryFile.delete();
                            final File config_directory = new File(org.yccheok.jstock.gui.Utils.getUserDataDirectory() + country + File.separator + "config");
                            if (config_directory.list().length <= 0) {
                                // Empty directory. Remove it.
                                config_directory.delete();
                            }
                        }
                    }

                    PortfolioManagementJPanel.this.updateRealTimeStockMonitorAccordingToBuyPortfolioTreeTableModel();

                    PortfolioManagementJPanel.this.updateWealthHeader();

                    // Give user preferred GUI look. We do it here, because the entire table model is being changed.
                    PortfolioManagementJPanel.this.initGUIOptions();
                }
            });
        }
    }
   
    public boolean savePortfolio() {
        if (Utils.createCompleteDirectoryHierarchyIfDoesNotExist(org.yccheok.jstock.portfolio.Utils.getPortfolioDirectory()) == false)
        {
            return false;
        }        
        
        boolean status = true;

        String filePath = org.yccheok.jstock.portfolio.Utils.getPortfolioDirectory() + "buyportfolio.xml";
        final BuyPortfolioTreeTableModel buyPortfolioTreeTableModel = (BuyPortfolioTreeTableModel)buyTreeTable.getTreeTableModel();
        if (org.yccheok.jstock.gui.Utils.toXML(buyPortfolioTreeTableModel, filePath) == false) {
            status = false;
        }

        filePath = org.yccheok.jstock.portfolio.Utils.getPortfolioDirectory() + "sellportfolio.xml";
        final SellPortfolioTreeTableModel sellPortfolioTreeTableModel = (SellPortfolioTreeTableModel)sellTreeTable.getTreeTableModel();
        if (org.yccheok.jstock.gui.Utils.toXML(sellPortfolioTreeTableModel, filePath) == false) {
            status = false;
        }

        filePath = org.yccheok.jstock.portfolio.Utils.getPortfolioDirectory() + "depositsummary.xml";
        if (org.yccheok.jstock.gui.Utils.toXML(this.getDepositSummary(), filePath) == false) {
            status = false;
        }

        filePath = org.yccheok.jstock.portfolio.Utils.getPortfolioDirectory() + "dividendsummary.xml";
        if (org.yccheok.jstock.gui.Utils.toXML(this.getDividendSummary(), filePath) == false) {
            status = false;
        }

        return status;
    }

    public void updatePrimaryStockServerFactory(java.util.List<StockServerFactory> stockServerFactories) {
        if (realTimeStockMonitor != null) {
            realTimeStockMonitor.setStockServerFactories(stockServerFactories);
        }
    }

    public void initRealTimeStockMonitor(java.util.List<StockServerFactory> stockServerFactories) {
        if (realTimeStockMonitor != null) {
            final RealTimeStockMonitor oldRealTimeStockMonitor = realTimeStockMonitor;
            Utils.getZoombiePool().execute(new Runnable() {
                @Override
                public void run() {
                    log.info("Prepare to shut down " + oldRealTimeStockMonitor + "...");
                    oldRealTimeStockMonitor.clearStockCodes();
                    oldRealTimeStockMonitor.dettachAll();
                    oldRealTimeStockMonitor.stop();
                    log.info("Shut down " + oldRealTimeStockMonitor + " peacefully.");
                }
            });
        }
        
        realTimeStockMonitor = new RealTimeStockMonitor(4, 20, MainFrame.getInstance().getJStockOptions().getScanningSpeed());
        realTimeStockMonitor.setStockServerFactories(stockServerFactories);
        
        realTimeStockMonitor.attach(this.realTimeStockMonitorObserver);
        
        updateRealTimeStockMonitorAccordingToBuyPortfolioTreeTableModel();
    }
    
    // This is the workaround to overcome Erasure by generics. We are unable to make MainFrame to
    // two observers at the same time.
    private org.yccheok.jstock.engine.Observer<RealTimeStockMonitor, java.util.List<Stock>> getRealTimeStockMonitorObserver() {
        return new org.yccheok.jstock.engine.Observer<RealTimeStockMonitor, java.util.List<Stock>>() {
            @Override
            public void update(RealTimeStockMonitor monitor, java.util.List<Stock> stocks)
            {
                PortfolioManagementJPanel.this.update(monitor, stocks);
            }
        };
    }
    
    public void update(RealTimeStockMonitor monitor, final java.util.List<Stock> stocks) {
        final BuyPortfolioTreeTableModel portfolioTreeTableModel = (BuyPortfolioTreeTableModel)buyTreeTable.getTreeTableModel();
 
        for (Stock stock : stocks) {
            if (false == portfolioTreeTableModel.updateStockLastPrice(stock)) {
                this.realTimeStockMonitor.removeStockCode(stock.getCode());
            }
        }  
        
        updateWealthHeader();
    }  

    private void initGUIOptions() {
        File f = new File(org.yccheok.jstock.gui.Utils.getUserDataDirectory() + "config" + File.separator + "portfoliomanagementjpanel.xml");
        GUIOptions guiOptions = Utils.fromXML(GUIOptions.class, f);

        if (guiOptions == null)
        {
            return;
        }

        if (guiOptions.getJTableOptionsSize() <= 1)
        {
            return;
        }

        final org.jdesktop.swingx.JXTreeTable[] treeTables = {buyTreeTable, sellTreeTable};

        /* Set Table Settings */
        for (int tableIndex = 0; tableIndex < treeTables.length; tableIndex++) {
            final JXTreeTable treeTable = treeTables[tableIndex];
            final javax.swing.table.JTableHeader jTableHeader = treeTable.getTableHeader();
            final JTable jTable = jTableHeader.getTable();
            JTableUtilities.setJTableOptions(jTable, guiOptions.getJTableOptions(tableIndex));
        }
    }

    public boolean saveGUIOptions() {
        if (Utils.createCompleteDirectoryHierarchyIfDoesNotExist(org.yccheok.jstock.gui.Utils.getUserDataDirectory() + "config") == false)
        {
            return false;
        }

        final GUIOptions guiOptions = new GUIOptions();

        final org.jdesktop.swingx.JXTreeTable[] treeTables = {buyTreeTable, sellTreeTable};

        for (org.jdesktop.swingx.JXTreeTable treeTable : treeTables)
        {
            final javax.swing.table.JTableHeader jTableHeader = treeTable.getTableHeader();
            final JTable jTable = jTableHeader.getTable();
            final GUIOptions.JTableOptions jTableOptions = new GUIOptions.JTableOptions();
            
            final int count = jTable.getColumnCount();
            for (int i = 0; i < count; i++) {
                final String name = jTable.getColumnName(i);
                final TableColumn column = jTable.getColumnModel().getColumn(i);
                jTableOptions.addColumnOption(GUIOptions.JTableOptions.ColumnOption.newInstance(name, column.getWidth()));
            }

            guiOptions.addJTableOptions(jTableOptions);
        }

        File f = new File(org.yccheok.jstock.gui.Utils.getUserDataDirectory() + "config" + File.separator + "portfoliomanagementjpanel.xml");
        return org.yccheok.jstock.gui.Utils.toXML(guiOptions, f);
    }

    public boolean saveAsExcelFile(File file) {
        org.yccheok.jstock.file.Statements.StatementsEx statementsEx0, statementsEx1, statementsEx2, statementsEx3;
        statementsEx0 = new org.yccheok.jstock.file.Statements.StatementsEx(org.yccheok.jstock.file.Statements.newInstanceFromAbstractPortfolioTreeTableModel((BuyPortfolioTreeTableModel)this.buyTreeTable.getTreeTableModel()), GUIBundle.getString("PortfolioManagementJPanel_BuyPortfolio"));
        statementsEx1 = new org.yccheok.jstock.file.Statements.StatementsEx(org.yccheok.jstock.file.Statements.newInstanceFromAbstractPortfolioTreeTableModel((SellPortfolioTreeTableModel)this.sellTreeTable.getTreeTableModel()), GUIBundle.getString("PortfolioManagementJPanel_SellPortfolio"));
        statementsEx2 = new org.yccheok.jstock.file.Statements.StatementsEx(org.yccheok.jstock.file.Statements.newInstanceFromTableModel(new DividendSummaryTableModel(this.dividendSummary)), GUIBundle.getString("PortfolioManagementJPanel_DividendPortfolio"));
        statementsEx3 = new org.yccheok.jstock.file.Statements.StatementsEx(org.yccheok.jstock.file.Statements.newInstanceFromTableModel(new DepositSummaryTableModel(this.depositSummary)), GUIBundle.getString("PortfolioManagementJPanel_CashDepositPortfolio"));
        List<org.yccheok.jstock.file.Statements.StatementsEx> statementsExs = Arrays.asList(statementsEx0, statementsEx1, statementsEx2, statementsEx3);
        return Statements.saveAsExcelFile(file, statementsExs);
    }

    public boolean saveAsCSVFile(Utils.FileEx fileEx) {
        org.yccheok.jstock.file.Statements statements = null;
        if (fileEx.type == org.yccheok.jstock.file.Statement.Type.PortfolioManagementBuy) {
            statements = org.yccheok.jstock.file.Statements.newInstanceFromAbstractPortfolioTreeTableModel((BuyPortfolioTreeTableModel)this.buyTreeTable.getTreeTableModel());
        }
        else if (fileEx.type == org.yccheok.jstock.file.Statement.Type.PortfolioManagementSell) {
            statements = org.yccheok.jstock.file.Statements.newInstanceFromAbstractPortfolioTreeTableModel((SellPortfolioTreeTableModel)this.sellTreeTable.getTreeTableModel());
        }
        else if (fileEx.type == org.yccheok.jstock.file.Statement.Type.PortfolioManagementDividend) {
            statements = org.yccheok.jstock.file.Statements.newInstanceFromTableModel(new DividendSummaryTableModel(this.dividendSummary));
        }
        else if (fileEx.type == org.yccheok.jstock.file.Statement.Type.PortfolioManagementDeposit) {
            statements = org.yccheok.jstock.file.Statements.newInstanceFromTableModel(new DepositSummaryTableModel(this.depositSummary));
        }
        if (statements == null) {
            return false;
        }
        return statements.saveAsCSVFile(fileEx.file);
    }

    private void updateWealthHeader() {
        final BuyPortfolioTreeTableModel buyPortfolioTreeTableModel = (BuyPortfolioTreeTableModel)this.buyTreeTable.getTreeTableModel();
        final SellPortfolioTreeTableModel sellPortfolioTreeTableModel = (SellPortfolioTreeTableModel)this.sellTreeTable.getTreeTableModel();
        
        final double share;
        final double cash;
        final double paperProfit;
        final double realizedProfit;
        if (false == MainFrame.getInstance().getJStockOptions().isPenceToPoundConversionEnabled()) {
            share = buyPortfolioTreeTableModel.getCurrentValue();
            cash = sellPortfolioTreeTableModel.getNetSellingValue() - ((Portfolio)sellPortfolioTreeTableModel.getRoot()).getReferenceTotal() - buyPortfolioTreeTableModel.getNetPurchaseValue() + this.getDepositSummary().getTotal() + this.getDividendSummary().getTotal();
            paperProfit = buyPortfolioTreeTableModel.getNetGainLossValue();
            realizedProfit = sellPortfolioTreeTableModel.getNetGainLossValue();
        }
        else {
            share = buyPortfolioTreeTableModel.getCurrentValue() / 100.0;
            cash = sellPortfolioTreeTableModel.getNetSellingValue() / 100.0 - ((Portfolio)sellPortfolioTreeTableModel.getRoot()).getReferenceTotal() / 100.0 - buyPortfolioTreeTableModel.getNetPurchaseValue() / 100.0 + this.getDepositSummary().getTotal() + this.getDividendSummary().getTotal();
            paperProfit = buyPortfolioTreeTableModel.getNetGainLossValue() / 100.0;
            realizedProfit = sellPortfolioTreeTableModel.getNetGainLossValue() / 100.0;
        }

        final double paperProfitPercentage = buyPortfolioTreeTableModel.getNetGainLossPercentage();
        
        final double realizedProfitPercentage = sellPortfolioTreeTableModel.getNetGainLossPercentage();
        
        final java.text.NumberFormat numberFormat = java.text.NumberFormat.getInstance();
        if (false == MainFrame.getInstance().getJStockOptions().isPenceToPoundConversionEnabled()) {
            numberFormat.setMaximumFractionDigits(2);
            numberFormat.setMinimumFractionDigits(2);
        }
        else {
            numberFormat.setMaximumFractionDigits(4);
            numberFormat.setMinimumFractionDigits(4);
        }

        final String _share = numberFormat.format(share);
        final String _cash = numberFormat.format(cash);
        final String _paperProfit = numberFormat.format(paperProfit);
        final String _paperProfitPercentage = numberFormat.format(paperProfitPercentage);
        final String _realizedProfit = numberFormat.format(realizedProfit);
        final String _realizedProfitPercentage = numberFormat.format(realizedProfitPercentage);
        
        javax.swing.SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                jLabel2.setText(_share);
                jLabel4.setText(_cash);
                jLabel6.setText(_paperProfit + " (" + _paperProfitPercentage + "%)");
                jLabel8.setText(_realizedProfit + " (" + _realizedProfitPercentage + "%)");
                jLabel2.setForeground(Utils.getColor(share, 0.0));
                jLabel4.setForeground(Utils.getColor(cash, 0.0));
                jLabel6.setForeground(Utils.getColor(paperProfit, 0.0));
                jLabel8.setForeground(Utils.getColor(realizedProfit, 0.0));
           }
        });
    }
    
    public void softStart() {
        if(realTimeStockMonitor == null) return;
                
        realTimeStockMonitor.softStart();
    }
    
    public void softStop() {
        if (realTimeStockMonitor == null) {
            return;
        }        
        realTimeStockMonitor.softStop();
    }

    private String getShareLabel() {
        return MessageFormat.format(
            GUIBundle.getString("PortfolioManagementJPanel_ShareLabel"),
            /*java.util.Currency.getInstance(Locale.getDefault()).getSymbol()*/"$"
        );
    }
    
    private String getCashLabel() {
        return MessageFormat.format(
            GUIBundle.getString("PortfolioManagementJPanel_CashLabel"),
            /*java.util.Currency.getInstance(Locale.getDefault()).getSymbol()*/"$"
        );
    }
    
    private String getPaperProfitLabel() {
        return MessageFormat.format(
            GUIBundle.getString("PortfolioManagementJPanel_PaperProfitLabel"),
            /*java.util.Currency.getInstance(Locale.getDefault()).getSymbol()*/"$"
        );
    }
    
    private String getRealizedProfitLabel() {
        return MessageFormat.format(
            GUIBundle.getString("PortfolioManagementJPanel_RealizedProfitLabel"),
            /*java.util.Currency.getInstance(Locale.getDefault()).getSymbol()*/"$"
        );
    }

    private static final Log log = LogFactory.getLog(PortfolioManagementJPanel.class);

    // Data structure.
    private DepositSummary depositSummary = new DepositSummary();
    private DividendSummary dividendSummary = new DividendSummary();

    private RealTimeStockMonitor realTimeStockMonitor = null;
    private org.yccheok.jstock.engine.Observer<RealTimeStockMonitor, java.util.List<Stock>> realTimeStockMonitorObserver = this.getRealTimeStockMonitorObserver();

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.jdesktop.swingx.JXTreeTable buyTreeTable;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSplitPane jSplitPane1;
    private org.jdesktop.swingx.JXTreeTable sellTreeTable;
    // End of variables declaration//GEN-END:variables

}
