/*
 * PortfoliioJPanel.java
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 *
 * Copyright (C) 2008 Cheok YanCheng <yccheok@yahoo.com>
 */

package org.yccheok.jstock.gui;

import com.thoughtworks.xstream.XStream;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.swing.ImageIcon;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;

import javax.swing.JTable;
import javax.swing.tree.TreePath;
import org.apache.commons.logging.*;
import org.jdesktop.swingx.JXTreeTable;
import org.yccheok.jstock.portfolio.*;
import org.yccheok.jstock.engine.*;
import org.jdesktop.swingx.treetable.*;

/**
 *
 * @author  Owner
 */
public class PortfolioManagementJPanel extends javax.swing.JPanel {
    
    /** Creates new form PortfoliioJPanel */
    public PortfolioManagementJPanel() {
        initComponents();        
        
        this.initPortfolio();
        this.initGUIOptions();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jSplitPane1 = new javax.swing.JSplitPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        buyTreeTable = new org.jdesktop.swingx.JXTreeTable(new BuyPortfolioTreeTableModel());
        jScrollPane2 = new javax.swing.JScrollPane();
        sellTreeTable = new org.jdesktop.swingx.JXTreeTable(new SellPortfolioTreeTableModel());
        jPanel2 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });
        setLayout(new java.awt.BorderLayout());

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Portfolio Management"));
        jPanel1.setLayout(new java.awt.BorderLayout(0, 5));

        jPanel4.setLayout(new java.awt.BorderLayout());

        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jLabel1.setText("Share ($): ");
        jPanel3.add(jLabel1);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11));
        jPanel3.add(jLabel2);

        jLabel3.setText("Cash ($): ");
        jPanel3.add(jLabel3);

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11));
        jPanel3.add(jLabel4);

        jPanel4.add(jPanel3, java.awt.BorderLayout.WEST);

        jLabel5.setText("Paper Profit ($): ");
        jPanel5.add(jLabel5);

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 11));
        jPanel5.add(jLabel6);

        jLabel7.setText("Realized Profit ($): ");
        jPanel5.add(jLabel7);

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 11));
        jPanel5.add(jLabel8);

        jPanel4.add(jPanel5, java.awt.BorderLayout.EAST);

        jPanel1.add(jPanel4, java.awt.BorderLayout.NORTH);

        jSplitPane1.setDividerLocation(250);
        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        jScrollPane1.setBorder(javax.swing.BorderFactory.createTitledBorder("Buy"));

        buyTreeTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        buyTreeTable.setRootVisible(true);
        buyTreeTable.getTableHeader().addMouseListener(new TableColumnSelectionPopupListener(1));
        buyTreeTable.addMouseListener(new BuyTableRowPopupListener());
        buyTreeTable.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                buyTreeTableValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(buyTreeTable);

        jSplitPane1.setLeftComponent(jScrollPane1);

        jScrollPane2.setBorder(javax.swing.BorderFactory.createTitledBorder("Sell"));

        sellTreeTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        sellTreeTable.setRootVisible(true);
        sellTreeTable.getTableHeader().addMouseListener(new TableColumnSelectionPopupListener(1));
        sellTreeTable.addMouseListener(new SellTableRowPopupListener());
        sellTreeTable.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                sellTreeTableValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(sellTreeTable);

        jSplitPane1.setRightComponent(jScrollPane2);

        jPanel1.add(jSplitPane1, java.awt.BorderLayout.CENTER);

        add(jPanel1, java.awt.BorderLayout.CENTER);

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/16x16/inbox.png"))); // NOI18N
        jButton1.setText("Buy...");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton1);

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/16x16/outbox.png"))); // NOI18N
        jButton3.setText("Sell...");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton3);

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/16x16/editdelete.png"))); // NOI18N
        jButton2.setText("Delete");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton2);

        add(jPanel2, java.awt.BorderLayout.SOUTH);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        this.showNewBuyTransactionJDialog(getSelectedStockSymbolForNewTransactionJDialog(), getSelectedStockLastPriceForNewTransactionJDialog(), true);
    }//GEN-LAST:event_jButton1ActionPerformed
    
    private boolean isValidTreeTableNode(TreeTableModel treeTableModel, Object node) {
        boolean result = false;
        
        final Object root = treeTableModel.getRoot();
        
        if (node instanceof TreeTableNode) {
            TreeTableNode ttn = (TreeTableNode) node;

            while (!result && ttn != null) {
                result = ttn == root;

                ttn = ttn.getParent();
            }
        }

        return result;
    }
    
    private Symbol getSelectedStockSymbolForNewTransactionJDialog() {
        final TreePath[] treePaths = buyTreeTable.getTreeSelectionModel().getSelectionPaths();

        if(treePaths == null) return Symbol.newInstance("");
        
        if(treePaths.length == 1) {
            if(treePaths[0].getLastPathComponent() instanceof TransactionSummary) {
                final TransactionSummary transactionSummary = (TransactionSummary)treePaths[0].getLastPathComponent();
                assert(transactionSummary.getChildCount() > 0);
                final Transaction transaction = (Transaction)transactionSummary.getChildAt(0);
                return transaction.getContract().getStock().getSymbol();
                
            }
            else if(treePaths[0].getLastPathComponent() instanceof Transaction) {
                final Transaction transaction = (Transaction)treePaths[0].getLastPathComponent();
                return transaction.getContract().getStock().getSymbol();
            }
        }        
        
        return Symbol.newInstance("");
    }
    
    private double getSelectedStockLastPriceForNewTransactionJDialog() {
        final TreePath[] treePaths = buyTreeTable.getTreeSelectionModel().getSelectionPaths();
        final BuyPortfolioTreeTableModel portfolioTreeTableModel = (BuyPortfolioTreeTableModel)buyTreeTable.getTreeTableModel();
        
        if(treePaths == null) return 0.0;
        
        if(treePaths.length == 1) {
            if(treePaths[0].getLastPathComponent() instanceof TransactionSummary) {
                final TransactionSummary transactionSummary = (TransactionSummary)treePaths[0].getLastPathComponent();
                assert(transactionSummary.getChildCount() > 0);
                final Transaction transaction = (Transaction)transactionSummary.getChildAt(0);
                final Code code = transaction.getContract().getStock().getCode();
                return portfolioTreeTableModel.getLastPrice(code);
            }
            else if(treePaths[0].getLastPathComponent() instanceof Transaction) {
                final Transaction transaction = (Transaction)treePaths[0].getLastPathComponent();
                final Code code = transaction.getContract().getStock().getCode();
                return portfolioTreeTableModel.getLastPrice(code);
            }
        }        
        
        return 0.0;
    }
    
    private void showNewSellTransactionJDialog(Transaction buyTransaction) {
        assert(buyTransaction.getContract().getType() == Contract.Type.Buy);
        
        final Symbol stockSymbol = buyTransaction.getContract().getStock().getSymbol();
        final int maxSellQuantity = buyTransaction.getQuantity();
        double buyCost = 0.0;
        if(buyTransaction.getQuantity() > 0) {
            buyCost = buyTransaction.getNetTotal() / buyTransaction.getQuantity();
        }
        final MainFrame mainFrame = MainFrame.getInstance();
        
        NewSellTransactionJDialog newSellTransactionJDialog = new NewSellTransactionJDialog(mainFrame, true);
        newSellTransactionJDialog.setLocationRelativeTo(this);
        newSellTransactionJDialog.setStockSymbol(stockSymbol);
        newSellTransactionJDialog.setMaxSellQuantity(maxSellQuantity);
        newSellTransactionJDialog.setSellQuantity(maxSellQuantity);
        
        newSellTransactionJDialog.setBuyCost(buyCost);
        newSellTransactionJDialog.setPrice(newSellTransactionJDialog.suggestBestSellingPrice());
        newSellTransactionJDialog.setVisible(true);
        
        final Transaction newSellTransaction = newSellTransactionJDialog.getTransaction();
        if(newSellTransaction != null) {                        
            final int remain = buyTransaction.getQuantity() - newSellTransaction.getQuantity();
            
            assert(remain >= 0);
            
            addSellTransaction(newSellTransaction);
            
            final BuyPortfolioTreeTableModel portfolioTreeTableModel = (BuyPortfolioTreeTableModel)buyTreeTable.getTreeTableModel();
            
            if(remain <= 0) {
                portfolioTreeTableModel.removeTransaction(buyTransaction);
            }
            else {
                this.editBuyTransaction(buyTransaction.setQuantity(remain), buyTransaction);
            }
            
            updateWealthHeader();
        }
    }
    
    private void showEditTransactionJDialog(Transaction transaction) {
        final MainFrame mainFrame = MainFrame.getInstance();

        if(transaction.getContract().getType() == Contract.Type.Buy) {
            NewBuyTransactionJDialog newTransactionJDialog = new NewBuyTransactionJDialog(mainFrame, true);
            newTransactionJDialog.setStockSelectionEnabled(false);
            newTransactionJDialog.setTransaction(transaction);
            newTransactionJDialog.setTitle("Edit " + transaction.getContract().getStock().getSymbol() + " Buy");
            newTransactionJDialog.setLocationRelativeTo(this);
            newTransactionJDialog.setVisible(true);

            final Transaction newTransaction = newTransactionJDialog.getTransaction();
            if(newTransaction != null) {
                this.editBuyTransaction(newTransaction, transaction);
                updateWealthHeader();
            }        
        }
        else {
            assert(transaction.getContract().getType() == Contract.Type.Sell);
            
            NewSellTransactionJDialog newTransactionJDialog = new NewSellTransactionJDialog(mainFrame, true);
            newTransactionJDialog.setTransaction(transaction);
            newTransactionJDialog.setTitle("Edit " + transaction.getContract().getStock().getSymbol() + " Sell");
            newTransactionJDialog.setLocationRelativeTo(this);
            newTransactionJDialog.setVisible(true);

            final Transaction newTransaction = newTransactionJDialog.getTransaction();
            if(newTransaction != null) {
                this.editSellTransaction(newTransaction, transaction);
                updateWealthHeader();
            }                    
        }
    }
    
    public void showNewBuyTransactionJDialog(Symbol stockSymbol, double lastPrice, boolean JComboBoxEnabled) {

        final MainFrame mainFrame = MainFrame.getInstance();

        final StockCodeAndSymbolDatabase stockCodeAndSymbolDatabase = mainFrame.getStockCodeAndSymbolDatabase();
        
        if(stockCodeAndSymbolDatabase == null) {
            javax.swing.JOptionPane.showMessageDialog(this, "We haven't connected to stock server.", "Not Connected", javax.swing.JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        
        NewBuyTransactionJDialog newTransactionJDialog = new NewBuyTransactionJDialog(mainFrame, true);
        newTransactionJDialog.setLocationRelativeTo(this);
        newTransactionJDialog.setStockSymbol(stockSymbol);
        newTransactionJDialog.setPrice(lastPrice);
        newTransactionJDialog.setJComboBoxEnabled(JComboBoxEnabled);
        newTransactionJDialog.setStockCodeAndSymbolDatabase(stockCodeAndSymbolDatabase);
        newTransactionJDialog.initjComboBox1EditorComponentKeyListerner();                
        newTransactionJDialog.setVisible(true);
        
        final Transaction transaction = newTransactionJDialog.getTransaction();
        if(transaction != null) {
            this.addBuyTransaction(transaction);
            updateWealthHeader();
        }
    }
    
    public void clearTableSelection() {
        buyTreeTable.getSelectionModel().clearSelection();
        sellTreeTable.getSelectionModel().clearSelection();
    }
    
    private void deleteSelectedTreeTableRow(org.jdesktop.swingx.JXTreeTable treeTable) {
        final AbstractPortfolioTreeTableModel portfolioTreeTableModel = (AbstractPortfolioTreeTableModel)treeTable.getTreeTableModel();
        final TreePath[] treePaths = treeTable.getTreeSelectionModel().getSelectionPaths();
        
        if(treePaths == null) {
            return;
        }
        
        for(TreePath treePath : treePaths) {
            final Object o = treePath.getLastPathComponent();

            if(portfolioTreeTableModel.getRoot() == o) continue;
            
            final MutableTreeTableNode mutableTreeTableNode = (MutableTreeTableNode)o;

            if(isValidTreeTableNode(portfolioTreeTableModel, mutableTreeTableNode) == false) {
                //???
                portfolioTreeTableModel.fireTreeTableNodeChanged(mutableTreeTableNode);
                continue;
            }
                        
            if(o instanceof Transaction) {                
                portfolioTreeTableModel.removeTransaction((Transaction)o);
                
            }
            else if(o instanceof TransactionSummary) {
                portfolioTreeTableModel.removeTransactionSummary((TransactionSummary)o);
            }
        }        
    }
    
    private void deteleSelectedTreeTableRow() {
        deleteSelectedTreeTableRow(this.buyTreeTable);
        deleteSelectedTreeTableRow(this.sellTreeTable);
        
        updateWealthHeader();
    }
    
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        deteleSelectedTreeTableRow();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void buyTreeTableValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_buyTreeTableValueChanged
        // TODO add your handling code here:
        javax.swing.SwingUtilities.invokeLater(new Runnable() {
                public void run() {
                    if(buyTreeTable.getSelectedRowCount() > 0) {
                        sellTreeTable.clearSelection();
                    }
                }        
        });
    }//GEN-LAST:event_buyTreeTableValueChanged

    private void sellTreeTableValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_sellTreeTableValueChanged
        // TODO add your handling code here:
        javax.swing.SwingUtilities.invokeLater(new Runnable() {
                public void run() {
                    if(sellTreeTable.getSelectedRowCount() > 0) {
                        buyTreeTable.clearSelection();
                    }
                }        
        });
    }//GEN-LAST:event_sellTreeTableValueChanged

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        // TODO add your handling code here:
        this.clearTableSelection();
    }//GEN-LAST:event_formMouseClicked

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        final Transaction transaction = getSelectedTransaction(buyTreeTable);
        
        if(transaction == null) {
            JOptionPane.showMessageDialog(this, "You need to select 1 buy transaction, in order to sell it", "No buy transaction selected", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        
        this.showNewSellTransactionJDialog(transaction);
    }//GEN-LAST:event_jButton3ActionPerformed
    
    // Will return null, if more than one buyTransaction being selected, or no
    // buyTransaction being selected.
    private Transaction getSelectedTransaction(JXTreeTable treeTable) {
        if(treeTable.getSelectedRowCount() != 1) return null;
        
        final TreePath[] treePaths = treeTable.getTreeSelectionModel().getSelectionPaths();
        
        final Object o = treePaths[0].getLastPathComponent();

        if (o instanceof Transaction) {
            return (Transaction)o;
        }
        
        return null;        
    }
    
    private boolean isOnlyTreeTableRootBeingSelected(JXTreeTable treeTable) {
        if(treeTable.getSelectedRowCount() != 1) return false;
        
        final TreePath[] treePaths = treeTable.getTreeSelectionModel().getSelectionPaths();
        
        final Object o = treePaths[0].getLastPathComponent();

        final AbstractPortfolioTreeTableModel portfolioTreeTableModel = (AbstractPortfolioTreeTableModel)treeTable.getTreeTableModel();
        
        return (portfolioTreeTableModel.getRoot() == o);
    }
        
    private class BuyTableRowPopupListener extends MouseAdapter {
        
        @Override
        public void mouseClicked(MouseEvent evt) {
            if(evt.getClickCount() == 2) {
                final Transaction transaction = getSelectedTransaction(buyTreeTable);
                if(transaction != null) {
                    PortfolioManagementJPanel.this.showEditTransactionJDialog(transaction);
                }
            }
        }
        
        @Override
        public void mousePressed(MouseEvent e) {
            maybeShowPopup(e);
        }

        @Override
        public void mouseReleased(MouseEvent e) {
            maybeShowPopup(e);
        }
        
        private void maybeShowPopup(MouseEvent e) {
            if (e.isPopupTrigger()) {
                getBuyTreeTablePopupMenu().show(e.getComponent(), e.getX(), e.getY());
            }
        }
    }

    private class SellTableRowPopupListener extends MouseAdapter {
        
        public void mouseClicked(MouseEvent evt) {
            if(evt.getClickCount() == 2) {
                final Transaction transaction = getSelectedTransaction(sellTreeTable);
                if(transaction != null) {
                    PortfolioManagementJPanel.this.showEditTransactionJDialog(transaction);
                }
            }
        }
        
        @Override
        public void mousePressed(MouseEvent e) {
            maybeShowPopup(e);
        }

        @Override
        public void mouseReleased(MouseEvent e) {
            maybeShowPopup(e);
        }
        
        private void maybeShowPopup(MouseEvent e) {
            if (e.isPopupTrigger()) {
                final JPopupMenu popupMenu = getSellTreeTablePopupMenu();
                if(popupMenu != null)
                    popupMenu.show(e.getComponent(), e.getX(), e.getY());
            }
        }
    }
    
    private ImageIcon getImageIcon(String imageIcon) {
        return new javax.swing.ImageIcon(getClass().getResource(imageIcon));
    }
    
    private void showBuyPortfolioChartJDialog() {
        final MainFrame m = MainFrame.getInstance();
        final BuyPortfolioTreeTableModel buyPortfolioTreeTableModel = (BuyPortfolioTreeTableModel)buyTreeTable.getTreeTableModel();
        BuyPortfolioChartJDialog buyPortfolioChartJDialog = new BuyPortfolioChartJDialog(m, false, buyPortfolioTreeTableModel);
        buyPortfolioChartJDialog.setVisible(true);                                    
    }
    
    private void showSellPortfolioChartJDialog() {
        final MainFrame m = MainFrame.getInstance();
        final SellPortfolioTreeTableModel sellPortfolioTreeTableModel = (SellPortfolioTreeTableModel)sellTreeTable.getTreeTableModel();
        SellPortfolioChartJDialog sellPortfolioChartJDialog = new SellPortfolioChartJDialog(m, false, sellPortfolioTreeTableModel);
        sellPortfolioChartJDialog.setVisible(true);                                    
    }
    
    private JPopupMenu getSellTreeTablePopupMenu() {                
        final Transaction transaction = getSelectedTransaction(this.sellTreeTable);

        JPopupMenu popup = new JPopupMenu();

        JMenuItem menuItem = null;
        
        if(transaction != null) {
            menuItem = new JMenuItem("Edit...", this.getImageIcon("/images/16x16/edit.png"));

            menuItem.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent evt) {
                    PortfolioManagementJPanel.this.showEditTransactionJDialog(transaction);
                }
            });            

            popup.add(menuItem);

            popup.addSeparator();
        }
        
       menuItem = new JMenuItem("Summary...", this.getImageIcon("/images/16x16/chart.png"));
        
        menuItem.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                PortfolioManagementJPanel.this.showSellPortfolioChartJDialog();
            }
        });

        popup.add(menuItem);        
        
        if(isOnlyTreeTableRootBeingSelected(sellTreeTable) == false && (sellTreeTable.getSelectedRow() > 0)) {
            final MainFrame m = MainFrame.getInstance();
                                
            menuItem = new JMenuItem("History...", this.getImageIcon("/images/16x16/strokedocker.png"));

            menuItem.addActionListener(new ActionListener() {
                    public void actionPerformed(ActionEvent evt) {
                        List<Stock> stocks = getSelectedStock(sellTreeTable);

                        for(Stock stock : stocks) {
                            m.displayHistoryChart(stock);
                        }
                    }
            });
                        
            popup.add(menuItem);
            popup.addSeparator();
            
            menuItem = new JMenuItem("Delete", this.getImageIcon("/images/16x16/editdelete.png"));

            menuItem.addActionListener(new ActionListener() {
                    public void actionPerformed(ActionEvent evt) {
                        PortfolioManagementJPanel.this.deteleSelectedTreeTableRow();
                    }
            });

            popup.add(menuItem);
        }
        
        return popup;
    }
    
    private JPopupMenu getBuyTreeTablePopupMenu() {                
        JPopupMenu popup = new JPopupMenu();

        JMenuItem menuItem = new JMenuItem("Buy...", this.getImageIcon("/images/16x16/inbox.png"));

        menuItem.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                PortfolioManagementJPanel.this.showNewBuyTransactionJDialog(getSelectedStockSymbolForNewTransactionJDialog(), getSelectedStockLastPriceForNewTransactionJDialog(), true);
            }
        });

        popup.add(menuItem);

        final Transaction transaction = getSelectedTransaction(this.buyTreeTable);

        if(transaction != null) {
            menuItem = new JMenuItem("Sell...", this.getImageIcon("/images/16x16/outbox.png"));
            
            menuItem.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent evt) {
                    PortfolioManagementJPanel.this.showNewSellTransactionJDialog(transaction);
                }
            });            
            
            popup.add(menuItem);  
        }       
        
        popup.addSeparator();
                
        if(transaction != null) {
            menuItem = new JMenuItem("Edit...", this.getImageIcon("/images/16x16/edit.png"));
            
            menuItem.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent evt) {
                    PortfolioManagementJPanel.this.showEditTransactionJDialog(transaction);
                }
            });            
            
            popup.add(menuItem);
            
            popup.addSeparator();    
        }       
        
        menuItem = new JMenuItem("Summary...", this.getImageIcon("/images/16x16/chart.png"));
        
        menuItem.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                PortfolioManagementJPanel.this.showBuyPortfolioChartJDialog();
            }
        });

        popup.add(menuItem);                
        
        if(isOnlyTreeTableRootBeingSelected(buyTreeTable) == false && (buyTreeTable.getSelectedRow() > 0)) {
            //popup.addSeparator();
            
            final MainFrame m = MainFrame.getInstance();
                                
            menuItem = new JMenuItem("History...", this.getImageIcon("/images/16x16/strokedocker.png"));

            menuItem.addActionListener(new ActionListener() {
                    public void actionPerformed(ActionEvent evt) {
                        List<Stock> stocks = getSelectedStock(buyTreeTable);

                        for(Stock stock : stocks) {
                            m.displayHistoryChart(stock);
                        }
                    }
            });
                        
            popup.add(menuItem);
            popup.addSeparator();
            
            menuItem = new JMenuItem("Delete", this.getImageIcon("/images/16x16/editdelete.png"));

            menuItem.addActionListener(new ActionListener() {
                    public void actionPerformed(ActionEvent evt) {
                        PortfolioManagementJPanel.this.deteleSelectedTreeTableRow();
                    }
            });

            popup.add(menuItem);
        }
        
        return popup;
    }

    private void editSellTransaction(Transaction newTransaction, Transaction oldTransaction) {
        assert(newTransaction.getContract().getType() == Contract.Type.Sell);
        assert(oldTransaction.getContract().getType() == Contract.Type.Sell);
        
        final SellPortfolioTreeTableModel portfolioTreeTableModel = (SellPortfolioTreeTableModel)sellTreeTable.getTreeTableModel();
        portfolioTreeTableModel.editTransaction(newTransaction, oldTransaction);        
    }
    
    private void editBuyTransaction(Transaction newTransaction, Transaction oldTransaction) {
        assert(newTransaction.getContract().getType() == Contract.Type.Buy);
        assert(oldTransaction.getContract().getType() == Contract.Type.Buy);
        
        final BuyPortfolioTreeTableModel portfolioTreeTableModel = (BuyPortfolioTreeTableModel)buyTreeTable.getTreeTableModel();
        portfolioTreeTableModel.editTransaction(newTransaction, oldTransaction);        
    }
    
    private void addBuyTransaction(Transaction transaction) {
        assert(transaction.getContract().getType() == Contract.Type.Buy);
        
        final BuyPortfolioTreeTableModel portfolioTreeTableModel = (BuyPortfolioTreeTableModel)buyTreeTable.getTreeTableModel();
        portfolioTreeTableModel.addTransaction(transaction);
        this.realTimeStockMonitor.addStockCode(transaction.getContract().getStock().getCode());
    }

    private void addSellTransaction(Transaction transaction) {
        assert(transaction.getContract().getType() == Contract.Type.Sell);
        
        final SellPortfolioTreeTableModel portfolioTreeTableModel = (SellPortfolioTreeTableModel)sellTreeTable.getTreeTableModel();
        portfolioTreeTableModel.addTransaction(transaction);
    }
    
    private void updateRealTimeStockMonitorAccordingToBuyPortfolioTreeTableModel() {
        if(this.realTimeStockMonitor == null) return;
        
        final BuyPortfolioTreeTableModel portfolioTreeTableModel = (BuyPortfolioTreeTableModel)buyTreeTable.getTreeTableModel();
                
        if(portfolioTreeTableModel != null) {
            this.buyTreeTable.setTreeTableModel(portfolioTreeTableModel);
            
            Portfolio portfolio = (Portfolio)portfolioTreeTableModel.getRoot();
            final int count = portfolio.getChildCount();
            
            for(int i=0; i<count; i++) {
                TransactionSummary transactionSummary = (TransactionSummary)portfolio.getChildAt(i);
                
                if(transactionSummary.getChildCount() <= 0) continue;
                
                final Transaction transaction = (Transaction)transactionSummary.getChildAt(0);

                this.realTimeStockMonitor.addStockCode(transaction.getContract().getStock().getCode());
            }
        }
        
    }
    
    private List<Stock> getSelectedStock(JXTreeTable treeTable) {
        final TreePath[] treePaths = treeTable.getTreeSelectionModel().getSelectionPaths();
        List<Stock> stocks = new ArrayList<Stock>();
        Set<Code> c = new HashSet<Code>();
        
        if(treePaths == null) {
            return Collections.unmodifiableList(stocks);
        }
        
        for(TreePath treePath : treePaths) {
            final Object lastPathComponent = treePath.getLastPathComponent();
            
            if(lastPathComponent instanceof TransactionSummary) {
                final TransactionSummary transactionSummary = (TransactionSummary)lastPathComponent;
                assert(transactionSummary.getChildCount() > 0);
                final Transaction transaction = (Transaction)transactionSummary.getChildAt(0);
                final Stock stock = transaction.getContract().getStock();
                final Code code = stock.getCode();
                
                if(c.contains(code)) continue;
                
                stocks.add(stock);
                c.add(code);
            }
            else if(lastPathComponent instanceof Transaction) {
                final Transaction transaction = (Transaction)lastPathComponent;
                final Stock stock = transaction.getContract().getStock();
                final Code code = stock.getCode();
                
                if(c.contains(code)) continue;
                
                stocks.add(stock);
                c.add(code);
            }                        
        }
        
        return Collections.unmodifiableList(stocks);
    }
    
    public void initPortfolio() {
        final Country country = MainFrame.getInstance().getJStockOptions().getCountry();
        
        boolean sellReadSuccess = false;
        boolean buyReadSuccess = false;
        
        try {            
            File f = new File(org.yccheok.jstock.gui.Utils.getUserDataDirectory() + country + File.separator + "config" + File.separator + "buyportfolio.xml");

            XStream xStream = new XStream();
            InputStream inputStream = new java.io.FileInputStream(f);
            final Object obj = xStream.fromXML(inputStream);
            
            if(obj instanceof BuyPortfolioTreeTableModel) {
                final BuyPortfolioTreeTableModel portfolioTreeTableModel = (BuyPortfolioTreeTableModel)obj;
                this.buyTreeTable.setTreeTableModel(portfolioTreeTableModel);
                buyReadSuccess = true;
            }
        }
        catch(java.io.FileNotFoundException exp) {
            log.error("", exp);
        }
        catch(com.thoughtworks.xstream.core.BaseException exp) {
            log.error("", exp);
        }

        try {
            File f = new File(org.yccheok.jstock.gui.Utils.getUserDataDirectory() + country + File.separator + "config" + File.separator + "sellportfolio.xml");

            XStream xStream = new XStream();
            InputStream inputStream = new java.io.FileInputStream(f);
            final Object obj = xStream.fromXML(inputStream);
            
            if(obj instanceof SellPortfolioTreeTableModel) {
                final SellPortfolioTreeTableModel portfolioTreeTableModel = (SellPortfolioTreeTableModel)obj;
                this.sellTreeTable.setTreeTableModel(portfolioTreeTableModel);
                sellReadSuccess = true;
            }
        }
        catch(java.io.FileNotFoundException exp) {
            log.error("", exp);
        }
        catch(com.thoughtworks.xstream.core.BaseException exp) {
            log.error("", exp);
        }
        
        if(buyReadSuccess == false) buyTreeTable.setTreeTableModel(new BuyPortfolioTreeTableModel());
        if(sellReadSuccess == false) sellTreeTable.setTreeTableModel(new SellPortfolioTreeTableModel());
        
        updateRealTimeStockMonitorAccordingToBuyPortfolioTreeTableModel();
        
        updateWealthHeader();
    }
    
    public boolean savePortfolio() {
        final Country country = MainFrame.getInstance().getJStockOptions().getCountry();
        
        if(Utils.createCompleteDirectoryHierarchyIfDoesNotExist(org.yccheok.jstock.gui.Utils.getUserDataDirectory() + country + File.separator + "config") == false)
        {
            return false;
        }
        
        File f = new File(org.yccheok.jstock.gui.Utils.getUserDataDirectory() + country + File.separator + "config" + File.separator + "buyportfolio.xml");
                
        XStream xStream = new XStream();   
        
        boolean status = true;
        
        try {
            OutputStream outputStream = new FileOutputStream(f);
            final BuyPortfolioTreeTableModel portfolioTreeTableModel = (BuyPortfolioTreeTableModel)buyTreeTable.getTreeTableModel();
            xStream.toXML(portfolioTreeTableModel, outputStream);  
        }
        catch(java.io.FileNotFoundException exp) {
            log.error("", exp);
            status = false;
        }
        catch(com.thoughtworks.xstream.core.BaseException exp) {
            log.error("", exp);
            status = false;
        }
           
        f = new File(org.yccheok.jstock.gui.Utils.getUserDataDirectory() + country + File.separator + "config" + File.separator + "sellportfolio.xml");
                
        try {
            OutputStream outputStream = new FileOutputStream(f);
            final SellPortfolioTreeTableModel portfolioTreeTableModel = (SellPortfolioTreeTableModel)sellTreeTable.getTreeTableModel();
            xStream.toXML(portfolioTreeTableModel, outputStream);  
        }
        catch(java.io.FileNotFoundException exp) {
            log.error("", exp);
            status = false;
        }
        catch(com.thoughtworks.xstream.core.BaseException exp) {
            log.error("", exp);
            status = false;
        }
        
        return status;
    }
    
    public void initRealTimeStockMonitor(java.util.List<StockServerFactory> stockServerFactories) {
        if(realTimeStockMonitor != null) {
            final RealTimeStockMonitor oldRealTimeStockMonitor = realTimeStockMonitor;
            Utils.getZoombiePool().execute(new Runnable() {
                public void run() {
                    log.info("Prepare to shut down " + oldRealTimeStockMonitor + "...");
                    oldRealTimeStockMonitor.clearStockCodes();
                    oldRealTimeStockMonitor.dettachAll();
                    oldRealTimeStockMonitor.stop();
                    log.info("Shut down " + oldRealTimeStockMonitor + " peacefully.");
                }
            });
        }
        
        realTimeStockMonitor = new RealTimeStockMonitor(4, 20, MainFrame.getInstance().getJStockOptions().getScanningSpeed());
        
        for(StockServerFactory factory : stockServerFactories) {
            realTimeStockMonitor.addStockServerFactory(factory);
        }
        
        realTimeStockMonitor.attach(this.realTimeStockMonitorObserver);
        
        updateRealTimeStockMonitorAccordingToBuyPortfolioTreeTableModel();
    }
    
    // This is the workaround to overcome Erasure by generics. We are unable to make MainFrame to
    // two observers at the same time.
    private org.yccheok.jstock.engine.Observer<RealTimeStockMonitor, java.util.List<Stock>> getRealTimeStockMonitorObserver() {
        return new org.yccheok.jstock.engine.Observer<RealTimeStockMonitor, java.util.List<Stock>>() {
            public void update(RealTimeStockMonitor monitor, java.util.List<Stock> stocks)
            {
                PortfolioManagementJPanel.this.update(monitor, stocks);
            }
        };
    }
    
    public void update(RealTimeStockMonitor monitor, final java.util.List<Stock> stocks) {
        final BuyPortfolioTreeTableModel portfolioTreeTableModel = (BuyPortfolioTreeTableModel)buyTreeTable.getTreeTableModel();
 
        for(Stock stock : stocks) {
            if(false == portfolioTreeTableModel.updateStockLastPrice(stock)) {
                this.realTimeStockMonitor.removeStockCode(stock.getCode());
            }
        }  
        
        updateWealthHeader();
    }  

    private void initGUIOptions() {
        GUIOptions guiOptions = null;

        try {
            File f = new File(org.yccheok.jstock.gui.Utils.getUserDataDirectory() + "config" + File.separator + "portfoliomanagementjpanel.xml");

            XStream xStream = new XStream();
            InputStream inputStream = new java.io.FileInputStream(f);
            guiOptions = (GUIOptions)xStream.fromXML(inputStream);

            log.info("guiOptions loaded from " + f.toString() + " successfully.");
        }
        catch (java.io.FileNotFoundException exp) {
            log.error("", exp);
        }
        catch (com.thoughtworks.xstream.core.BaseException exp) {
            log.error("", exp);
        }

        if (guiOptions == null)
        {
            return;
        }

        if (guiOptions.getJTableOptionsSize() <= 1)
        {
            return;
        }

        final org.jdesktop.swingx.JXTreeTable[] treeTables = {buyTreeTable, sellTreeTable};

        /* Remove any unwanted columns. */
        for (int tableIndex = 0; tableIndex < treeTables.length; tableIndex++)
        {
            final JXTreeTable treeTable = treeTables[tableIndex];
            final javax.swing.table.JTableHeader jTableHeader = treeTable.getTableHeader();
            final JTable jTable = jTableHeader.getTable();

            for (int i = 0; i < jTable.getColumnCount(); i++) {
                final String name = jTable.getColumnName(i);

                if (guiOptions.getJTableOptions(tableIndex).contains(name) == false)
                {
                    JTableUtilities.removeTableColumn(jTable, name);
                    i--;
                }
            }
        }

        for (int tableIndex = 0; tableIndex < treeTables.length; tableIndex++)
        {
            final int optionsCount = guiOptions.getJTableOptions(tableIndex).getColumnSize();
            final JXTreeTable treeTable = treeTables[tableIndex];
            final javax.swing.table.JTableHeader jTableHeader = treeTable.getTableHeader();
            final JTable jTable = jTableHeader.getTable();
            final int tableCount = jTable.getColumnCount();

            /* Sort the columns according to user preference. */
            for (int i = 0; i < optionsCount; i++) {
                final String name = guiOptions.getJTableOptions(tableIndex).getColumnName(i);
                int index = -1;
                for (int j = 0; j < tableCount; j++) {
                    if (jTable.getColumnName(j).equals(name))
                    {
                        index = j;
                        break;
                    }
                }

                if (index >= 0)
                {
                    jTable.moveColumn(index, i);
                }
            }
        }
    }

    public boolean saveGUIOptions() {
        if(Utils.createCompleteDirectoryHierarchyIfDoesNotExist(org.yccheok.jstock.gui.Utils.getUserDataDirectory() + "config") == false)
        {
            return false;
        }

        final GUIOptions guiOptions = new GUIOptions();

        final org.jdesktop.swingx.JXTreeTable[] treeTables = {buyTreeTable, sellTreeTable};

        for (org.jdesktop.swingx.JXTreeTable treeTable : treeTables)
        {
            final javax.swing.table.JTableHeader jTableHeader = treeTable.getTableHeader();
            final JTable jTable = jTableHeader.getTable();
            final GUIOptions.JTableOptions jTableOptions = new GUIOptions.JTableOptions();
            
            final int count = jTable.getColumnCount();
            for (int i = 0; i < count; i++) {
                final String name = jTable.getColumnName(i);
                jTableOptions.addColumnName(name);
            }

            guiOptions.addJTableOptions(jTableOptions);
        }

        File f = new File(org.yccheok.jstock.gui.Utils.getUserDataDirectory() + "config" + File.separator + "portfoliomanagementjpanel.xml");

        XStream xStream = new XStream();

        try {
            OutputStream outputStream = new FileOutputStream(f);
            xStream.toXML(guiOptions, outputStream);
        }
        catch(java.io.FileNotFoundException exp) {
            log.error("", exp);
            return false;
        }
        catch(com.thoughtworks.xstream.core.BaseException exp) {
            log.error("", exp);
            return false;
        }

        return true;
    }

    private void updateWealthHeader() {
        final BuyPortfolioTreeTableModel buyPortfolioTreeTableModel = (BuyPortfolioTreeTableModel)this.buyTreeTable.getTreeTableModel();
        final SellPortfolioTreeTableModel sellPortfolioTreeTableModel = (SellPortfolioTreeTableModel)this.sellTreeTable.getTreeTableModel();
        
        final double share = buyPortfolioTreeTableModel.getCurrentValue();
        final double cash = sellPortfolioTreeTableModel.getNetSellingValue();
        final double paperProfit = buyPortfolioTreeTableModel.getNetGainLossValue();
        final double paperProfitPercentage = buyPortfolioTreeTableModel.getNetGainLossPercentage();
        final double realizedProfit = sellPortfolioTreeTableModel.getNetGainLossValue();
        final double realizedProfitPercentage = sellPortfolioTreeTableModel.getNetGainLossPercentage();
        
        final java.text.NumberFormat numberFormat = java.text.NumberFormat.getInstance();
        numberFormat.setMaximumFractionDigits(2);
        numberFormat.setMinimumFractionDigits(2);
        
        final String _share = numberFormat.format(share);
        final String _cash = numberFormat.format(cash);
        final String _paperProfit = numberFormat.format(paperProfit);
        final String _paperProfitPercentage = numberFormat.format(paperProfitPercentage);
        final String _realizedProfit = numberFormat.format(realizedProfit);
        final String _realizedProfitPercentage = numberFormat.format(realizedProfitPercentage);
        
        javax.swing.SwingUtilities.invokeLater(new Runnable() {
            @Override
           public void run() {
                jLabel2.setText(_share);
                jLabel4.setText(_cash);
                jLabel6.setText(_paperProfit + " (" + _paperProfitPercentage + "%)");
                jLabel8.setText(_realizedProfit + " (" + _realizedProfitPercentage + "%)");
                jLabel2.setForeground(Utils.getColor(share, 0.0));
                jLabel4.setForeground(Utils.getColor(cash, 0.0));
                jLabel6.setForeground(Utils.getColor(paperProfit, 0.0));
                jLabel8.setForeground(Utils.getColor(realizedProfit, 0.0));
           }
        });
    }
    
    public void softStart() {
        if(realTimeStockMonitor == null) return;
                
        realTimeStockMonitor.softStart();
    }
    
    public void softStop() {
        if(realTimeStockMonitor == null) return;
        
        realTimeStockMonitor.softStop();
    }
    
    private static final Log log = LogFactory.getLog(PortfolioManagementJPanel.class);
    
    private RealTimeStockMonitor realTimeStockMonitor = null;
    private org.yccheok.jstock.engine.Observer<RealTimeStockMonitor, java.util.List<Stock>> realTimeStockMonitorObserver = this.getRealTimeStockMonitorObserver();

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.jdesktop.swingx.JXTreeTable buyTreeTable;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSplitPane jSplitPane1;
    private org.jdesktop.swingx.JXTreeTable sellTreeTable;
    // End of variables declaration//GEN-END:variables

}
