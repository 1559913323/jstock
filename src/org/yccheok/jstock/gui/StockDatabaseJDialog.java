/*
 * JStock - Free Stock Market Software
 * Copyright (C) 2009 Yan Cheng CHEOK <yccheok@yahoo.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

package org.yccheok.jstock.gui;

import java.awt.Color;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.lang.reflect.Method;
import java.text.MessageFormat;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.regex.Pattern;
import javax.swing.AbstractAction;
import javax.swing.DefaultCellEditor;
import javax.swing.JFormattedTextField;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.KeyStroke;
import javax.swing.RowFilter;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.yccheok.jstock.engine.Code;
import org.yccheok.jstock.engine.MutableStockCodeAndSymbolDatabase;
import org.yccheok.jstock.engine.StockCodeAndSymbolDatabase;
import org.yccheok.jstock.engine.Symbol;
import org.yccheok.jstock.internationalization.MessagesBundle;

/**
 *
 * @author  yccheok
 */
public class StockDatabaseJDialog extends javax.swing.JDialog {

    /** Creates new form StockDatabaseJDialog */
    public StockDatabaseJDialog(java.awt.Frame parent, StockCodeAndSymbolDatabase stockCodeAndSymbolDatabase, boolean modal) {
        super(parent, modal);
        this.mutableStockCodeAndSymbolDatabase = new MutableStockCodeAndSymbolDatabase(stockCodeAndSymbolDatabase);
        initComponents();                
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel6 = new javax.swing.JPanel();
        jXHeader1 = new org.jdesktop.swingx.JXHeader();
        jPanel4 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jTextField1 = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jPanel5 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel9 = new javax.swing.JPanel();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Stock Database");
        setResizable(false);
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });

        jPanel6.setLayout(new java.awt.BorderLayout(5, 5));

        jXHeader1.setDescription("If you cannot find your stock symbol in the official database downloaded from stock exchange server, you may add your stock manually into the user defined database.");
        jXHeader1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/64x64/db_add.png"))); // NOI18N
        jXHeader1.setTitle("Stock Database");
        jXHeader1.setToolTipText("");
        jPanel6.add(jXHeader1, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel6, java.awt.BorderLayout.NORTH);

        jPanel4.setLayout(new java.awt.GridLayout(1, 0));

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Stock Exchange Server (Read only)"));
        jPanel1.setLayout(new java.awt.BorderLayout());

        jTable1.setAutoCreateRowSorter(true);
        jTable1.setModel(getSystemDefinedCodeSymbolTableModel());
        this.jTable1.setDefaultRenderer(Symbol.class, new StockTableCellRenderer());
        this.jTable1.setDefaultRenderer(Code.class, new StockTableCellRenderer());
        jScrollPane1.setViewportView(jTable1);

        jPanel1.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jTextField1.setColumns(10);
        jTextField1.getDocument().addDocumentListener(
            new DocumentListener() {
                public void changedUpdate(DocumentEvent e) {
                    newFilter();
                }
                public void insertUpdate(DocumentEvent e) {
                    newFilter();
                }
                public void removeUpdate(DocumentEvent e) {
                    newFilter();
                }
            });
            jPanel3.add(jTextField1);

            jPanel1.add(jPanel3, java.awt.BorderLayout.NORTH);

            jPanel4.add(jPanel1);

            jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("User Defined"));
            jPanel2.setLayout(new java.awt.BorderLayout());

            jTable2.setAutoCreateRowSorter(true);
            jTable2.setModel(getUserDefinedCodeSymbolTableModel());
            this.jTable2.addMouseListener(new TableRowPopupListener());
            this.jTable2.setDefaultRenderer(Code.class, new StockTableCellRenderer());
            this.jTable2.setDefaultRenderer(Symbol.class, new StockTableCellRenderer());
            this.jTable2.setDefaultEditor(Code.class, this.getCellEditor(Code.class));
            this.jTable2.setDefaultEditor(Symbol.class, this.getCellEditor(Symbol.class));
            //this.jTable2.setDefaultEditor(Object.class, this.getSymbolCellEditor());
            jTable2.addKeyListener(new java.awt.event.KeyAdapter() {
                public void keyPressed(java.awt.event.KeyEvent evt) {
                    jTable2KeyPressed(evt);
                }
            });
            jScrollPane2.setViewportView(jTable2);

            jPanel2.add(jScrollPane2, java.awt.BorderLayout.CENTER);

            jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/16x16/filenew.png"))); // NOI18N
            jButton1.setText("New");
            jButton1.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jButton1ActionPerformed(evt);
                }
            });
            jPanel5.add(jButton1);

            jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/16x16/editdelete.png"))); // NOI18N
            jButton2.setText("Delete");
            jButton2.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jButton2ActionPerformed(evt);
                }
            });
            jPanel5.add(jButton2);

            jPanel2.add(jPanel5, java.awt.BorderLayout.PAGE_START);

            jPanel4.add(jPanel2);

            getContentPane().add(jPanel4, java.awt.BorderLayout.CENTER);

            jPanel7.setLayout(new java.awt.BorderLayout());

            jLabel1.setForeground(new java.awt.Color(0, 0, 255));
            jLabel1.setText("There are total " + mutableStockCodeAndSymbolDatabase.getCodes().size() + " stock(s)");
            jPanel8.add(jLabel1);

            jPanel7.add(jPanel8, java.awt.BorderLayout.NORTH);

            jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/16x16/apply.png"))); // NOI18N
            jButton3.setText("OK");
            jButton3.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jButton3ActionPerformed(evt);
                }
            });
            jPanel9.add(jButton3);

            jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/16x16/button_cancel.png"))); // NOI18N
            jButton4.setText("Cancel");
            jButton4.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jButton4ActionPerformed(evt);
                }
            });
            jPanel9.add(jButton4);

            jPanel7.add(jPanel9, java.awt.BorderLayout.CENTER);

            getContentPane().add(jPanel7, java.awt.BorderLayout.PAGE_END);

            pack();
        }// </editor-fold>//GEN-END:initComponents

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
    // TODO add your handling code here:
        clearAllTablesSelection();
    }//GEN-LAST:event_formMouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
    // TODO add your handling code here:
        addNewSymbol();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        deleteSelectedUserDefinedDatabase();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jTable2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable2KeyPressed
        if(KeyEvent.VK_DELETE == evt.getKeyCode()) {
            this.deleteSelectedUserDefinedDatabase();
            return;
        }
    }//GEN-LAST:event_jTable2KeyPressed

    public MutableStockCodeAndSymbolDatabase getMutableStockCodeAndSymbolDatabase()
    {
        return result;
    }

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
    // TODO add your handling code here:
        this.result = null;
        this.setVisible(false);
        this.dispose();    
    }//GEN-LAST:event_jButton4ActionPerformed

    /* OK button being pressed. */
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        final CodeSymbolTableModel model = (CodeSymbolTableModel)(jTable2.getModel());
        final List<Code> codes = model.getCodes();
        final List<Symbol> symbols = model.getSymbols();
        assert(codes.size() == symbols.size());

        /* Shall we check the returned code? */
        this.mutableStockCodeAndSymbolDatabase.removeAllUserDefinedCodeAndSymbol();

        final int size = codes.size();
        for (int i = 0; i < size; i++) {
            final Code code = codes.get(i);
            Symbol symbol = symbols.get(i);

            if (code.toString().length() <= 0) {
                continue;
            }
            if (symbol.toString().length() <= 0) {
                /* We allow empty symbol to be entered by user. In 0 length
                 * symbol case, we will make it same as code.
                 */
                symbol = Symbol.newInstance(code.toString());
            }
            this.mutableStockCodeAndSymbolDatabase.addUserDefinedCodeAndSymbol(code, symbol);
        }

        
        this.result = this.mutableStockCodeAndSymbolDatabase;
        
        this.setVisible(false);
        this.dispose();    
    }//GEN-LAST:event_jButton3ActionPerformed
    
    private class TableRowPopupListener extends MouseAdapter {
        
        @Override
        public void mousePressed(MouseEvent e) {
            maybeShowPopup(e);
        }

        @Override
        public void mouseReleased(MouseEvent e) {
            maybeShowPopup(e);
        }

        private void maybeShowPopup(MouseEvent e) {
            if (e.isPopupTrigger()) {
                getMyJTablePopupMenu().show(e.getComponent(), e.getX(), e.getY());
            }
        }
    }

    private static final class StockTableCellRenderer extends javax.swing.table.DefaultTableCellRenderer {
    
        /** Creates a new instance of StockTableCellRender */
        public StockTableCellRenderer() {
            super();
        }

    
        private Color getBackgroundColor(int row) {
            final JStockOptions jStockOptions = MainFrame.getInstance().getJStockOptions();
        
            if (row % 2 == 0) {
                return jStockOptions.getFirstRowBackgroundColor();
            }
        
            return jStockOptions.getSecondRowBackgroundColor();
        }
    
        @Override
        public Component getTableCellRendererComponent(
                                JTable table, Object color,
                                boolean isSelected, boolean hasFocus,
                                int row, int column) {
            Component c = super.getTableCellRendererComponent(table, color, isSelected, hasFocus, row, column);

            if (isSelected || hasFocus) {
                return c;
            }

            final JStockOptions jStockOptions = MainFrame.getInstance().getJStockOptions();
        
            c.setForeground(jStockOptions.getNormalTextForegroundColor());
    
            c.setBackground(getBackgroundColor(row));

            return c;
        }    
    }

    private void deleteSelectedUserDefinedDatabase() {
        int rows[] = jTable2.getSelectedRows();

        final CodeSymbolTableModel codeSymbolTableModel = (CodeSymbolTableModel)(jTable2.getModel());
        
        Arrays.sort(rows);

        for (int i = rows.length-1; i >= 0; i--) {
            int row = rows[i];
            if (row < 0) {
                continue;
            }
            final int modelIndex = jTable2.getRowSorter().convertRowIndexToModel(row);            
            codeSymbolTableModel.removeRow(modelIndex);
        }        
    }
    
    private void clearAllTablesSelection() {
        this.jTable1.getSelectionModel().clearSelection();        
        this.jTable2.getSelectionModel().clearSelection();        
    }
    
    private void selectUserDefinedDatabaseTable(int modelIndex) {
        clearAllTablesSelection();
                
        final int selectedViewIndex = jTable2.getRowSorter().convertRowIndexToView(modelIndex);
        jTable2.getSelectionModel().setSelectionInterval(selectedViewIndex, selectedViewIndex);
        JTableUtilities.scrollToVisible(jTable2, selectedViewIndex, 0);
        
    }
    
    private void selectStockExchangeServerDatabaseTable(int modelIndex) {
        clearAllTablesSelection();
        
        final int selectedViewIndex = jTable1.getRowSorter().convertRowIndexToView(modelIndex);
        jTable1.getSelectionModel().setSelectionInterval(selectedViewIndex, selectedViewIndex);        
        JTableUtilities.scrollToVisible(jTable1, selectedViewIndex, 0);
    }
    
    private void addNewSymbol()
    {
        final CodeSymbolTableModel model = (CodeSymbolTableModel)jTable2.getModel();
        final int selectedModelIndex = model.addNewCodeSymbol();
        selectUserDefinedDatabaseTable(selectedModelIndex);        
    }
    
    private JPopupMenu getMyJTablePopupMenu() {
        final JPopupMenu popup = new JPopupMenu();
        
        javax.swing.JMenuItem menuItem = new JMenuItem("New", new javax.swing.ImageIcon(getClass().getResource("/images/16x16/filenew.png")));
        
        menuItem.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    addNewSymbol();
                }
        });

        popup.add(menuItem);
        
        if(jTable2.getSelectedRowCount() >= 1) {
            popup.addSeparator();
            
            menuItem = new JMenuItem("Delete", new javax.swing.ImageIcon(getClass().getResource("/images/16x16/editdelete.png")));

            menuItem.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent evt) {
                    deleteSelectedUserDefinedDatabase();
                }
            });  
            
            popup.add(menuItem);            
        }
        
        return popup;
    }

    private TableModel getUserDefinedCodeSymbolTableModel()
    {
        return new CodeSymbolTableModel(Type.UserDefined);
    }

    // For jTable1.
    private TableModel getSystemDefinedCodeSymbolTableModel()
    {
        return new CodeSymbolTableModel(Type.SystemDefined);
    }
    
    private void newFilter()
    {
        // I really have no idea what the second parameter is.
        RowFilter<CodeSymbolTableModel, Integer> rf = null;
        
        //If current expression doesn't parse, don't update.
        try {
            // (?i) is for case insensitive.
            rf = RowFilter.regexFilter("^(?i)" + Pattern.quote(jTextField1.getText()));
        } catch (java.util.regex.PatternSyntaxException e) {
            return;
        }
        ((TableRowSorter<CodeSymbolTableModel>)jTable1.getRowSorter()).setRowFilter(rf);
    }
    
    /* Use exclusively by CodeSymbolTableModel. */
    /* Unless I make CodeSymbolTableModel as static class, there is no way for
     * me to declare enum type inside CodeSymbolTableModel.
     */
    private enum Type {
        UserDefined,
        SystemDefined
    }

    private class CodeSymbolTableModel extends AbstractTableModel {
        // For fast access purpose.
        /* The index for codes, must be associated with index for symbols.
         */
        private final List<Symbol> symbols;
        private final List<Code> codes;
        private final Type type;

        public Type getType() {
            return this.type;
        }

        public List<Code> getCodes() {
            return Collections.unmodifiableList(codes);
        }

        public List<Symbol> getSymbols() {
            return Collections.unmodifiableList(symbols);
        }

        @Override
        public boolean isCellEditable(int rowIndex, int columnIndex) {
            return !isReadOnly();
        }

        private boolean isReadOnly() {
            return this.type != Type.UserDefined;
        }

        public void removeRow(int index) {
            if (this.isReadOnly()) {
                return;
            }
            this.symbols.remove(index);
            this.codes.remove(index);
            this.fireTableRowsDeleted(index, index);
        }

        public CodeSymbolTableModel(Type type) {
            this.type = type;
            
            final MutableStockCodeAndSymbolDatabase database = new MutableStockCodeAndSymbolDatabase(StockDatabaseJDialog.this.mutableStockCodeAndSymbolDatabase);

            if (this.type == Type.UserDefined) {
                this.codes = new ArrayList<Code>(StockDatabaseJDialog.this.mutableStockCodeAndSymbolDatabase.getUserDefinedCode());
                /* No! Never use getUserDefinedSymbol here. The returned symbols'
                 * index, are not guarantee to match with the index in codes.
                 */
                this.symbols = new ArrayList<Symbol>();
                for (Code code : codes) {
                    final Symbol symbol = StockDatabaseJDialog.this.mutableStockCodeAndSymbolDatabase.codeToSymbol(code);
                    assert(null != symbol);
                    this.symbols.add(symbol);
                }
            }
            else {
                database.removeAllUserDefinedCodeAndSymbol();
                symbols = database.getSymbols();
                codes = database.getCodes();
            }
        }
        
        @Override
        public int getRowCount() {
            assert(codes.size() == symbols.size());
            return codes.size();
        }

        @Override
        public int getColumnCount() {
            return columnNames.length;
        }

        @Override
        public Object getValueAt(int rowIndex, int columnIndex) {
            switch(columnIndex)
            {
                case 0:
                    return codes.get(rowIndex);
                case 1:
                    return symbols.get(rowIndex);
            }
            
            return null;
        }

        @Override
        public String getColumnName(int col) {
            return columnNames[col];
        }

        @Override
        public Class getColumnClass(int c) {
            return columnClasses[c];
        }

        @Override
        public void setValueAt(Object value, int row, int col) {
            if (this.isReadOnly()) {
                super.setValueAt(value, row, col);
                return;
            }
            if (value instanceof Symbol) {
                final Symbol symbol = (Symbol)value;
                symbols.remove(row);
                symbols.add(row, symbol);
            }
            else if (value instanceof Code) {
                final Code code = (Code)value;
                codes.remove(row);
                codes.add(row, code);
            }
            else {
                assert(false);
            }
            fireTableCellUpdated(row, col);
        }

        public int findSymbol(String string) {
            final Symbol symbol = Symbol.newInstance(string);
            final int symbolIndex = symbols.indexOf(symbol);
            if (symbolIndex >= 0) {
                return symbolIndex;
            }
            return -1;
        }

        public int findCode(String string) {
            final Code code = Code.newInstance(string);
            final int codeIndex = codes.indexOf(code);
            if (codeIndex >= 0) {
                return codeIndex;
            }
            return -1;
        }

        public int findCodeOrSymbol(String string) {
            final Symbol symbol = Symbol.newInstance(string);
            final int symbolIndex = symbols.indexOf(symbol);
            if (symbolIndex >= 0) {
                return symbolIndex;
            }

            final Code code = Code.newInstance(string);
            final int codeIndex = codes.indexOf(code);
            if (codeIndex >= 0) {
                return codeIndex;
            }
            
            return -1;
        }

        public int addNewCodeSymbol() {
            final Code code = Code.newInstance("");
            final Symbol symbol = Symbol.newInstance("");
            this.codes.add(code);
            this.symbols.add(symbol);

            final int index = symbols.size() - 1;
            this.fireTableRowsInserted(index, index);

            return index;
        }

        private final String[] columnNames = {"Code", "Symbol"};
        private final Class[] columnClasses = {Code.class, Symbol.class};
    }
    
    private TableCellEditor getCellEditor(Class c) {
        return new MyTableCellEditor(c);
    }
            
    private class MyTableCellEditor extends DefaultCellEditor {    
        private JFormattedTextField ftf;
        private final Class c;

        public MyTableCellEditor(Class c) {
            super(new JFormattedTextField());
            this.c = c;
            ftf = (JFormattedTextField)getComponent();

            ftf.setHorizontalAlignment(JTextField.TRAILING);
            ftf.setFocusLostBehavior(JFormattedTextField.PERSIST);

            //React when the user presses Enter while the editor is
            //active.  (Tab is handled as specified by
            //JFormattedTextField's focusLostBehavior property.)
            ftf.getInputMap().put(KeyStroke.getKeyStroke(
                                            KeyEvent.VK_ENTER, 0),
                                            "check");
            ftf.getActionMap().put("check", new AbstractAction() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    final CodeSymbolTableModel model1 = (CodeSymbolTableModel)(StockDatabaseJDialog.this.jTable1.getModel());
                    final CodeSymbolTableModel model2 = (CodeSymbolTableModel)(StockDatabaseJDialog.this.jTable2.getModel());
                    final String searchedText = ftf.getText().toUpperCase();
                    
                    final int modelIndex1 = model1.findCodeOrSymbol(searchedText);
                    /* Compare Symbol to Symbol, Code to Code. */
                    final int modelIndex2 = Code.class == MyTableCellEditor.this.c ? model2.findCode(searchedText) : model2.findSymbol(searchedText);
                    boolean isValid = true;

                    if (modelIndex1 >= 0) {
                        if (searchedText.length() > 0) {
                            if (searchedText.equalsIgnoreCase(ftf.getValue().toString()) == false) {
                                //JOptionPane.showMessageDialog(StockDatabaseJDialog.this, searchedText + " is conflicting with stock exchange server database.", "Conflicting", JOptionPane.INFORMATION_MESSAGE);
                                isValid = false;
                            }
                        }
                    }
                    if (modelIndex2 >= 0) {
                        if (searchedText.length() > 0) {
                            if (searchedText.equalsIgnoreCase(ftf.getValue().toString()) == false) {
                                //JOptionPane.showMessageDialog(StockDatabaseJDialog.this, searchedText + " is conflicting with user defined database.", "Conflicting", JOptionPane.INFORMATION_MESSAGE);
                                isValid = false;
                            }
                        }
                    }
                    if (isValid) {
                        try {
                            ftf.commitEdit();
                        } catch (ParseException ex) {
                            log.error(null, ex);
                        }
                    }

                    ftf.postActionEvent(); //inform the editor
                }
            });
        }

        // Override to invoke setValue on the formatted text field.
        @Override
        public Component getTableCellEditorComponent(JTable table,
                Object value, boolean isSelected,
                int row, int column) {
            JFormattedTextField _ftf =
                (JFormattedTextField)super.getTableCellEditorComponent(
                    table, value, isSelected, row, column);
            _ftf.setValue(value);
            return _ftf;
        }

        // Override to ensure that the value remains an Integer.
        @Override
        public Object getCellEditorValue() {
            JFormattedTextField _ftf = (JFormattedTextField)getComponent();
            Object o = _ftf.getValue();
            if (o == null) {
                return null;
            }
            try {
                Method method = this.c.getMethod("newInstance", String.class);
                return method.invoke(null, o.toString().toUpperCase());
            } catch (Exception ex) {
                log.error(null, ex);
            }
            return null;
        }

        //Override to check whether the edit is valid,
        //setting the value if it is and complaining if
        //it isn't.  If it's OK for the editor to go
        //away, we need to invoke the superclass's version 
        //of this method so that everything gets cleaned up.
        @Override
        public boolean stopCellEditing() {
            JFormattedTextField _ftf = (JFormattedTextField)getComponent();
            final CodeSymbolTableModel model1 = (CodeSymbolTableModel)(StockDatabaseJDialog.this.jTable1.getModel());
            final CodeSymbolTableModel model2 = (CodeSymbolTableModel)(StockDatabaseJDialog.this.jTable2.getModel());
            final String searchedText = _ftf.getText().toUpperCase();
            final int modelIndex1 = model1.findCodeOrSymbol(searchedText);
            final int modelIndex2 = Code.class == MyTableCellEditor.this.c ? model2.findCode(searchedText) : model2.findSymbol(searchedText);
            boolean isValid = true;

            if (modelIndex1 >= 0) {
                // We only take into consideration of string greater than 0. As
                // we allow multiple empty lines within a table.
                if (searchedText.length() > 0) {
                    // CHEOK : I also not sure why need not check for (and why need to check for) ???
                    // searchedText.equalsIgnoreCase(_ftf.getValue().toString())
                    final String message = MessageFormat.format(MessagesBundle.getString("warning_message_duplicated_stock_template"), searchedText);
                    final String title = MessagesBundle.getString("warning_title_duplicated_stock");
                    JOptionPane.showMessageDialog(StockDatabaseJDialog.this, message, title, JOptionPane.INFORMATION_MESSAGE);
                    selectStockExchangeServerDatabaseTable(modelIndex1);
                    isValid = false;
                }
            }
            
            if (modelIndex2 >= 0) {
                // We only take into consideration of string greater than 0. As
                // we allow multiple empty lines within a table.
                if (searchedText.length() > 0) {
                    // Imagine there is an item "123" at the first row of editable table,
                    // and it is already being added into SymbolTableModel. We will come into this block,
                    // when we double click on the particular row (which makes it into editable mode), and
                    // then click on another row (which will invoke stopCellEditing). We do not have intention
                    // to make any change on current content. Hence, we should do another checking, to ensure
                    // we only pop up the warning message, if the content is being modified. _ftf.getValue().toString()
                    // is the value before modification.
                    if (searchedText.equalsIgnoreCase(_ftf.getValue().toString()) == false) {
                        // There is modification being done and it is conflicting with SymbolTableModel.
                        final String message = MessageFormat.format(MessagesBundle.getString("warning_message_duplicated_stock_template"), searchedText);
                        final String title = MessagesBundle.getString("warning_title_duplicated_stock");
                        JOptionPane.showMessageDialog(StockDatabaseJDialog.this, message, title, JOptionPane.INFORMATION_MESSAGE);
                        selectUserDefinedDatabaseTable(modelIndex2);
                        isValid = false;
                    }
                }
            }
            if (isValid) {
                try {
                    _ftf.commitEdit();
                } catch (ParseException ex) {
                    log.error(null, ex);
                }
            }                    

            return super.stopCellEditing();
        }

    }

    private MutableStockCodeAndSymbolDatabase mutableStockCodeAndSymbolDatabase = null;
    private MutableStockCodeAndSymbolDatabase result = null;
    
    private static final Log log = LogFactory.getLog(StockDatabaseJDialog.class);
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    javax.swing.JButton jButton1;
    javax.swing.JButton jButton2;
    javax.swing.JButton jButton3;
    javax.swing.JButton jButton4;
    javax.swing.JLabel jLabel1;
    javax.swing.JPanel jPanel1;
    javax.swing.JPanel jPanel2;
    javax.swing.JPanel jPanel3;
    javax.swing.JPanel jPanel4;
    javax.swing.JPanel jPanel5;
    javax.swing.JPanel jPanel6;
    javax.swing.JPanel jPanel7;
    javax.swing.JPanel jPanel8;
    javax.swing.JPanel jPanel9;
    javax.swing.JScrollPane jScrollPane1;
    javax.swing.JScrollPane jScrollPane2;
    javax.swing.JTable jTable1;
    javax.swing.JTable jTable2;
    javax.swing.JTextField jTextField1;
    org.jdesktop.swingx.JXHeader jXHeader1;
    // End of variables declaration//GEN-END:variables

}
