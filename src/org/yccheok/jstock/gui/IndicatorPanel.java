/*
 * @(#)PertPanel.java  1.0  2006-07-15
 *
 * Copyright (c) 1996-2006 by the original authors of JHotDraw
 * and all its contributors ("JHotDraw.org")
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of
 * JHotDraw.org ("Confidential Information"). You shall not disclose
 * such Confidential Information and shall use it only in accordance
 * with the terms of the license agreement you entered into with
 * JHotDraw.org.
 */

package org.yccheok.jstock.gui;

import java.util.concurrent.ExecutionException;
import org.jhotdraw.undo.*;
import org.jhotdraw.util.*;

import java.io.*;
import java.awt.*;
import java.awt.event.*;
import java.util.*;
import javax.swing.*;
import javax.swing.event.*;
import org.jhotdraw.app.action.*;
import org.jhotdraw.draw.*;
import org.jhotdraw.draw.action.*;
import org.jhotdraw.gui.*;
import javax.swing.event.*;
import org.yccheok.jstock.engine.*;
import org.yccheok.jstock.analysis.*;

import com.thoughtworks.xstream.*;

import java.util.concurrent.Executor;
import java.util.concurrent.Executors;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

/**
 * PertPanel.
 * 
 * @author Werner Randelshofer
 * @version 1.0 2006-07-15 Created.
 */
public class IndicatorPanel extends JPanel implements ChangeListener {
    private DrawingEditor editor;
    
    /** Creates new instance. */
    public IndicatorPanel() {        
        ResourceBundleUtil labels = ResourceBundleUtil.getLAFBundle("org.jhotdraw.draw.Labels");
        initComponents();
        editor = new DefaultDrawingEditor();
        editor.add(view);
        
        addCreationButtonsTo(creationToolbar, editor);

        JPopupButton pb = new JPopupButton();
        pb.setItemFont(UIManager.getFont("MenuItem.font"));
        labels.configureToolBarButton(pb, "actions");
        pb.add(new GroupAction(editor));
        pb.add(new UngroupAction(editor));
        pb.addSeparator();
        pb.add(new MoveToFrontAction(editor));
        pb.add(new MoveToBackAction(editor));
        pb.addSeparator();
        pb.add(new SelectAllAction());
        pb.add(new SelectSameAction(editor));
        pb.addSeparator();
        pb.add(new ToggleGridAction(editor));

        JMenu m = new JMenu(labels.getString("zoom"));
        JRadioButtonMenuItem rbmi;
        ButtonGroup group = new ButtonGroup();
        m.add(rbmi = new JRadioButtonMenuItem(new ZoomAction(editor, 0.1, null)));
        group.add(rbmi);
        m.add(rbmi = new JRadioButtonMenuItem(new ZoomAction(editor, 0.25, null)));
        group.add(rbmi);
        m.add(rbmi = new JRadioButtonMenuItem(new ZoomAction(editor, 0.5, null)));
        group.add(rbmi);
        m.add(rbmi = new JRadioButtonMenuItem(new ZoomAction(editor, 0.75, null)));
        group.add(rbmi);
        m.add(rbmi = new JRadioButtonMenuItem(new ZoomAction(editor, 1.0, null)));
        rbmi.setSelected(true);
        group.add(rbmi);
        m.add(rbmi = new JRadioButtonMenuItem(new ZoomAction(editor, 1.25, null)));
        group.add(rbmi);
        m.add(rbmi = new JRadioButtonMenuItem(new ZoomAction(editor, 1.5, null)));
        group.add(rbmi);
        m.add(rbmi = new JRadioButtonMenuItem(new ZoomAction(editor, 2, null)));
        group.add(rbmi);
        m.add(rbmi = new JRadioButtonMenuItem(new ZoomAction(editor, 3, null)));
        group.add(rbmi);
        m.add(rbmi = new JRadioButtonMenuItem(new ZoomAction(editor, 4, null)));
        group.add(rbmi);
        pb.add(m);
        pb.setFocusable(false);
        creationToolbar.addSeparator();
        creationToolbar.add(pb);

        view.setDrawing(createDrawing());
        
        stockTask = null;
        
        initIndicatorProjectManager();
    }
    
    /**
     * Creates a new Drawing for this Project.
     */
    private Drawing createDrawing() {
        DefaultDrawing drawing = new IndicatorDefaultDrawing();
        
        return drawing;
    }
    
    public void setDrawing(Drawing d) {
        view.setDrawing(d);
    }
    public Drawing getDrawing() {
        return view.getDrawing();
    }
    public DrawingView getView() {
        return view;
    }
    public DrawingEditor getEditor() {
        return editor;
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        toolButtonGroup = new javax.swing.ButtonGroup();
        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel4 = new javax.swing.JPanel();
        scrollPane = new javax.swing.JScrollPane();
        view = new org.jhotdraw.draw.DefaultDrawingView();
        jPanel1 = new javax.swing.JPanel();
        creationToolbar = new javax.swing.JToolBar();
        jSplitPane2 = new javax.swing.JSplitPane();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jPanel3 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jPanel9 = new javax.swing.JPanel();
        jButton3 = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jButton4 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        jComboBox1 = new AutoCompleteJComboBox();
        objectInspectorJPanel = new ObjectInspectorJPanel(new MutableStock(Utils.getEmptyStock(Code.newInstance(""), Symbol.newInstance(""))));

        setLayout(new java.awt.BorderLayout());

        // Priority give to left component.
        jSplitPane1.setResizeWeight(1.0);

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Stock Indicator"));
        jPanel4.setLayout(new java.awt.BorderLayout(5, 5));

        scrollPane.setViewportView(view);

        jPanel4.add(scrollPane, java.awt.BorderLayout.CENTER);

        jPanel1.setLayout(new java.awt.GridBagLayout());

        creationToolbar.setFloatable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel1.add(creationToolbar, gridBagConstraints);

        jPanel4.add(jPanel1, java.awt.BorderLayout.SOUTH);

        jSplitPane1.setLeftComponent(jPanel4);

        jSplitPane2.setDividerLocation(300);
        jSplitPane2.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPane2.setPreferredSize(new java.awt.Dimension(150, 368));

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Database"));
        jPanel2.setLayout(new java.awt.BorderLayout(5, 5));

        jList1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        this.jList1.setModel(new DefaultListModel());
        jList1.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jList1ValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jList1);

        jPanel2.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel3.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 0, 5, 5));
        jPanel3.setLayout(new java.awt.GridLayout(2, 1));

        jPanel8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/16x16/filenew.png"))); // NOI18N
        jButton1.setText("New...");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel8.add(jButton1);

        jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/16x16/filesave.png"))); // NOI18N
        jButton5.setText("Save");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        jPanel8.add(jButton5);

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/16x16/edit.png"))); // NOI18N
        jButton2.setText("Rename...");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel8.add(jButton2);

        jPanel3.add(jPanel8);

        jPanel9.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/16x16/editdelete.png"))); // NOI18N
        jButton3.setText("Delete");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel9.add(jButton3);

        jPanel3.add(jPanel9);

        jPanel2.add(jPanel3, java.awt.BorderLayout.SOUTH);

        jSplitPane2.setTopComponent(jPanel2);

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Stock Sample Data"));
        jPanel5.setLayout(new java.awt.BorderLayout(5, 5));

        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/16x16/player_play.png"))); // NOI18N
        jButton4.setText("Simulate");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jPanel6.add(jButton4);

        jButton6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/16x16/stop.png"))); // NOI18N
        jButton6.setText("Stop");
        jButton6.setEnabled(false);
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        jPanel6.add(jButton6);

        jPanel5.add(jPanel6, java.awt.BorderLayout.SOUTH);

        jComboBox1.setEditable(true);
        jComboBox1.setPreferredSize(new java.awt.Dimension(150, 24));
        this.jComboBox1.getEditor().getEditorComponent().addKeyListener(jComboBox1EditorComponentKeyAdapter);
        jPanel7.add(jComboBox1);

        jPanel5.add(jPanel7, java.awt.BorderLayout.NORTH);
        jPanel5.add(objectInspectorJPanel, java.awt.BorderLayout.CENTER);

        jSplitPane2.setBottomComponent(jPanel5);

        jSplitPane1.setRightComponent(jSplitPane2);

        add(jSplitPane1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
// TODO add your handling code here:
        this.jButton4.setEnabled(true);
        this.jButton6.setEnabled(false);     
        
        stop();
        
        MainFrame m = (MainFrame)javax.swing.SwingUtilities.getAncestorOfClass(MainFrame.class, IndicatorPanel.this);        
        m.setStatusBar(false, "Simulation stopped");
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
// TODO add your handling code here:
        final int select = jList1.getSelectedIndex();

        String projectName = null;
        
        if(select >= 0 && select < indicatorProjectManager.getNumOfProject()) {
            projectName = this.indicatorProjectManager.getProject(select);        
        }
        
        // String projectName = (String)this.jList1.getSelectedValue();
        
        if(projectName == null) {
            while(true) {
                projectName = JOptionPane.showInputDialog(this, "Please enter the new project name you want to save");

                if(projectName == null) return;

                if(projectName.length() == 0) {
                    JOptionPane.showMessageDialog(this, "You need to specific a project name.", "Project name needed", JOptionPane.INFORMATION_MESSAGE);
                    continue;
                }

                if(indicatorProjectManager.contains(projectName)) {
                    JOptionPane.showMessageDialog(this, "Database already contains similar project name.", "Duplicated project name", JOptionPane.INFORMATION_MESSAGE);
                    continue;
                }
                
                IndicatorDefaultDrawing drawing = (IndicatorDefaultDrawing)view.getDrawing();

                if(this.indicatorProjectManager.addProject(drawing, projectName))
                {
                    if(drawing.getOperatorIndicator().isValid()) {
                        ((javax.swing.DefaultListModel)this.jList1.getModel()).addElement(projectName);                    
                        JOptionPane.showMessageDialog(this, projectName + " has been saved successfully.", "Project saved", JOptionPane.INFORMATION_MESSAGE);
                    }
                    else {
                        ((javax.swing.DefaultListModel)this.jList1.getModel()).addElement(projectName + " *");                    
                        JOptionPane.showMessageDialog(this, projectName + " has been saved successfully. However, " + projectName + " is not valid yet.", "Project saved", JOptionPane.INFORMATION_MESSAGE);
                    }
                    
                    this.jList1.setSelectedIndex(this.jList1.getModel().getSize() - 1);
                    return;
                }
                else
                {
                    JOptionPane.showMessageDialog(this, "You have provided an invalid project name.", "Invalid project name", JOptionPane.INFORMATION_MESSAGE);
                    continue;
                }
            }
        } else {
            IndicatorDefaultDrawing drawing = (IndicatorDefaultDrawing)view.getDrawing();
            
            if(indicatorProjectManager.addProject(drawing, projectName)) {
                if(drawing.getOperatorIndicator().isValid()) {
                    ((javax.swing.DefaultListModel)this.jList1.getModel()).setElementAt(projectName, select);                    
                    JOptionPane.showMessageDialog(this, projectName + " has been saved successfully.", "Project saved", JOptionPane.INFORMATION_MESSAGE);
                }
                else {
                    ((javax.swing.DefaultListModel)this.jList1.getModel()).setElementAt(projectName + " *", select);                    
                    JOptionPane.showMessageDialog(this, projectName + " has been saved successfully. However, " + projectName + " is not valid yet.", "Project saved", JOptionPane.INFORMATION_MESSAGE);
                }
            }
            else {
                JOptionPane.showMessageDialog(this, "Unable to save project " + projectName + " due to unknown reason.", "Unable to save project", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jList1ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jList1ValueChanged
// TODO add your handling code here:
        
        // When the user release the mouse button and completes the selection,
        // getValueIsAdjusting() becomes false        
        if (evt.getValueIsAdjusting()) return;
        
        int select = jList1.getSelectedIndex();
        
        if(select < 0 || select >= indicatorProjectManager.getNumOfProject()) {
            this.view.setDrawing(this.createDrawing());
            return;
        }
        
        // final String project = (String)this.jList1.getModel().getElementAt(select);
        String project = this.indicatorProjectManager.getProject(select);
        
        IndicatorDefaultDrawing indicatorDefaultDrawing = this.indicatorProjectManager.getIndicatorDefaultDrawing(project);
        if(indicatorDefaultDrawing != null) {
            view.setDrawing(indicatorDefaultDrawing);
        }
        else {
            if(JOptionPane.showConfirmDialog(this, "Project " + project + " is corrupted. Do you want to remove it?", project + " corrupted", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION)
            {
                jButton3ActionPerformed(null);
            }
            else
            {
                this.view.setDrawing(this.createDrawing());
            }
        }       
    }//GEN-LAST:event_jList1ValueChanged

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
// TODO add your handling code here:   
        final MainFrame m = (MainFrame)javax.swing.SwingUtilities.getAncestorOfClass(MainFrame.class, this);
        final StockCodeAndSymbolDatabase stockCodeAndSymbolDatabase = m.getStockCodeAndSymbolDatabase();
        
        if(stockCodeAndSymbolDatabase == null) {
            javax.swing.JOptionPane.showMessageDialog(this, "We haven't connected to stock server.", "Not Connected", javax.swing.JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        
        IndicatorDefaultDrawing indicatorDefaultDrawing = (IndicatorDefaultDrawing)this.view.getDrawing();
        OperatorIndicator operatorIndicator = indicatorDefaultDrawing.getOperatorIndicator();
        
        if(operatorIndicator.isValid() == false)
        {
            JOptionPane.showMessageDialog(this, "An indicator must has only 1 stock alert output with 1 input connection and 0 output connection.", "Invalid indicator", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        
        Object o = ((ObjectInspectorJPanel)this.objectInspectorJPanel).getBean();
        MutableStock mutableStock = (MutableStock)o;
        final Stock stock = mutableStock.getStock();
        Code searchedStockCode = stockCodeAndSymbolDatabase.searchStockCode(stock.getCode().toString());
        
        if(searchedStockCode == null) {
            JOptionPane.showMessageDialog(this, "You need to first select a stock to be simulated.", "Stock needed", JOptionPane.INFORMATION_MESSAGE);
            return;            
        }
        else {
            if(searchedStockCode.equals(stock.getCode()) == false) {
                JOptionPane.showMessageDialog(this, "You need to first select a stock to be simulated.", "Stock needed", JOptionPane.INFORMATION_MESSAGE);
                return;                
            }
        }
        
        this.jButton4.setEnabled(false);
        this.jButton6.setEnabled(true);
        
        if(simulationThread != null) {
            simulationThread.interrupt();
            try {
                simulationThread.join();
            }
            catch(InterruptedException exp) {
                log.error("", exp);
            }
        }
        
        simulationThread = new Thread(new Runnable() {
            public void run() {
                IndicatorPanel.this.simulate(stock.getCode());
            }
        });
        
        simulationThread.start();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
// TODO add your handling code here:

        final int index = this.jList1.getSelectedIndex();
        
        if(index < 0 || index >= indicatorProjectManager.getNumOfProject()) {
            JOptionPane.showMessageDialog(this, "You must at least select a project in order to delete.", "Select needed", JOptionPane.INFORMATION_MESSAGE);
            return;
        } 
                                
        indicatorProjectManager.removeProject(indicatorProjectManager.getProject(index));
        
        DefaultListModel defaultListModel = (DefaultListModel)this.jList1.getModel();
        defaultListModel.removeElementAt(index);
        
        if((index - 1) < 0) {
            this.jList1.clearSelection();
        }
        else {
            this.jList1.setSelectedIndex(index - 1);
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
// TODO add your handling code here:
        final int select = jList1.getSelectedIndex();
        
        if(select < 0 || select >= indicatorProjectManager.getNumOfProject()) {
            JOptionPane.showMessageDialog(this, "You must at least select a project in order to rename.", "Select needed", JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        String oldProjectName = null;
        oldProjectName = this.indicatorProjectManager.getProject(select);

        if(oldProjectName == null) {
            JOptionPane.showMessageDialog(this, "You must at least select a project in order to rename.", "Select needed", JOptionPane.INFORMATION_MESSAGE);
            return;
        }                

        boolean isValid = true;
        
        String stringAtList = (String)this.jList1.getSelectedValue();
        if(stringAtList.equals(oldProjectName) == false)
        {
            isValid = false;
        }
        
        String newProjectName = null;
        
        while(true) {
            newProjectName = JOptionPane.showInputDialog(this, "Please enter the new project name you wish to rename to", oldProjectName);
            
            if(newProjectName == null) return;
            
            if(newProjectName.length() == 0) {
                JOptionPane.showMessageDialog(this, "You need to specific a project name.", "Project name needed", JOptionPane.INFORMATION_MESSAGE);
                continue;
            }

            if(indicatorProjectManager.contains(newProjectName)) {
                JOptionPane.showMessageDialog(this, "Database already contains similar project name.", "Duplicated project name", JOptionPane.INFORMATION_MESSAGE);
                continue;
            }
            
            if(this.indicatorProjectManager.renameProject(newProjectName, oldProjectName))
            {
                final DefaultListModel defaultListModel = (DefaultListModel)this.jList1.getModel();
                if(isValid)
                    defaultListModel.setElementAt(newProjectName, select);
                else
                    defaultListModel.setElementAt(newProjectName + " *", select);
                
                // Update the project.xml as well.
                IndicatorPanel.this.saveIndicatorProjectManager();
            }
            else
            {
                JOptionPane.showMessageDialog(this, "Unable to rename project from " + oldProjectName + " to " + newProjectName + " due to unknown reason.", "Unable to rename project", JOptionPane.ERROR_MESSAGE);
            }
            
            break;
        }
        
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
// TODO add your handling code here:
        String projectName = null;        
        
        while(true) {
            projectName = JOptionPane.showInputDialog(this, "Please enter the new project name");

            if(projectName == null) return;

            if(projectName.length() == 0) {
                JOptionPane.showMessageDialog(this, "You need to specific a project name.", "Project name needed", JOptionPane.WARNING_MESSAGE);
                continue;
            }
            
            if(indicatorProjectManager.contains(projectName)) {
                JOptionPane.showMessageDialog(this, "Database already contains " + projectName, "Duplicated project name", JOptionPane.WARNING_MESSAGE);
                continue;
            }
            
            IndicatorDefaultDrawing newDrawing = (IndicatorDefaultDrawing)createDrawing();
            if(this.indicatorProjectManager.addProject(newDrawing, projectName))
            {
                // New project will always invalid.
                ((javax.swing.DefaultListModel)this.jList1.getModel()).addElement(projectName + " *");
                this.jList1.setSelectedIndex(this.jList1.getModel().getSize() - 1);
                return;
            }
            else
            {
                JOptionPane.showMessageDialog(this, "You have provided an invalid project name.", "Invalid project name", JOptionPane.WARNING_MESSAGE);
                continue;
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void addCreationButtonsTo(JToolBar tb, final DrawingEditor editor) {
        // AttributeKeys for the entitie sets
        HashMap<AttributeKey,Object> attributes;
        
        ResourceBundleUtil labels = ResourceBundleUtil.getLAFBundle("org.yccheok.jstock.data.Labels");
        ResourceBundleUtil drawLabels = ResourceBundleUtil.getLAFBundle("org.jhotdraw.draw.Labels");
        
        //ToolBarButtonFactory.addSelectionToolTo(tb, editor);
        ButtonFactory.addSelectionToolTo(tb, editor, createDrawingActions(editor), createSelectionActions(editor));
        tb.addSeparator();
        
        attributes = new HashMap<AttributeKey,Object>();
        attributes.put(AttributeKeys.FILL_COLOR, Color.white);
        attributes.put(AttributeKeys.STROKE_COLOR, Color.black);
        attributes.put(AttributeKeys.TEXT_COLOR, Color.black);

        ButtonFactory.addToolTo(tb, editor, new OperatorFigureCreationTool("org.yccheok.jstock.gui.LogicalOperatorFigure", attributes), "createLogical", labels);
        ButtonFactory.addToolTo(tb, editor, new OperatorFigureCreationTool("org.yccheok.jstock.gui.EqualityOperatorFigure", attributes), "createEquality", labels);        
        ButtonFactory.addToolTo(tb, editor, new OperatorFigureCreationTool("org.yccheok.jstock.gui.ArithmeticOperatorFigure", attributes), "createArithmetic", labels);
        ButtonFactory.addToolTo(tb, editor, new OperatorFigureCreationTool("org.yccheok.jstock.gui.DoubleConstantOperatorFigure", attributes), "createDoubleConstant", labels);
        tb.addSeparator();
        ButtonFactory.addToolTo(tb, editor, new OperatorFigureCreationTool("org.yccheok.jstock.gui.StockRelativeHistoryOperatorFigure", attributes), "createStockRelativeHistory", labels);
        ButtonFactory.addToolTo(tb, editor, new OperatorFigureCreationTool("org.yccheok.jstock.gui.StockHistoryOperatorFigure", attributes), "createStockHistory", labels);
        ButtonFactory.addToolTo(tb, editor, new OperatorFigureCreationTool("org.yccheok.jstock.gui.StockOperatorFigure", attributes), "createStock", labels);        
        tb.addSeparator();
        ButtonFactory.addToolTo(tb, editor, new OperatorFigureCreationTool("org.yccheok.jstock.gui.SinkOperatorFigure", attributes), "createSink", labels);
        tb.addSeparator();
        
        attributes = new HashMap<AttributeKey,Object>();
        attributes.put(AttributeKeys.STROKE_COLOR, Color.black);
        attributes.put(AttributeKeys.TEXT_COLOR, Color.black);
        attributes.put(AttributeKeys.FONT_BOLD, true);
        attributes.put(AttributeKeys.FILL_COLOR, new Color(255, 204, 0));
        ButtonFactory.addToolTo(tb, editor, new TextAreaTool(new TextAreaFigure(), attributes), "createText", drawLabels);
    }
    
    private static Collection<Action> createDrawingActions(DrawingEditor editor) {
        LinkedList<Action> a = new LinkedList<Action>();        
        return a;
    }
    
    private static Collection<Action> createSelectionActions(DrawingEditor editor) {
        LinkedList<Action> a = new LinkedList<Action>();
        a.add(new PropertiesAction(editor));
        a.add(null);
        a.add(new DeleteAction(editor));
        return a;
    }
    
    /**
     * Writes the project to the specified file.
     */
    public void write(String projectName) throws IOException {
        IndicatorDefaultDrawing drawing = (IndicatorDefaultDrawing)view.getDrawing();
        // drawing.write(projectName);
    }
    
    /**
     * Reads the project from the specified file.
     */
    public void read(String projectName) throws IOException {
        final IndicatorDefaultDrawing drawing = (IndicatorDefaultDrawing)createDrawing();
        // drawing.read(projectName);
        SwingUtilities.invokeLater(new Runnable() { public void run() {
            view.setDrawing(drawing);
        }});
    }
    
    public void setStockCodeAndSymbolDatabase(StockCodeAndSymbolDatabase stockCodeAndSymbolDatabase) {
        ((AutoCompleteJComboBox)jComboBox1).setStockCodeAndSymbolDatabase(stockCodeAndSymbolDatabase);
    }
    
    public void initjComboBox1EditorComponentKeyListerner() {
        KeyListener[] listeners = this.jComboBox1.getEditor().getEditorComponent().getKeyListeners();
        
        for(KeyListener listener : listeners) {
            if(listener == jComboBox1EditorComponentKeyAdapter) {
                return;
            }
        }
        
        // Bug in Java 6. Most probably this listener had been removed during look n feel updating, reassign!
        this.jComboBox1.getEditor().getEditorComponent().addKeyListener(jComboBox1EditorComponentKeyAdapter);
        log.info("Reassign key adapter to combo box");
    }
    
    private KeyAdapter getjComboBox1EditorComponentKeyAdapter() {
        return new KeyAdapter() {
            public void keyReleased(KeyEvent e) {
                if(KeyEvent.VK_ENTER == e.getKeyCode()) {
                    String stock = IndicatorPanel.this.jComboBox1.getEditor().getItem().toString();
                    
                    if(stock.length() > 0) {
                        MainFrame m = (MainFrame)javax.swing.SwingUtilities.getAncestorOfClass(MainFrame.class, IndicatorPanel.this);
                        
                        if(m == null) return;
                        
                        final StockCodeAndSymbolDatabase stockCodeAndSymbolDatabase = m.getStockCodeAndSymbolDatabase();
                        
                        Code code = stockCodeAndSymbolDatabase.searchStockCode(stock);
                        Symbol symbol = null;
                            
                        if(code != null) {
                            symbol = stockCodeAndSymbolDatabase.codeToSymbol(code);                            
                        }
                        else {
                            symbol = stockCodeAndSymbolDatabase.searchStockSymbol(stock);
                                
                            if(symbol != null) {                                   
                                code = stockCodeAndSymbolDatabase.symbolToCode(symbol);

                            }
                        }
                        
                        if(code != null && symbol != null) {
                            if(stockTask != null) {
                                stockTask._stop();
                                
                                try {
                                    stockTask.get();
                                } catch (InterruptedException exp) {
                                    log.error("", exp);
                                } catch (ExecutionException exp) {
                                    log.error("", exp);
                                }                                
                            }
                            
                            stockTask = new StockTask(code, symbol);
                            stockTask.execute();
                        }
                        
                    }   /* if(stock.length() > 0) */
                }   /* if(KeyEvent.VK_ENTER == e.getKeyCode()) */
            }   /* public void keyReleased(KeyEvent e) */
        };
    }
    
    private class StockTask extends SwingWorker<Boolean, Stock> {
        private volatile boolean runnable = true;
        
        final Code code;
        final Symbol symbol;
        
        public StockTask(Code code, Symbol symbol) {
            this.code = code;
            this.symbol = symbol;
        }
        
        public void _stop() {
            runnable = false;
        }
        
        public Boolean doInBackground() {
            Boolean success = false;
            Stock s = null;
            int tries = 0;
            
            MainFrame m = (MainFrame)javax.swing.SwingUtilities.getAncestorOfClass(MainFrame.class, IndicatorPanel.this);

            if(m == null) {
                publish(s);
                return success; 
            }
            
            m.setStatusBar(true, "Stock sample data retrieving in progress...");
            
            java.util.List<StockServerFactory> stockServerFactories = m.getStockServerFactory();
            
            while(!isCancelled() && !success && runnable) {
                for (StockServerFactory factory : stockServerFactories) {
                    
                    StockServer server = factory.getStockServer();
                    
                    try {
                        s = server.getStock(code);
                        success = true;
                        break;
                    }
                    catch(StockNotFoundException exp) {
                        log.error("", exp);
                    }

                    if(isCancelled() || !runnable) {
                        break;
                    }
                }
                
                tries++;
                
                // We had tried NUM_OF_RETRY times, but still failed. Abort.
                if(tries >= NUM_OF_RETRY) break;

            }
            
            publish(s);
            return success;
         }

        @Override
         protected void process(java.util.List<Stock> stocks) {
             for (Stock stock : stocks) {
                 MainFrame m = (MainFrame)javax.swing.SwingUtilities.getAncestorOfClass(MainFrame.class, IndicatorPanel.this);
                 
                if(stock != null) {
                    ((ObjectInspectorJPanel)objectInspectorJPanel).setBean(new MutableStock(stock));
                    if(m != null)
                        m.setStatusBar(false, "Stock sample data retrieved success");
                }
                else {
                    if(m != null)
                        m.setStatusBar(false, "Stock sample data retrieved failed");
                }
             }
         }        
    }
    
    public void stop()
    {
        if(stockTask != null) {                
            stockTask._stop();

            try {
                stockTask.get();
            } catch (InterruptedException exp) {
                log.error("", exp);
            } catch (ExecutionException exp) {
                log.error("", exp);
            }

            stockTask = null;

            log.info("Terminated stock task");
        }

        if(this.simulationThread != null) {
            this.simulationThread.interrupt();

            try {
                this.simulationThread.join();
            }
            catch(InterruptedException exp) {
                log.error("", exp);
            }

            this.simulationThread = null;
            
            log.info("Terminated simulation thread");
        }        
    }
    
    // Run by worker thread only.
    private void simulate(final Code code) {                
        MainFrame m = (MainFrame)javax.swing.SwingUtilities.getAncestorOfClass(MainFrame.class, IndicatorPanel.this);

        // First, check whether there is a need to get history.
        final IndicatorDefaultDrawing indicatorDefaultDrawing = (IndicatorDefaultDrawing)this.view.getDrawing();
        final OperatorIndicator operatorIndicator = indicatorDefaultDrawing.getOperatorIndicator();
        final Duration historyDuration = operatorIndicator.getNeededStockHistoryDuration();

        if(operatorIndicator.isStockHistoryServerNeeded()) {
            m.setStatusBar(true, "Stock history retrieving in progress...");

            // Avoid from using old history monitor. Their duration are not the same.
            final Duration oldDuration = stockHistoryMonitor.getDuration();
            if (oldDuration.isContains(historyDuration) == false)
            {
                this.initStockHistoryMonitor(m.getStockServerFactory());
                this.stockHistoryMonitor.setDuration(historyDuration);
            }

            // Action!
            StockHistoryServer stockHistoryServer = this.stockHistoryMonitor.getStockHistoryServer(code);

            if(stockHistoryServer == null) {

                final java.util.concurrent.CountDownLatch countDownLatch = new java.util.concurrent.CountDownLatch(1);

                org.yccheok.jstock.engine.Observer<StockHistoryMonitor, StockHistoryMonitor.StockHistoryRunnable> observer = new org.yccheok.jstock.engine.Observer<StockHistoryMonitor, StockHistoryMonitor.StockHistoryRunnable>() {
                    @Override
                    public void update(StockHistoryMonitor monitor, StockHistoryMonitor.StockHistoryRunnable runnable)
                    {
                        if(runnable.getCode().equals(code)) {
                            countDownLatch.countDown();
                        }
                    }
                };

                this.stockHistoryMonitor.attach(observer);

                this.stockHistoryMonitor.addStockCode(code);

                try {
                    countDownLatch.await();
                }
                catch(java.lang.InterruptedException exp) {
                    log.error("", exp);
                    return;
                }

                this.stockHistoryMonitor.dettach(observer);

                stockHistoryServer = this.stockHistoryMonitor.getStockHistoryServer(code);
            }

            if(stockHistoryServer == null) {
                this.jButton4.setEnabled(true);
                this.jButton6.setEnabled(false);     

                m.setStatusBar(false, "Database not found");            
                return;
            }

            if(Thread.interrupted() || simulationThread != Thread.currentThread())
                return;

            m.setStatusBar(true, "Stock history information calculation in progress...");

            operatorIndicator.setStockHistoryServer(stockHistoryServer);
        }   /* if(operatorIndicator.isStockHistoryServerNeeded()) { */
        
        if(Thread.interrupted() || simulationThread != Thread.currentThread())
            return;
        
        m.setStatusBar(true, "Real time stock information calculation in progress...");

        Object o = ((ObjectInspectorJPanel)this.objectInspectorJPanel).getBean();
        MutableStock mutableStock = (MutableStock)o;
        Stock stock = mutableStock.getStock();
        
        operatorIndicator.preCalculate();
        
        if(Thread.interrupted() || simulationThread != Thread.currentThread())
            return;
        
        m.setStatusBar(true, "Final calculation...");
   
        long startTime = System.nanoTime();
        
        operatorIndicator.setStock(stock);
        
        operatorIndicator.isTriggered();
   
        long estimatedTime = System.nanoTime() - startTime;

        if(Thread.interrupted() || simulationThread != Thread.currentThread())
            return;
        
        m.setStatusBar(false, "Simulation done with time taken " + ((double)estimatedTime / (double)1000000.0) + "ms");

        this.jButton4.setEnabled(true);
        this.jButton6.setEnabled(false);
    }
    
    @Override
    public void stateChanged(javax.swing.event.ChangeEvent evt) {        
        JTabbedPane pane = (JTabbedPane)evt.getSource();
        if(pane.getSelectedComponent() == this) {
            final MainFrame m = (MainFrame)javax.swing.SwingUtilities.getAncestorOfClass(MainFrame.class, IndicatorPanel.this);
            final String password = Utils.decrypt(m.getJStockOptions().getIndicatorPassword());
            
            boolean status = false;
            
            if(password.length() > 0 && (passwordSuccessOnce == false)) {
                PasswordInputJDialog passwordInputJDialog = new PasswordInputJDialog(m, true);
                if(passwordInputJDialog.doModal())
                {
                    if(passwordInputJDialog.isPasswordMatch(password) == false) {
                        JOptionPane.showMessageDialog(this, "Password not match. You are not allowed to use indicator editor.", "Wrong password", JOptionPane.WARNING_MESSAGE);
                        status = false;
                    }
                    else {
                        passwordSuccessOnce = true;
                        status = true;
                    }
                }
                else {
                    // Cancel
                    status = false;
                }
            }
            else
            {
                status = true;
            }
            
            jList1.setEnabled(status);
            jButton1.setEnabled(status);
            jButton5.setEnabled(status);
            jButton2.setEnabled(status);
            jButton3.setEnabled(status);
        }
        else {
            /* We will not call stop, to avoid GUI from being freezed. But, is it
             * safe to do so?
             */

            // Simulate and stop buttons.
            this.jButton4.setEnabled(true);
            this.jButton6.setEnabled(false);
        }
    }
    
    public void initIndicatorProjectManager() {
        try {
            File f = new File(org.yccheok.jstock.gui.Utils.getUserDataDirectory() + "indicator" + File.separator + "project.xml");

            XStream xStream = new XStream();
            InputStream inputStream = new java.io.FileInputStream(f);
            indicatorProjectManager = (IndicatorProjectManager)xStream.fromXML(inputStream);
            
            log.info("indicatorProjectManager loaded from " + f.toString() + " successfully.");            
        }
        catch(java.io.FileNotFoundException exp) {
            log.error("", exp);
            indicatorProjectManager = new IndicatorProjectManager(org.yccheok.jstock.gui.Utils.getUserDataDirectory() + "indicator");
        }
        catch(com.thoughtworks.xstream.core.BaseException exp) {
            log.error("", exp);
            indicatorProjectManager = new IndicatorProjectManager(org.yccheok.jstock.gui.Utils.getUserDataDirectory() + "indicator");
        }
                        
        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                DefaultListModel defaultListModel = (DefaultListModel)jList1.getModel();
                for(int i = 0; i < indicatorProjectManager.getNumOfProject(); i++) {
                    OperatorIndicator operatorIndicator = indicatorProjectManager.getOperatorIndicator(indicatorProjectManager.getProject(i));
                    if(operatorIndicator == null) {
                        defaultListModel.addElement(indicatorProjectManager.getProject(i) + " *");
                    }
                    else {
                        if(operatorIndicator.isValid() == false) {
                            defaultListModel.addElement(indicatorProjectManager.getProject(i) + " *");
                        }
                        else {
                            defaultListModel.addElement(indicatorProjectManager.getProject(i));
                        }
                    }
                }
            }
        });
    }
    
    public boolean saveIndicatorProjectManager() {
        File f = new File(org.yccheok.jstock.gui.Utils.getUserDataDirectory() + "indicator" + File.separator + "project.xml");
                
        XStream xStream = new XStream();   
        
        try {
            OutputStream outputStream = new FileOutputStream(f);
            xStream.toXML(indicatorProjectManager, outputStream);  
        }
        catch(java.io.FileNotFoundException exp) {
            log.error("", exp);
            return false;
        }
        catch(com.thoughtworks.xstream.core.BaseException exp) {
            log.error("", exp);
            return false;
        }
                      
        return true;
    }
    
    public IndicatorProjectManager getIndicatorProjectManager() {
        return indicatorProjectManager;
    }

    public void initStockHistoryMonitor(java.util.List<StockServerFactory> stockServerFactories) {
        if(stockHistoryMonitor != null) {
            final StockHistoryMonitor oldStockHistoryMonitor = stockHistoryMonitor;
            Utils.getZoombiePool().execute(new Runnable() {
                public void run() {
                    log.info("Prepare to shut down " + oldStockHistoryMonitor + "...");
                    oldStockHistoryMonitor.clearStockCodes();
                    oldStockHistoryMonitor.dettachAll();
                    oldStockHistoryMonitor.stop();
                    log.info("Shut down " + oldStockHistoryMonitor + " peacefully.");
                }
            });
        }

        this.stockHistoryMonitor = new StockHistoryMonitor(NUM_OF_THREADS_HISTORY_MONITOR);

        for(StockServerFactory factory : stockServerFactories) {
            stockHistoryMonitor.addStockServerFactory(factory);
        }

        // No StockHistorySerializer at this moment, either read or write. This is because
        // (1) Read - If the duration of the history selected in Real-Time panel is shorter than
        // indicators's, we will be in trouble.
        // (2) Write - If the duration of the indicator's is shorter than Real-Time panel, we will
        // be in trouble again.
        //
        // Currently, we have no way but disable it.
    }

    private StockHistoryMonitor stockHistoryMonitor = null;

    private static final int NUM_OF_THREADS_HISTORY_MONITOR = 1;

    private IndicatorProjectManager indicatorProjectManager;
    
    private static final Log log = LogFactory.getLog(IndicatorPanel.class);
    
    private StockTask stockTask;
    
    // As workaround to overcome the bug, when new look n feel being applied during runtime, the original
    // KeyListner for ComboBoxEditor will be removed.
    private final KeyListener jComboBox1EditorComponentKeyAdapter = getjComboBox1EditorComponentKeyAdapter();
    
    private Thread simulationThread;
    
    private boolean passwordSuccessOnce = false;

    private static final int NUM_OF_RETRY = 3;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToolBar creationToolbar;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JList jList1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JSplitPane jSplitPane2;
    private javax.swing.JPanel objectInspectorJPanel;
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.ButtonGroup toolButtonGroup;
    private org.jhotdraw.draw.DefaultDrawingView view;
    // End of variables declaration//GEN-END:variables
    
}
