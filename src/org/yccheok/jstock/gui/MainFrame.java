/*
 * MainFrame.java
 *
 * Created on March 31, 2007, 7:34 PM
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 *
 * Copyright (C) 2007 Cheok YanCheng <yccheok@yahoo.com>
 */

package org.yccheok.jstock.gui;

import java.net.SocketException;
import javax.swing.*;
import javax.swing.table.*;
import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.util.*;
import javax.swing.filechooser.*;

import org.yccheok.jstock.engine.*;
import com.thoughtworks.xstream.*;

import java.io.IOException;
import java.net.InetAddress;
import org.apache.commons.net.TimeTCPClient;
import org.apache.commons.net.TimeUDPClient;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import org.apache.poi.poifs.filesystem.POIFSFileSystem;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.hssf.util.*;

import javax.help.*;
import javax.swing.*;
import java.net.URL;

/**
 *
 * @author  doraemon
 */
public class MainFrame extends javax.swing.JFrame {
    
    /** Creates new form MainFrame */

    public MainFrame() {
        initComponents();
        
        createLookAndFeelMenuItem();
        
        createStockIndicatorEditor();
        createIndicatorScannerJPanel();
        createIconsAndToolTipTextForJTabbedPane();
        
        this.createSystemTrayIcon();
        
        this.initJStockOptions();
        this.initUsernameAndPassword();
        this.initTableHeaderToolTips();               
        this.initjComboBox1EditorComponentKeyListerner();
        this.initMyJXStatusBarImageLabelMouseAdapter();
        this.initStockServerFactories();
        this.initStockCodeAndSymbolDatabase();
        this.initMarketThread();
        this.initRealTimeStockMonitor();  
        this.initRealTimeStocks();
        this.initStockHistoryMonitor();
        //this.spawnTimeServerThread();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel6 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel8 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jComboBox1 = new AutoCompleteJComboBox();
        jPanel10 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jLabel27 = new org.yccheok.jstock.gui.GradientJLabel(new Color(111, 148, 182), new Color(184, 207, 229), (float)0.9);
        jLabel21 = new org.yccheok.jstock.gui.GradientJLabel(new Color(111, 148, 182), new Color(184, 207, 229), (float)0.9);
        jLabel20 = new org.yccheok.jstock.gui.GradientJLabel(new Color(111, 148, 182), new Color(184, 207, 229), (float)0.9);
        jLabel22 = new org.yccheok.jstock.gui.GradientJLabel(new Color(111, 148, 182), new Color(184, 207, 229), (float)0.9);
        jLabel28 = new org.yccheok.jstock.gui.GradientJLabel(new Color(111, 148, 182), new Color(184, 207, 229), (float)0.9);
        jLabel36 = new org.yccheok.jstock.gui.GradientJLabel(new Color(111, 148, 182), new Color(184, 207, 229), (float)0.9);
        jLabel31 = new org.yccheok.jstock.gui.GradientJLabel(new Color(111, 148, 182), new Color(184, 207, 229), (float)0.9);
        jLabel18 = new org.yccheok.jstock.gui.GradientJLabel(new Color(111, 148, 182), new Color(184, 207, 229), (float)0.9);
        jLabel24 = new javax.swing.JLabel();
        jLabel33 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        jLabel35 = new javax.swing.JLabel();
        jLabel37 = new javax.swing.JLabel();
        jLabel23 = new org.yccheok.jstock.gui.GradientJLabel(new Color(111, 148, 182), new Color(184, 207, 229), (float)0.9);
        jLabel25 = new javax.swing.JLabel();
        jLabel34 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        jLabel38 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jMenuBar2 = new javax.swing.JMenuBar();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu5 = new javax.swing.JMenu();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JSeparator();
        jMenuItem5 = new javax.swing.JMenuItem();

        getContentPane().setLayout(new java.awt.BorderLayout(5, 5));

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("JStock - KLSE Real-Time Monitor");
        setFont(new java.awt.Font("Tahoma", 0, 12));
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowDeiconified(java.awt.event.WindowEvent evt) {
                formWindowDeiconified(evt);
            }
            public void windowIconified(java.awt.event.WindowEvent evt) {
                formWindowIconified(evt);
            }
        });

        jPanel6.setLayout(new java.awt.BorderLayout(5, 5));

        jPanel6.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));
        this.jPanel6.add(statusBar, java.awt.BorderLayout.SOUTH);
        getContentPane().add(jPanel6, java.awt.BorderLayout.SOUTH);

        jTabbedPane1.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));
        jTabbedPane1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jTabbedPane1StateChanged(evt);
            }
        });

        jPanel8.setLayout(new java.awt.BorderLayout(5, 5));

        jTable1.setAutoCreateRowSorter(true);
        jTable1.setFont(new java.awt.Font("Tahoma", 1, 12));
        jTable1.setModel(new StockTableModel());
        jTable1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        this.jTable1.setDefaultRenderer(Number.class, new StockTableCellRenderer());
        this.jTable1.setDefaultRenderer(Double.class, new StockTableCellRenderer());
        this.jTable1.setDefaultRenderer(Object.class, new StockTableCellRenderer());

        this.jTable1.getModel().addTableModelListener(this.getTableModelListener());

        this.jTable1.getTableHeader().addMouseListener(new TableColumnSelectionPopupListener());
        this.jTable1.addMouseListener(new TableRowPopupListener());
        jTable1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTable1KeyPressed(evt);
            }
        });

        jScrollPane1.setViewportView(jTable1);

        jPanel8.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jLabel1.setText("Stock");
        jPanel1.add(jLabel1);

        jComboBox1.setEditable(true);
        jComboBox1.setPreferredSize(new java.awt.Dimension(110, 24));
        this.jComboBox1.getEditor().getEditorComponent().addKeyListener(jComboBox1EditorComponentKeyAdapter);
        jPanel1.add(jComboBox1);

        jPanel8.add(jPanel1, java.awt.BorderLayout.NORTH);

        jPanel10.setLayout(new java.awt.BorderLayout());

        jPanel7.setLayout(new java.awt.GridLayout(3, 7, 2, 2));

        jPanel7.setBackground(new java.awt.Color(255, 255, 255));
        jPanel7.setBorder(new org.jdesktop.swingx.border.DropShadowBorder(true));
        jLabel27.setBackground(new java.awt.Color(184, 207, 229));
        jLabel27.setForeground(new java.awt.Color(255, 255, 255));
        jPanel7.add(jLabel27);

        jLabel21.setBackground(new java.awt.Color(184, 207, 229));
        jLabel21.setForeground(new java.awt.Color(255, 255, 255));
        jLabel21.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel21.setText("3rd Buy");
        jLabel21.setBorder(javax.swing.BorderFactory.createEmptyBorder(2, 2, 2, 2));
        jLabel21.setFocusTraversalPolicyProvider(true);
        jLabel21.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jPanel7.add(jLabel21);

        jLabel20.setBackground(new java.awt.Color(184, 207, 229));
        jLabel20.setForeground(new java.awt.Color(255, 255, 255));
        jLabel20.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel20.setText("2nd Buy");
        jLabel20.setBorder(javax.swing.BorderFactory.createEmptyBorder(2, 2, 2, 2));
        jLabel20.setFocusTraversalPolicyProvider(true);
        jLabel20.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jPanel7.add(jLabel20);

        jLabel22.setBackground(new java.awt.Color(184, 207, 229));
        jLabel22.setForeground(new java.awt.Color(255, 255, 255));
        jLabel22.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel22.setText("1st Buy");
        jLabel22.setBorder(javax.swing.BorderFactory.createEmptyBorder(2, 2, 2, 2));
        jLabel22.setFocusTraversalPolicyProvider(true);
        jLabel22.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jPanel7.add(jLabel22);

        jLabel28.setBackground(new java.awt.Color(184, 207, 229));
        jLabel28.setForeground(new java.awt.Color(255, 255, 255));
        jLabel28.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel28.setText("1st Sell");
        jLabel28.setBorder(javax.swing.BorderFactory.createEmptyBorder(2, 2, 2, 2));
        jPanel7.add(jLabel28);

        jLabel36.setBackground(new java.awt.Color(184, 207, 229));
        jLabel36.setForeground(new java.awt.Color(255, 255, 255));
        jLabel36.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel36.setText("2nd Sell");
        jLabel36.setBorder(javax.swing.BorderFactory.createEmptyBorder(2, 2, 2, 2));
        jPanel7.add(jLabel36);

        jLabel31.setBackground(new java.awt.Color(184, 207, 229));
        jLabel31.setForeground(new java.awt.Color(255, 255, 255));
        jLabel31.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel31.setText("3rd Sell");
        jLabel31.setBorder(javax.swing.BorderFactory.createEmptyBorder(2, 2, 2, 2));
        jPanel7.add(jLabel31);

        jLabel18.setBackground(new java.awt.Color(184, 207, 229));
        jLabel18.setForeground(new java.awt.Color(255, 255, 255));
        jLabel18.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel18.setText("Price");
        jPanel7.add(jLabel18);

        jLabel24.setBackground(new java.awt.Color(255, 255, 204));
        jLabel24.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel24.setOpaque(true);
        jPanel7.add(jLabel24);

        jLabel33.setBackground(new java.awt.Color(255, 255, 204));
        jLabel33.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel33.setOpaque(true);
        jPanel7.add(jLabel33);

        jLabel19.setBackground(new java.awt.Color(255, 255, 204));
        jLabel19.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel19.setOpaque(true);
        jPanel7.add(jLabel19);

        jLabel32.setBackground(new java.awt.Color(255, 255, 204));
        jLabel32.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel32.setOpaque(true);
        jPanel7.add(jLabel32);

        jLabel35.setBackground(new java.awt.Color(255, 255, 204));
        jLabel35.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel35.setOpaque(true);
        jPanel7.add(jLabel35);

        jLabel37.setBackground(new java.awt.Color(255, 255, 204));
        jLabel37.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel37.setOpaque(true);
        jPanel7.add(jLabel37);

        jLabel23.setBackground(new java.awt.Color(184, 207, 229));
        jLabel23.setForeground(new java.awt.Color(255, 255, 255));
        jLabel23.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel23.setText("Qty");
        jPanel7.add(jLabel23);

        jLabel25.setBackground(new java.awt.Color(255, 255, 204));
        jLabel25.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel25.setOpaque(true);
        jPanel7.add(jLabel25);

        jLabel34.setBackground(new java.awt.Color(255, 255, 204));
        jLabel34.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel34.setOpaque(true);
        jPanel7.add(jLabel34);

        jLabel26.setBackground(new java.awt.Color(255, 255, 204));
        jLabel26.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel26.setOpaque(true);
        jPanel7.add(jLabel26);

        jLabel29.setBackground(new java.awt.Color(255, 255, 204));
        jLabel29.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel29.setOpaque(true);
        jPanel7.add(jLabel29);

        jLabel30.setBackground(new java.awt.Color(255, 255, 204));
        jLabel30.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel30.setOpaque(true);
        jPanel7.add(jLabel30);

        jLabel38.setBackground(new java.awt.Color(255, 255, 204));
        jLabel38.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel38.setOpaque(true);
        jPanel7.add(jLabel38);

        jPanel10.add(jPanel7, java.awt.BorderLayout.WEST);

        jPanel8.add(jPanel10, java.awt.BorderLayout.SOUTH);

        jTabbedPane1.addTab("Real-Time Info", jPanel8);

        getContentPane().add(jTabbedPane1, java.awt.BorderLayout.CENTER);

        jPanel2.setLayout(new java.awt.GridLayout(2, 1));

        jPanel4.setLayout(new java.awt.BorderLayout());

        jLabel2.setText("KLCI : ");
        jPanel3.add(jLabel2);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11));
        jPanel3.add(jLabel3);

        jLabel4.setText("2nd Board : ");
        jPanel3.add(jLabel4);

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 11));
        jPanel3.add(jLabel5);

        jLabel6.setText("Volume (Lots) : ");
        jPanel3.add(jLabel6);

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel7.setForeground(new java.awt.Color(153, 102, 0));
        jPanel3.add(jLabel7);

        jLabel8.setText("Value (RM) : ");
        jPanel3.add(jLabel8);

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel9.setForeground(new java.awt.Color(153, 102, 0));
        jPanel3.add(jLabel9);

        jPanel4.add(jPanel3, java.awt.BorderLayout.WEST);

        jLabel10.setText("Up : ");
        jPanel5.add(jLabel10);

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel12.setForeground(new java.awt.Color(50, 150, 0));
        jPanel5.add(jLabel12);

        jLabel13.setText("Down : ");
        jPanel5.add(jLabel13);

        jLabel14.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel14.setForeground(new java.awt.Color(200, 0, 50));
        jPanel5.add(jLabel14);

        jLabel15.setText("Unchanged : ");
        jPanel5.add(jLabel15);

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 11));
        jPanel5.add(jLabel11);

        jPanel4.add(jPanel5, java.awt.BorderLayout.EAST);

        jPanel2.add(jPanel4);

        getContentPane().add(jPanel2, java.awt.BorderLayout.NORTH);

        jMenu3.setText("File");
        jMenu3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu3ActionPerformed(evt);
            }
        });

        jMenuItem2.setText("Open...");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });

        jMenu3.add(jMenuItem2);

        jMenuItem1.setText("Exit");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });

        jMenu3.add(jMenuItem1);

        jMenuBar2.add(jMenu3);

        jMenu5.setText("Edit");
        jMenuItem4.setText("Add Stocks...");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });

        jMenu5.add(jMenuItem4);

        jMenuItem7.setText("Clear All Stocks");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });

        jMenu5.add(jMenuItem7);

        jMenuBar2.add(jMenu5);

        jMenu1.setText("Options");
        jMenuItem6.setText("Options...");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });

        jMenu1.add(jMenuItem6);

        jMenuBar2.add(jMenu1);

        jMenu4.setText("Look n Feel");
        jMenuBar2.add(jMenu4);

        jMenu2.setText("Help");
        jMenuItem3.setText("Help");
        javax.help.HelpBroker hb = this.getHelpBroker();
        if(hb != null) {
            this.jMenuItem3.addActionListener(
                new CSH.DisplayHelpFromSource(hb)
            );
        }
        jMenu2.add(jMenuItem3);

        jMenu2.add(jSeparator1);

        jMenuItem5.setText("About...");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });

        jMenu2.add(jMenuItem5);

        jMenuBar2.add(jMenu2);

        setJMenuBar(jMenuBar2);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-952)/2, (screenSize.height-478)/2, 952, 478);
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
// TODO add your handling code here:
        if(this.getStockCodeAndSymbolDatabase() == null) {
            javax.swing.JOptionPane.showMessageDialog(this, "We haven't connected to KLSE server.", "Not Connected", javax.swing.JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        
        StockJDialog stockJDialog = new StockJDialog(this, true);
        stockJDialog.setVisible(true);
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
// TODO add your handling code here:
        this.clearAllStocks();
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void loadFromTextFile(File file) {
        /* Text file */
        try {
            BufferedReader in = new BufferedReader(new FileReader(file));
            String str;
            while ((str = in.readLine()) != null) {
                String upperCaseString = str.toUpperCase();
                String code = null;
                String symbol = null;
                
                code = this.stockCodeAndSymbolDatabase.searchStockCode(upperCaseString);
                if(code != null) {
                    symbol = this.stockCodeAndSymbolDatabase.codeToSymbol(code);
                }
                else {
                    symbol = this.stockCodeAndSymbolDatabase.searchStockSymbol(upperCaseString);
                    
                    if(symbol != null) {
                        code = this.stockCodeAndSymbolDatabase.symbolToCode(symbol);
                    }
                }
                
                if(code != null && symbol != null) {
                    final Stock stock = Utils.getEmptyStock(code, symbol);
                    this.addStockToTable(stock);
                    realTimeStockMonitor.addStockCode(code);
                }
            }
            
            in.close();
        } catch (IOException e) {
            log.error("", e);
        }         
    }
    
    private void loadFromExcelFile(File file) {
        try
        {
            POIFSFileSystem fs = new POIFSFileSystem(new FileInputStream(file));

            HSSFWorkbook wb = new HSSFWorkbook(fs);

            for(int k = 0; k < wb.getNumberOfSheets(); k++)
            {
                HSSFSheet sheet = wb.getSheetAt(k);
                
                final int startRow = sheet.getFirstRowNum();
                final int endRow = sheet.getLastRowNum();
                final int rows  = sheet.getPhysicalNumberOfRows();
                
                for (int r = startRow; r < endRow; r++)
                {
                    HSSFRow row   = sheet.getRow(r);
                    if(row == null) continue;

                    final int startCell = row.getFirstCellNum();
                    final int endCell = row.getLastCellNum();                    
                    int     cells = row.getPhysicalNumberOfCells();
               
                    for (int c = startCell; c < endCell; c++)
                    {
                        
                        HSSFCell cell  = row.getCell((short)c);
                        if(cell == null) continue;
                        
                        String   str = null;

                        switch (cell.getCellType())
                        {

                            case HSSFCell.CELL_TYPE_FORMULA :
                                break;

                            case HSSFCell.CELL_TYPE_NUMERIC :
                                str = "" + (int)cell.getNumericCellValue();
                                break;

                            case HSSFCell.CELL_TYPE_STRING :
                                str = cell.getRichStringCellValue().getString();
                                break;

                            default :
                        }

                        if(str == null) continue;
                        
                        String upperCaseString = str.toUpperCase();
                        String code = null;
                        String symbol = null;

                        code = this.stockCodeAndSymbolDatabase.searchStockCode(upperCaseString);
                        if(code != null) {
                            symbol = this.stockCodeAndSymbolDatabase.codeToSymbol(code);
                        }
                        else {
                            symbol = this.stockCodeAndSymbolDatabase.searchStockSymbol(upperCaseString);

                            if(symbol != null) {
                                code = this.stockCodeAndSymbolDatabase.symbolToCode(symbol);
                            }
                        }

                        if(code != null && symbol != null) {
                            final Stock stock = Utils.getEmptyStock(code, symbol);
                            this.addStockToTable(stock);
                            realTimeStockMonitor.addStockCode(code);
                        }                        
                    }   /* for (short c = 0; c < cells; c++) */
                }   /* for (int r = 0; r < rows; r++) */
            }   /* for(int k = 0; k < wb.getNumberOfSheets(); k++) */
        }
        catch (Exception exp)
        {
            log.error("", exp);
        }        
    }
    
    public RealTimeStockMonitor getRealTimeStockMonitor() {
        return realTimeStockMonitor;
    }
    
    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
// TODO add your handling code here:
        if(getStockCodeAndSymbolDatabase() == null) {
            javax.swing.JOptionPane.showMessageDialog(this, "We haven't connected to KLSE server.", "Not Connected", javax.swing.JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        
        JFileChooser fc = new JFileChooser();
        fc.setAcceptAllFileFilterUsed(false);
        fc.addChoosableFileFilter(new MyFilter());
        int returnVal = fc.showOpenDialog(this);

        if (returnVal != JFileChooser.APPROVE_OPTION) {
            return;            
        }
        
        File file = fc.getSelectedFile();
        if(file.getName().endsWith(".xls")) {
            loadFromExcelFile(file);
        }
        else if(file.getName().endsWith(".txt")) {
            loadFromTextFile(file);
        }                       
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    class MyFilter extends javax.swing.filechooser.FileFilter {
        public boolean accept(File file) {
            if (file.isDirectory()) {
                return true;
            }       
            
            String filename = file.getName();
            return filename.endsWith(".xls") || filename.endsWith(".txt");
        }
        
        public String getDescription() {
            return "Text file or Microsoft Excel";
        }
    }
    
    private void jTabbedPane1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jTabbedPane1StateChanged
// TODO add your handling code here:
        JTabbedPane pane = (JTabbedPane)evt.getSource();
        if(pane.getSelectedComponent() == this.jPanel8) {            
            if(realTimeStockMonitor != null) {                
                this.realTimeStockMonitor.start();
                this.realTimeStockMonitor.attach(this.realTimeStockMonitorObserver);
                log.info("Start real time stock monitor and re-attach observer.");
            }
            if(stockHistoryMonitor != null) {                
                this.stockHistoryMonitor.attach(this.stockHistoryMonitorObserver);
                log.info("Stock history monitor re-attach observer.");
            }            
        }
        else if(pane.getSelectedComponent() == this.indicatorPanel) {
            if(realTimeStockMonitor != null) {                
                this.realTimeStockMonitor.stop();
                this.realTimeStockMonitor.dettach(this.realTimeStockMonitorObserver);
                log.info("Stop real time stock monitor and dettach observer.");
            }
            if(stockHistoryMonitor != null) {                
                // No stop. May be time consuming.
                // this.stockHistoryMonitor.stop();
                this.stockHistoryMonitor.dettach(this.stockHistoryMonitorObserver);
                log.info("Stop stock history monitor and dettach observer.");
            }                
        }
        else {
            if(realTimeStockMonitor != null) {                
                this.realTimeStockMonitor.stop();
                this.realTimeStockMonitor.dettach(this.realTimeStockMonitorObserver);
                log.info("Stop real time stock monitor and dettach observer.");
            }
            if(stockHistoryMonitor != null) {                
                this.stockHistoryMonitor.attach(this.stockHistoryMonitorObserver);
                log.info("Stock history monitor re-attach observer.");
            }             
        }
    }//GEN-LAST:event_jTabbedPane1StateChanged


    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
// TODO add your handling code here
        OptionsJDialog optionsJDialog = new OptionsJDialog(this, true);
        optionsJDialog.setLocationRelativeTo(this);
        optionsJDialog.set(this.jStockOptions);
        optionsJDialog.setVisible(true);
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    public JStockOptions getJStockOptions() {
        return this.jStockOptions;
    }
    
    /* Dangerous! We didn't perform proper clean up, because we do not want
     * to give user perspective that our system is slow. But, is it safe
     * to do so?
     */
    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        log.info("Widnow is closed...");
        
        //log.info("stop indicator scanner panel...");
        //this.indicatorScannerJPanel.stop();
        
        //log.info("stop indicator panel...");
        //this.indicatorPanel.stop();

        log.info("saveJStockOptions...");
        this.saveJStockOptions();
        
        log.info("saveRealTimeStocks...");
        this.saveRealTimeStocks();
        
        log.info("saveIndicatorProjectManager...");
        this.indicatorPanel.saveIndicatorProjectManager();
        
        //log.info("stockCodeAndSymbolDatabaseTask stop...");
        //stockCodeAndSymbolDatabaseTask._stop();
                
        //try {
        //    stockCodeAndSymbolDatabaseTask.get();
        //}
        //catch(InterruptedException exp) {
        //    log.error("", exp);
        //}
        //catch(java.util.concurrent.ExecutionException exp) {
        //    log.error("", exp);
        //}
        
        //log.info("marketThread stop...");
        //marketThread.interrupt();
        
        //try {
        //    marketThread.join();
        //}
        //catch(InterruptedException exp) {
        //    log.error("", exp);
        //}
        
        //log.info("realTimeStockMonitor stop...");
        //realTimeStockMonitor.stop();
        //log.info("stockHistoryMonitor stop...");
        //stockHistoryMonitor.stop();
        
        if(trayIcon != null)
            SystemTray.getSystemTray().remove(trayIcon);
        
        log.info("Widnow is closed.");
        
        // Final clean up.
        System.exit(0);
    }//GEN-LAST:event_formWindowClosed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        new AboutJDialog(this, true).setVisible(true);
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
// TODO add your handling code here:
        this.setVisible(false);
        this.dispose();
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void formWindowIconified(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowIconified
// TODO add your handling code here:
        // Calling setVisible(false) will cause modal dialog box to be unblocked
        // for JDialog.setVisible(true). This will happen in Linux system where
        // user are allowed to minimize window even there is a modal JDialog box
        // We have no solution at current moment.
        //
        // this.setVisible(false);
    }//GEN-LAST:event_formWindowIconified

    private void formWindowDeiconified(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowDeiconified
// TODO add your handling code here:
    }//GEN-LAST:event_formWindowDeiconified

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
// TODO add your handling code here:
        this.jTable1.getSelectionModel().clearSelection();
        updateBuyerSellerInformation(null);
    }//GEN-LAST:event_formMouseClicked

    private void jTable1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable1KeyPressed
// TODO add your handling code here:
        if(evt.VK_DELETE == evt.getKeyCode()) {
            this.deteleSelectedTableRow();
            return;
        }
        
        if(evt.isActionKey()) {
            int[] rows = MainFrame.this.jTable1.getSelectedRows();
            
            if(rows.length == 1) {
                int row = rows[0];
                
                StockTableModel tableModel = (StockTableModel)jTable1.getModel();
                int modelIndex = jTable1.convertRowIndexToModel(row);
                Stock stock = tableModel.getStock(modelIndex);
                updateBuyerSellerInformation(stock);
            }
            
            return;
        }
    }//GEN-LAST:event_jTable1KeyPressed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
// TODO add your handling code here:
        log.info("Widnow is closing.");     
    }//GEN-LAST:event_formWindowClosing

    private void jMenu3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu3ActionPerformed
// TODO add your handling code here:
    }//GEN-LAST:event_jMenu3ActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                MainFrame mainFrame = new MainFrame();                
                mainFrame.setExtendedState(Frame.MAXIMIZED_BOTH);
                mainFrame.setVisible(true);               
            }
        });
    }
    
    private void clearAllStocks() {
        assert(java.awt.EventQueue.isDispatchThread());
        
        StockTableModel tableModel = (StockTableModel)jTable1.getModel();            
            
        stockCodeHistoryGUI.clear();
        realTimeStockMonitor.clearStockCodes();
        stockHistoryMonitor.clearStockCodes();
        tableModel.clearAllStocks();     
        
        updateBuyerSellerInformation(null);
        
        if(stockCodeHistoryGUI.size() == 0) {
            statusBar.setProgressBar(false);
            statusBar.setMainMessage("Connected");
        }        
    }
    
    // Should we synchronized the jTable1, or post the job at GUI event dispatch
    // queue?    
    private void deteleSelectedTableRow() {
        assert(java.awt.EventQueue.isDispatchThread());
        
        StockTableModel tableModel = (StockTableModel)jTable1.getModel();            

        int prevRow = Integer.MAX_VALUE;

        int rows[] = jTable1.getSelectedRows();

        for(int i=0; i<rows.length; i++) {                
            int row = rows[i];

            if(row < 0) continue;

            for(int j=i+1; j<rows.length; j++) {
                if(row < rows[j])
                    rows[j]--;
            }

            final int modelIndex = jTable1.getRowSorter().convertRowIndexToModel(row);
            Stock stock = tableModel.getStock(modelIndex);
            stockCodeHistoryGUI.remove(stock.getCode());
            realTimeStockMonitor.removeStockCode(stock.getCode());
            stockHistoryMonitor.removeStockCode(stock.getCode());
            tableModel.removeRow(modelIndex);
        }            
        
        updateBuyerSellerInformation(null);
        
        if(stockCodeHistoryGUI.size() == 0) {
            statusBar.setProgressBar(false);
            statusBar.setMainMessage("Connected");
        }
    }
    
    public void setStatusBar(final boolean progressBar, final String mainMessage) {
        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                statusBar.setProgressBar(progressBar);
                statusBar.setMainMessage(mainMessage);
            }
        });
    }
    
    class ChangeLookAndFeelAction extends AbstractAction {
        MainFrame mainFrame;
        String lafClassName;
  
        protected ChangeLookAndFeelAction(MainFrame mainFrame, String lafClassName) {
            super("ChangeTheme");
            this.mainFrame = mainFrame;
            this.lafClassName = lafClassName;
        }
  
        public String getLafClassName() {
            return lafClassName;
        }
        
        public void actionPerformed(ActionEvent e) {
            mainFrame.setLookAndFeel(lafClassName);
        }
    }
  
    public void setLookAndFeel(String lafClassName) {
	/* Backward compataible purpose. Old JStockOptions may contain null in this field. */
        if(lafClassName == null)
            return;
        
        try {
            UIManager.setLookAndFeel(lafClassName);
            SwingUtilities.updateComponentTreeUI(this);
        }
        catch(java.lang.ClassNotFoundException exp) {
            log.error("", exp);
        }
        catch(java.lang.InstantiationException exp) {
            log.error("", exp);
        }
        catch(java.lang.IllegalAccessException exp) {
            log.error("", exp);
        }
        catch(javax.swing.UnsupportedLookAndFeelException exp) {
            log.error("", exp);
        }
        
        this.jStockOptions.setLookNFeel(lafClassName);
        
        java.util.Enumeration<AbstractButton> buttons = this.buttonGroup1.getElements();
        
        for (Enumeration<AbstractButton> e = this.buttonGroup1.getElements() ; e.hasMoreElements() ;) {
            AbstractButton button = e.nextElement();
            javax.swing.JRadioButtonMenuItem m = (javax.swing.JRadioButtonMenuItem)button;
            ChangeLookAndFeelAction a = (ChangeLookAndFeelAction)m.getActionListeners()[0];
                        
            if(a.getLafClassName().equals(lafClassName)) {
                m.setSelected(true);
                break;                   
            }
        }
        
        // Sequence are important. The AutoCompleteJComboBox itself should have the highest
        // priority.
        ((AutoCompleteJComboBox)jComboBox1).setStockCodeAndSymbolDatabase(stockCodeAndSymbolDatabase);
        this.indicatorPanel.setStockCodeAndSymbolDatabase(stockCodeAndSymbolDatabase);
        initjComboBox1EditorComponentKeyListerner();
        this.indicatorPanel.initjComboBox1EditorComponentKeyListerner();
    }
    
    private void createStockIndicatorEditor() {
        indicatorPanel = new IndicatorPanel(); 
                
        jTabbedPane1.addTab("Stock Indicator Editor", indicatorPanel);
        jTabbedPane1.addChangeListener(indicatorPanel);
    }

    private void createIndicatorScannerJPanel() {
        this.indicatorScannerJPanel = new IndicatorScannerJPanel(); 
                
        jTabbedPane1.addTab("Stock Indicator Scanner", indicatorScannerJPanel);
        jTabbedPane1.addChangeListener(indicatorScannerJPanel);
    }
    
    // Due to the unknown problem in netbeans IDE, we will add in the tooltip
    // and icon seperately.
    private void  createIconsAndToolTipTextForJTabbedPane() {
        this.jTabbedPane1.setIconAt(0, this.getImageIcon("/images/16x16/strokedocker.png"));
        this.jTabbedPane1.setIconAt(1, this.getImageIcon("/images/16x16/color_line.png"));
        this.jTabbedPane1.setIconAt(2, this.getImageIcon("/images/16x16/bell.png"));
        this.jTabbedPane1.setToolTipTextAt(0, "Watch your favorite stock movement in real time");
        this.jTabbedPane1.setToolTipTextAt(1, "Customize your own stock indicator for alert purpose");
        this.jTabbedPane1.setToolTipTextAt(2, "Scan through the entire KLSE market so that you will be informed what to sell or buy");
    }
            
    public void createLookAndFeelMenuItem() {
        LookAndFeel currentlaf = UIManager.getLookAndFeel();
        
        UIManager.LookAndFeelInfo[] lafInfo = UIManager.getInstalledLookAndFeels();

        for(int i=0; i<lafInfo.length; i++) {
            JMenuItem mi = (JRadioButtonMenuItem) jMenu4.add(new JRadioButtonMenuItem(lafInfo[i].getName()));
            buttonGroup1.add(mi);
            mi.addActionListener(new ChangeLookAndFeelAction(this, lafInfo[i].getClassName()));
            
            if(currentlaf != null) {
                if(lafInfo[i].getName() == currentlaf.getName())
                {
                    ((JRadioButtonMenuItem) mi).setSelected(true);
                }
            }
        }
    }
  
    private javax.swing.event.TableModelListener getTableModelListener() {
        return new javax.swing.event.TableModelListener() {
           public void tableChanged(javax.swing.event.TableModelEvent e) {
                int firstRow = e.getFirstRow();
                int lastRow = e.getLastRow();
                int mColIndex = e.getColumn();
                
                switch (e.getType()) {
                    case javax.swing.event.TableModelEvent.INSERT:
                        break;
                        
                  case javax.swing.event.TableModelEvent.UPDATE:
                    break;

                  case javax.swing.event.TableModelEvent.DELETE:
                    break;                        
                }
            }            
        };
    }
    
    private void createSystemTrayIcon() {
        if (SystemTray.isSupported()) {
            SystemTray tray = SystemTray.getSystemTray();
            Image image = new javax.swing.ImageIcon(getClass().getResource("/images/16x16/chart.png")).getImage();

            MouseListener mouseListener = new MouseListener() {

                public void mouseClicked(MouseEvent e) {
                    if(e.getButton() == e.BUTTON1) {
                        MainFrame.this.setVisible(true);
                        MainFrame.this.setState(Frame.NORMAL);
                    }
                }

                public void mouseEntered(MouseEvent e) {               
                }

                public void mouseExited(MouseEvent e) {            
                }

                public void mousePressed(MouseEvent e) {             
                }

                public void mouseReleased(MouseEvent e) {              
                }
            };

            ActionListener exitListener = new ActionListener() {
                public void actionPerformed(ActionEvent e) {
                    MainFrame.this.setVisible(false);
                    MainFrame.this.dispose();
                }
            };

            PopupMenu popup = new PopupMenu();
            MenuItem defaultItem = new MenuItem("Exit");
            defaultItem.addActionListener(exitListener);
            popup.add(defaultItem);

            trayIcon = new TrayIcon(image, "JStock - KLSE Real-Time Monitor", popup);

            ActionListener actionListener = new ActionListener() {
                public void actionPerformed(ActionEvent e) {
                }
            };

            trayIcon.setImageAutoSize(true);
            trayIcon.addActionListener(actionListener);
            trayIcon.addMouseListener(mouseListener);

            try {
                tray.add(trayIcon);
            } catch (AWTException e) {
                trayIcon = null;
                JOptionPane.showMessageDialog(MainFrame.this, "TrayIcon could not be added.", "System Tray Not Supported", JOptionPane.WARNING_MESSAGE);
            }

        } else {
            //  System Tray is not supported

            trayIcon = null;
            JOptionPane.showMessageDialog(MainFrame.this, "System tray is not supported. You may not get stock alert notify.", "System Tray Not Supported", JOptionPane.WARNING_MESSAGE);
        }        
    }
    
    private void initTableHeaderToolTips() {
        JTableHeader header = jTable1.getTableHeader();
    
        ColumnHeaderToolTips tips = new ColumnHeaderToolTips();
            
        header.addMouseMotionListener(tips);        
    }
    
    private JPopupMenu getMyTableColumnSelectionPopupMenu(final int mouseXLocation) {
        JPopupMenu popup = new JPopupMenu();
        TableModel tableModel = jTable1.getModel();
        final int col = tableModel.getColumnCount();
        
        for(int i=1; i<col; i++) {
            String name = tableModel.getColumnName(i);            
            
            boolean isVisible = true;
            
            try {
                TableColumn tableColumn = jTable1.getColumn(name);
            }
            catch(java.lang.IllegalArgumentException exp) {
                isVisible = false;
            }
            
            javax.swing.JCheckBoxMenuItem menuItem = new JCheckBoxMenuItem(name, isVisible);
                        
            menuItem.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent evt) {
                    String name = evt.getActionCommand();
                    JCheckBoxMenuItem menuItem = (JCheckBoxMenuItem)evt.getSource();
                    if(menuItem.isSelected() == false) {
                        JTableUtilities.removeTableColumn(jTable1, name);
                    }
                    else {
                        TableColumnModel colModel = jTable1.getColumnModel();
                        int vColIndex = colModel.getColumnIndexAtX(mouseXLocation);
                        JTableUtilities.insertTableColumnFromModel(jTable1, name, vColIndex);
                    }
                }
            });
            
            popup.add(menuItem);            
        }
        
        return popup;
    }
    
    private Color getColor( double price, double referencePrice) {
        if(price < referencePrice) {
            return new Color(lowerColor.getRGB());
        }
        
        if(price > referencePrice) {
            return new Color(higherColor.getRGB());
        }
        
        return Color.BLACK;
    }
    
    private void updateBuyerSellerInformation(Stock stock) {
        if(stock == null) {
            jLabel24.setText("");
            jLabel33.setText("");
            jLabel19.setText("");
            jLabel32.setText("");
            jLabel35.setText("");
            jLabel37.setText("");
            jLabel25.setText("");
            jLabel34.setText("");
            jLabel26.setText("");
            jLabel29.setText("");
            jLabel30.setText("");
            jLabel38.setText("");
            return;
        }
        
        final double openPrice = stock.getOpenPrice();
        
        jLabel24.setText("" + stock.getThirdBuyPrice()); jLabel24.setForeground(getColor(stock.getThirdBuyPrice(), openPrice));
        jLabel33.setText("" + stock.getSecondBuyPrice()); jLabel33.setForeground(getColor(stock.getSecondBuyPrice(), openPrice));
        jLabel19.setText("" + stock.getBuyPrice()); jLabel19.setForeground(getColor(stock.getBuyPrice(), openPrice));
        jLabel32.setText("" + stock.getSellPrice()); jLabel32.setForeground(getColor(stock.getSellPrice(), openPrice));
        jLabel35.setText("" + stock.getSecondSellPrice()); jLabel35.setForeground(getColor(stock.getSecondSellPrice(), openPrice));
        jLabel37.setText("" + stock.getThirdSellPrice()); jLabel37.setForeground(getColor(stock.getThirdSellPrice(), openPrice));
        jLabel25.setText("" + stock.getThirdBuyQuantity());
        jLabel34.setText("" + stock.getSecondBuyQuantity());
        jLabel26.setText("" + stock.getBuyQuantity());
        jLabel29.setText("" + stock.getSellQuantity());
        jLabel30.setText("" + stock.getSecondBuyQuantity());
        jLabel38.setText("" + stock.getThirdSellQuantity());
    }
    
    private class TableColumnSelectionPopupListener extends MouseAdapter {        
        public void mousePressed(MouseEvent e) {
            maybeShowPopup(e);
        }

        public void mouseReleased(MouseEvent e) {
            maybeShowPopup(e);
        }

        private void maybeShowPopup(MouseEvent e) {
            if (e.isPopupTrigger()) {
                getMyTableColumnSelectionPopupMenu(e.getX()).show(e.getComponent(), e.getX(), e.getY());
            }
        }
    }
    
    private MouseAdapter getMyJXStatusBarImageLabelMouseAdapter() {
        return new MouseAdapter() {
            public void mouseClicked(MouseEvent e) {
                if(e.getClickCount() == 2) {
                    if(stockCodeAndSymbolDatabase != null) {
                        JOptionPane.showMessageDialog(MainFrame.this, "Already connected to KLSE stock server.", "Connected", JOptionPane.INFORMATION_MESSAGE);
                        
                        return;
                    }
                    // Make sure no same task is running.
                    if(stockCodeAndSymbolDatabaseTask != null) {
                        if(stockCodeAndSymbolDatabaseTask.isDone() == true)
                            initStockCodeAndSymbolDatabase();
                        else
                            log.info("Another same task is still running");
                    }
                    else {
                        initStockCodeAndSymbolDatabase();
                    }
                            
                }
            }
        };
    }

    private KeyAdapter getjComboBox1EditorComponentKeyAdapter() {
        return new KeyAdapter() {
            public void keyReleased(KeyEvent e) {
                if(KeyEvent.VK_ENTER == e.getKeyCode()) {
                    String stock = MainFrame.this.jComboBox1.getEditor().getItem().toString();
                    
                    if(stock.length() > 0) {
                        String code = stockCodeAndSymbolDatabase.searchStockCode(stock);
                        String symbol = null;
                            
                        if(code != null) {
                            symbol = stockCodeAndSymbolDatabase.codeToSymbol(code);
                            // First add the empty stock, so that the user will not have wrong perspective that
                            // our system is slow.
                            addStockToTable(Utils.getEmptyStock(code, symbol));
                            realTimeStockMonitor.addStockCode(code);                                                                
                        }
                        else {
                            symbol = stockCodeAndSymbolDatabase.searchStockSymbol(stock);
                                
                            if(symbol != null) {                                   
                                code = stockCodeAndSymbolDatabase.symbolToCode(symbol);
                                addStockToTable(Utils.getEmptyStock(code, symbol));
                                realTimeStockMonitor.addStockCode(stockCodeAndSymbolDatabase.symbolToCode(symbol));
                            }
                        }
                    }   /* if(stock.length() > 0) */
                }   /* if(KeyEvent.VK_ENTER == e.getKeyCode()) */
            }   /* public void keyReleased(KeyEvent e) */
        };
    }

    public StockCodeAndSymbolDatabase getStockCodeAndSymbolDatabase() {
        return stockCodeAndSymbolDatabase;
    }
    
    public java.util.List<StockServerFactory> getStockServerFactory() {
        return Collections.unmodifiableList(this.stockServerFactories);
    }
    
    public java.util.List<Stock> getStocks() {
        StockTableModel tableModel = (StockTableModel)jTable1.getModel();
        return tableModel.getStocks();
    }
    
    // Should we synchronized the jTable1, or post the job at GUI event dispatch
    // queue?
    public void addStockToTable(final Stock stock) {
        assert(java.awt.EventQueue.isDispatchThread());
        
        StockTableModel tableModel = (StockTableModel)jTable1.getModel();
        tableModel.addStock(stock);
    }
    
    private void updateStockToTable(final Stock stock) {
        StockTableModel tableModel = (StockTableModel)jTable1.getModel();
        tableModel.updateStock(stock);
    }
    
    // This is the workaround to overcome Erasure by generics. We are unable to make MainFrame to
    // two observers at the same time.
    private org.yccheok.jstock.engine.Observer<RealTimeStockMonitor, java.util.List<Stock>> getRealTimeStockMonitorObserver() {
        return new org.yccheok.jstock.engine.Observer<RealTimeStockMonitor, java.util.List<Stock>>() {
            public void update(RealTimeStockMonitor monitor, java.util.List<Stock> stocks)
            {
                MainFrame.this.update(monitor, stocks);
            }
        };
    }

    private org.yccheok.jstock.engine.Observer<StockHistoryMonitor, StockHistoryMonitor.StockHistoryRunnable> getStockHistoryMonitorObserver() {
        return new org.yccheok.jstock.engine.Observer<StockHistoryMonitor, StockHistoryMonitor.StockHistoryRunnable>() {
            public void update(StockHistoryMonitor monitor, StockHistoryMonitor.StockHistoryRunnable runnable)
            {
                MainFrame.this.update(monitor, runnable);
            }
        };
    }
    
    // Asynchronous call. Must be called by event dispatch thread.
    public void displayHistoryChart(Stock stock) {
        final StockHistoryServer stockHistoryServer = stockHistoryMonitor.getStockHistoryServer(stock.getCode());

        if(stockHistoryServer == null) {
            if(stockCodeHistoryGUI.add(stock.getCode()) && stockHistoryMonitor.addStockCode(stock.getCode())) {
                statusBar.setProgressBar(true);
                statusBar.setMainMessage("Looking for " + stock.getSymbol() + " history. Still waiting for history total " + stockCodeHistoryGUI.size() + "...");                            
            }
        }
        else {
            ChartJDialog chartJDialog = new ChartJDialog(MainFrame.this, stock.getSymbol() + " (" + stock.getCode() + ")", false, stockHistoryServer);
            chartJDialog.setVisible(true);                            
        }        
    }
    
    private JPopupMenu getMyJTablePopupMenu() {
        JPopupMenu popup = new JPopupMenu();
        TableModel tableModel = jTable1.getModel();            
        
        javax.swing.JMenuItem menuItem = new JMenuItem("History...", this.getImageIcon("/images/16x16/strokedocker.png"));
        
	menuItem.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
                    int rows[] = jTable1.getSelectedRows();
                    final StockTableModel tableModel = (StockTableModel)jTable1.getModel();
                    
                    for(int row : rows) {                
                        final int modelIndex = jTable1.getRowSorter().convertRowIndexToModel(row);
                        Stock stock = tableModel.getStock(modelIndex);
                        displayHistoryChart(stock);
                    } 
                }
	});
                
	popup.add(menuItem);
        
        popup.addSeparator();
        
        menuItem = new JMenuItem("Delete", this.getImageIcon("/images/16x16/button_cancel.png"));
        
	menuItem.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
                    MainFrame.this.deteleSelectedTableRow();
                }
	});
            
	popup.add(menuItem);
        
        return popup;
    }
    
    private class MarketRunnable implements Runnable {
        public MarketRunnable(int delay) {
            this.delay = delay;
        }
        
        public void run() {
            final Thread currentThread = Thread.currentThread();
            
            while(!currentThread.isInterrupted()) {
                for (StockServerFactory factory : stockServerFactories) {
                    MarketServer server = factory.getMarketServer();
                    
                    final Market market = server.getMarket();
                    
                    if(market != null) {
                        update(market);
                    }
                }
                
                try {
                    Thread.sleep(delay);
                }
                catch(InterruptedException exp) {
                    break;
                }
            }
        }        
        
        private int delay;
    }
    
    private class StockCodeAndSymbolDatabaseTask extends SwingWorker<Boolean, Void> {
        private volatile boolean runnable = true;
        
        public void _stop() {
            runnable = false;
        }
        
       @Override
        protected void done() {
            boolean success = false;
            
            try {
                success = get();

            }
            catch(InterruptedException exp) {
                log.error("", exp);
            }
            catch(java.util.concurrent.ExecutionException exp) {
                log.error("", exp);
            }
           
            if(success) {
                statusBar.setMainMessage("Connected");
                statusBar.setImageIcon(getImageIcon("/images/16x16/network-transmit-receive.png"), "Connected");
                statusBar.setProgressBar(false);                    
            }
            else {
                statusBar.setMainMessage("Network error");
                statusBar.setImageIcon(getImageIcon("/images/16x16/network-error.png"), "Double cliked to try again");
                statusBar.setProgressBar(false);
            }
       }
       
        public Boolean doInBackground() {
            Boolean success = false;
            int tries = 0;
            
            while(!isCancelled() && !success && runnable) {
                for (StockServerFactory factory : stockServerFactories) {

                    try {
                        stockCodeAndSymbolDatabase = new StockCodeAndSymbolDatabase(factory.getStockServer());
			// Register the auto complete JComboBox with latest database.
                        ((AutoCompleteJComboBox)jComboBox1).setStockCodeAndSymbolDatabase(stockCodeAndSymbolDatabase);
                        indicatorPanel.setStockCodeAndSymbolDatabase(stockCodeAndSymbolDatabase);
                        success = true;
                        break;
                    }
                    catch(StockNotFoundException exp) {
                        log.error("", exp);
                    }

                    if(isCancelled() || !runnable) {
                        break;
                    }
                }
                
                tries++;
                
                // We had tried 3 times, but still failed. Abort.
                if(tries >= 3) break;

            }
                      
            return success;
         }     
    }
    
    private void initMyJXStatusBarImageLabelMouseAdapter() {
        MouseAdapter mouseAdapter = this.getMyJXStatusBarImageLabelMouseAdapter();
        this.statusBar.getImageLabel().addMouseListener(mouseAdapter);
    }
    
    private void initjComboBox1EditorComponentKeyListerner() {
        KeyListener[] listeners = this.jComboBox1.getEditor().getEditorComponent().getKeyListeners();
        
        for(KeyListener listener : listeners) {
            if(listener == jComboBox1EditorComponentKeyAdapter) {
                return;
            }
        }
        
        // Bug in Java 6. Most probably this listener had been removed during look n feel updating, reassign!
        this.jComboBox1.getEditor().getEditorComponent().addKeyListener(jComboBox1EditorComponentKeyAdapter);
        log.info("Reassign key adapter to combo box");
    }
    
    private void initRealTimeStockMonitor() {
        realTimeStockMonitor = new RealTimeStockMonitor(4, 20, 1000);
        
        for(StockServerFactory factory : stockServerFactories) {
            realTimeStockMonitor.addStockServerFactory(factory);
        }
        
        realTimeStockMonitor.attach(this.realTimeStockMonitorObserver);
        
        this.indicatorScannerJPanel.initRealTimeStockMonitor(Collections.unmodifiableList(stockServerFactories));
    }

    private void initJStockOptions() {
        try {
            File f = new File("config" + File.separator + "options.xml");

            XStream xStream = new XStream();
            InputStream inputStream = new java.io.FileInputStream(f);
            this.jStockOptions = (JStockOptions)xStream.fromXML(inputStream);
            
            log.info("jstockOptions loaded from " + f.toString() + " successfully.");            
        }
        catch(java.io.FileNotFoundException exp) {
            log.error("", exp);
        }
        catch(com.thoughtworks.xstream.core.BaseException exp) {
            log.error("", exp);
        }        
        
        if(jStockOptions == null)
            jStockOptions = new JStockOptions();
        
        this.setLookAndFeel(jStockOptions.getLooknFeel());
        
        final String proxyHost = jStockOptions.getProxyServer();
        final int proxyPort = jStockOptions.getProxyPort();
        
        if((proxyHost.length() > 0) && (org.yccheok.jstock.engine.Utils.isValidPortNumber(proxyPort))) {
            System.getProperties().put("http.proxyHost", proxyHost);
            System.getProperties().put("http.proxyPort", "" + proxyPort);
        }
        else {
            System.getProperties().remove("http.proxyHost");
            System.getProperties().remove("http.proxyPort");
        }
    }   
    
    private void initRealTimeStocks() {
        java.util.List<Stock> s = null;
        
        try {
            File f = new File("config" + File.separator + "realtimestock.xml");

            XStream xStream = new XStream();
            InputStream inputStream = new java.io.FileInputStream(f);
            s = (java.util.List<Stock>)xStream.fromXML(inputStream);
            
            log.info("Real time stocks loaded from " + f.toString() + " successfully.");            
        }
        catch(java.io.FileNotFoundException exp) {
            log.error("", exp);
        }
        catch(com.thoughtworks.xstream.core.BaseException exp) {
            log.error("", exp);
        }        
        
        if(s != null) {            
            final java.util.List<Stock> stocks = s;
            
            SwingUtilities.invokeLater(new Runnable() {
                public void run() {
                    for(Stock stock : stocks) {
                        final Stock emptyStock = Utils.getEmptyStock(stock.getCode(), stock.getSymbol());
                        MainFrame.this.addStockToTable(emptyStock);
                        realTimeStockMonitor.addStockCode(emptyStock.getCode());
                    }                    
                }
            });
        }
    } 
    
    private javax.help.HelpBroker getHelpBroker() {
        final String hsName = "jhelpset.hs";        
        HelpSet hs = null;
        
        try {
            ClassLoader cl = MainFrame.class.getClassLoader();
            URL hsURL = HelpSet.findHelpSet(cl, hsName);
            hs = new HelpSet(null, hsURL);
        } catch (Exception exp) {
            log.error("", exp);
            return null;
        }

        return hs.createHelpBroker();
    }

    private boolean saveRealTimeStocks() {
        if(Utils.createDirectoryIfDoesNotExist("config") == false)
        {
            return false;
        }
        
        File f = new File("config" + File.separator + "realtimestock.xml");
                
        XStream xStream = new XStream();   
        
        try {
            OutputStream outputStream = new FileOutputStream(f);
            xStream.toXML(((StockTableModel)this.jTable1.getModel()).getStocks(), outputStream);  
        }
        catch(java.io.FileNotFoundException exp) {
            log.error("", exp);
            return false;
        }
        catch(com.thoughtworks.xstream.core.BaseException exp) {
            log.error("", exp);
            return false;
        }
                      
        return true;        
    }
    
    private boolean saveJStockOptions() {
        if(Utils.createDirectoryIfDoesNotExist("config") == false)
        {
            return false;
        }
        
        File f = new File("config" + File.separator + "options.xml");
                
        XStream xStream = new XStream();   
        
        try {
            OutputStream outputStream = new FileOutputStream(f);
            xStream.toXML(this.jStockOptions, outputStream);  
        }
        catch(java.io.FileNotFoundException exp) {
            log.error("", exp);
            return false;
        }
        catch(com.thoughtworks.xstream.core.BaseException exp) {
            log.error("", exp);
            return false;
        }
                      
        return true;        
    }
    
    private void initStockHistoryMonitor() {
        this.stockHistoryMonitor = new StockHistoryMonitor(4);
        
        for(StockServerFactory factory : stockServerFactories) {
            stockHistoryMonitor.addStockServerFactory(factory);
        }
        
        stockHistoryMonitor.attach(this.stockHistoryMonitorObserver);
        
        stockHistorySerializer = new StockHistorySerializer("history");
        
        stockHistoryMonitor.setStockHistorySerializer(stockHistorySerializer);
    }
    
    public StockHistoryMonitor getStockHistoryMonitor() {
        return stockHistoryMonitor;
    }
    
    private void initUsernameAndPassword() {
        username = "";
        password = "";
    }
    
    private void initStockServerFactories() {
        stockServerFactories.add(CIMBStockServerFactory.getInstance(username, password));
    }
    
    private void initMarketThread() {
        this.marketThread = new Thread(new MarketRunnable(1000));
        this.marketThread.start();
    }
    
    private void initStockCodeAndSymbolDatabase() {
        statusBar.setMainMessage("Connecting to stock server to retrieve stock information ...");
        statusBar.setImageIcon(getImageIcon("/images/16x16/network-connecting.png"), "Connecting ...");
        statusBar.setProgressBar(true);
        stockCodeAndSymbolDatabaseTask = new StockCodeAndSymbolDatabaseTask();
        stockCodeAndSymbolDatabaseTask.execute();
    }
    
    public void update(RealTimeStockMonitor monitor, final java.util.List<Stock> stocks) {
        // Do it in GUI event dispatch thread. Otherwise, we may face deadlock.
        // For example, we lock the jTable, and try to remove the stock from the
        // real time monitor. While we wait for the real time monitor to complete,
        // real time monitor will call this function and, be locked at function
        // updateStockToTable.
        javax.swing.SwingUtilities.invokeLater(new Runnable() {
           public void run() {
                for(Stock stock : stocks) {
                    updateStockToTable(stock);
                }               
           } 
        });
    }
    
    private void update(final Market market) {
        javax.swing.SwingUtilities.invokeLater(new Runnable() {
           public void run() {
                final java.text.NumberFormat numberFormat = java.text.NumberFormat.getInstance();
                jLabel7.setText(numberFormat.format(market.getVolume()));
                jLabel12.setText(numberFormat.format(market.getNumOfStockChange(Market.ChangeType.Up)));
                jLabel14.setText(numberFormat.format(market.getNumOfStockChange(Market.ChangeType.Down)));
                jLabel11.setText(numberFormat.format(market.getNumOfStockChange(Market.ChangeType.Unchange)));

                numberFormat.setMaximumFractionDigits(2);
                numberFormat.setMinimumFractionDigits(2);
                
                jLabel3.setText(numberFormat.format(market.getIndex(Stock.Board.Main)) + " (" + numberFormat.format(market.getChange(Stock.Board.Main)) + ")");
                jLabel5.setText(numberFormat.format(market.getIndex(Stock.Board.Second)) + " (" + numberFormat.format(market.getChange(Stock.Board.Second)) + ")");
                jLabel9.setText(numberFormat.format(market.getValue()));
                
                jLabel3.setForeground(getColor(market.getChange(Stock.Board.Main), 0.0));
                jLabel5.setForeground(getColor(market.getChange(Stock.Board.Second), 0.0));
           }
        });
    }
    
    public void update(StockHistoryMonitor monitor, final StockHistoryMonitor.StockHistoryRunnable runnable) {
        javax.swing.SwingUtilities.invokeLater(new Runnable() {
           public void run() {
               String code = runnable.getCode();
               String symbol = MainFrame.this.stockCodeAndSymbolDatabase.codeToSymbol(code);
               final boolean shouldShowGUI = MainFrame.this.stockCodeHistoryGUI.remove(code);
               
               if(stockCodeHistoryGUI.size() == 0) {
                   statusBar.setProgressBar(false);
                   
                   if(runnable.getStockHistoryServer() != null) {
                        statusBar.setMainMessage(symbol + " history success.");                       
                   }
                   else {
                       statusBar.setMainMessage(symbol + " history failed.");                                              
                   }
                }
                else {
                    if(runnable.getStockHistoryServer() != null) {
                        statusBar.setMainMessage(symbol + " history success. Still waiting for history total " + stockCodeHistoryGUI.size() + " ...");
                   }
                   else {
                       statusBar.setMainMessage(symbol + " history failed. Still waiting for history total " + stockCodeHistoryGUI.size() + " ...");                       
                   }                   
                }
               
                if((runnable.getStockHistoryServer() != null) && shouldShowGUI) {
                    ChartJDialog chartJDialog = new ChartJDialog(MainFrame.this, symbol + " (" + code + ")", false, runnable.getStockHistoryServer());
                    chartJDialog.setVisible(true);
                }
           } 
        });
    }
    
    private ImageIcon getImageIcon(String imageIcon) {
        return new javax.swing.ImageIcon(getClass().getResource(imageIcon));
    }
    
    private class TableRowPopupListener extends MouseAdapter {
        
        public void mouseClicked(MouseEvent evt) {
            int[] rows = MainFrame.this.jTable1.getSelectedRows();
            
            if(rows.length == 1) {
                int row = rows[0];
                
                StockTableModel tableModel = (StockTableModel)jTable1.getModel();
                int modelIndex = jTable1.convertRowIndexToModel(row);
                Stock stock = tableModel.getStock(modelIndex);
                updateBuyerSellerInformation(stock);
            }
        }
        
        public void mousePressed(MouseEvent e) {
            maybeShowPopup(e);
        }

        public void mouseReleased(MouseEvent e) {
            maybeShowPopup(e);
        }

        private void maybeShowPopup(MouseEvent e) {
            if (e.isPopupTrigger()) {
                if(jTable1.getSelectedColumn() != -1)
                    getMyJTablePopupMenu().show(e.getComponent(), e.getX(), e.getY());
            }
        }
    }

    private static class ColumnHeaderToolTips extends MouseMotionAdapter {

        // Current column whose tooltip is being displayed.
        // This variable is used to minimize the calls to setToolTipText().
        TableColumn curCol;
    
        // Maps TableColumn objects to tooltips
        java.util.Map<TableColumn, String> tips = new HashMap<TableColumn, String>();
    
        // If tooltip is null, removes any tooltip text.
        public void setToolTip(TableColumn col, String tooltip) {
            if (tooltip == null) {
                tips.remove(col);
            } else {
                tips.put(col, tooltip);
            }
        }
    
        public void mouseMoved(MouseEvent evt) {
            TableColumn col = null;
            JTableHeader header = (JTableHeader)evt.getSource();
            JTable table = header.getTable();
            TableColumnModel colModel = table.getColumnModel();
            int vColIndex = colModel.getColumnIndexAtX(evt.getX());
    
            // Return if not clicked on any column header
            if (vColIndex >= 0) {
                col = colModel.getColumn(vColIndex);
            }
    
            if (col != curCol) {
                header.setToolTipText((String)tips.get(col));
                curCol = col;
            }
        }
    }
    
    private void spawnTimeServerThread() {
        log.info("start of spawnTimeServerThread...");
        
        final String[] hosts = {
            "time-a.nist.gov",
            "time-b.nist.gov",
            "time-a.timefreq.bldrdoc.gov",
            "time-b.timefreq.bldrdoc.gov",
            "time-c.timefreq.bldrdoc.gov",
            "utcnist.colorado.edu",
            "time.nist.gov",
            "time-nw.nist.gov",
            "nist1.datum.com",
            "nist1.dc.certifiedtime.com",
            "nist1.nyc.certifiedtime.com",
            "nist1.sjc.certifiedtime.com"
        };
        
        Runnable r = new Runnable() {
            public void run() {
                boolean success = false;
                
                for(String host : hosts) {
                    TimeTCPClient client = new TimeTCPClient();

                    // We want to timeout if a response takes longer than 60 seconds
                    client.setDefaultTimeout(10000);
                    
                    try {                        
                        client.connect(host);
                        java.util.Date serverDate = client.getDate();
                        client.disconnect(); 
                        
                        java.util.Calendar calendar = java.util.GregorianCalendar.getInstance();
                        calendar.set(2007, 6, 13);
                        java.util.Date expiredDate = calendar.getTime();
                        
                        log.info("Time server  : " + serverDate);
                        log.info("Expired date : " + expiredDate);
                        
                        if(expiredDate.before(serverDate)) {
                            success = false;
                            break;
                        }
                        else {
                            success = true;
                            break;
                        }
                    } catch (SocketException ex) {
                        log.error("", ex);
                    } catch (IOException ex) {
                        log.error("", ex);
                    }              
                }
                
                if(success == false) {
                    SwingUtilities.invokeLater(new Runnable() {
                        public void run() {
                            JOptionPane.showMessageDialog(null, "This trial versioned software had expired. \nIt will shutdown in next 10 seconds. \nPlease contact yccheok@yahoo.com to purchase the software.");      
                        }
                    });                    
                    
                    try {
                        Thread.sleep(10000);
                    }
                    catch(InterruptedException exp) {
                        log.error("", exp);
                    }
                    
                    System.exit(1);
                }
            }
        };
        
        new Thread(r).start();
    }
    
    public void displayPopupMessage(final String caption, final String message) {
        if(trayIcon == null) return;
        
        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                trayIcon.displayMessage(caption, message, TrayIcon.MessageType.INFO);
            }
        });
    }
    
    public StockHistorySerializer getStockHistorySerializer()
    {
        return stockHistorySerializer;
    }
    
    public IndicatorProjectManager getIndicatorProjectManager()
    {
        return this.indicatorPanel.getIndicatorProjectManager();
    }
    
    private TrayIcon trayIcon;
    
    private static final Log log = LogFactory.getLog(MainFrame.class);
        
    private MyJXStatusBar statusBar = new MyJXStatusBar(
            "Connecting to stock server to retrieve stock information ...",
            getImageIcon("/images/16x16/network-connecting.png"),
            "Connecting...");

    private java.util.List<StockServerFactory> stockServerFactories = new java.util.ArrayList<StockServerFactory>();
    
    // A set of stock history which we need to display GUI on them, when user request explicitly.
    private java.util.Set<String> stockCodeHistoryGUI = new java.util.HashSet<String>();
    
    private volatile StockCodeAndSymbolDatabase stockCodeAndSymbolDatabase;
    private RealTimeStockMonitor realTimeStockMonitor;
    private StockHistoryMonitor stockHistoryMonitor;
    private StockCodeAndSymbolDatabaseTask stockCodeAndSymbolDatabaseTask;
    private Thread marketThread;
    private StockHistorySerializer stockHistorySerializer;
    private JStockOptions jStockOptions;
    
    // As workaround to overcome the bug, when new look n feel being applied during runtime, the original
    // KeyListner for ComboBoxEditor will be removed.
    private final KeyListener jComboBox1EditorComponentKeyAdapter = getjComboBox1EditorComponentKeyAdapter();
    
    private String username;
    private String password;
    
    private static java.awt.Color higherColor = new java.awt.Color(50, 150, 0);
    private static java.awt.Color lowerColor = new java.awt.Color(200, 0, 50);  
    
    private IndicatorPanel indicatorPanel;
    private IndicatorScannerJPanel indicatorScannerJPanel;
    
    private org.yccheok.jstock.engine.Observer<RealTimeStockMonitor, java.util.List<Stock>> realTimeStockMonitorObserver = this.getRealTimeStockMonitorObserver();
    private org.yccheok.jstock.engine.Observer<StockHistoryMonitor, StockHistoryMonitor.StockHistoryRunnable> stockHistoryMonitorObserver = this.getStockHistoryMonitorObserver();
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
    
}
