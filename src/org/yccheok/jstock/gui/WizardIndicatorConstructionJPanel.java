/*
 * WizardDownloadHistoryProgressJPanel.java
 *
 * Created on June 16, 2007, 6:32 PM
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 *
 * Copyright (C) 2007 Cheok YanCheng <yccheok@yahoo.com>
 */

package org.yccheok.jstock.gui;

import javax.swing.*;
import java.awt.*;
import org.yccheok.jstock.engine.*;
import org.yccheok.jstock.analysis.*;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

/**
 *
 * @author  yccheok
 */
public class WizardIndicatorConstructionJPanel extends javax.swing.JPanel {
    
    /** Creates new form WizardDownloadHistoryProgressJPanel */
    public WizardIndicatorConstructionJPanel() {
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jXHeader1 = new org.jdesktop.swingx.JXHeader();
        jPanel1 = new javax.swing.JPanel();
        jProgressBar1 = new javax.swing.JProgressBar();
        jLabel1 = new javax.swing.JLabel();

        setLayout(new java.awt.BorderLayout());

        jXHeader1.setDescription("Pre-calculation will be performed on all the indicators. This is to make the real-time scanning speed much more faster.");
        jXHeader1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/128x128/calc.png")));
        jXHeader1.setTitle("Indicator Pre-calculation");
        add(jXHeader1, java.awt.BorderLayout.NORTH);

        jProgressBar1.setStringPainted(true);

        jLabel1.setText("Pre-calculation in progress. 0 out of 0 indicator(s) completed");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 572, Short.MAX_VALUE)
                    .addComponent(jLabel1))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addContainerGap(139, Short.MAX_VALUE))
        );
        add(jPanel1, java.awt.BorderLayout.CENTER);

    }// </editor-fold>//GEN-END:initComponents
    
    
    private class IndicatorConstructingTask extends SwingWorker<java.util.Map<Code, java.util.List<OperatorIndicator>>, Integer> {
        private volatile boolean runnable = true;
        private java.util.List<String> projects;
        private java.util.List<Code> codes;
        
        public IndicatorConstructingTask(java.util.List<String> projects, java.util.List<Code> codes) {
            this.projects = projects;
            this.codes = codes;            
        }
        
        public void _stop() {
            runnable = false;
        }
        
        public java.util.Map<Code, java.util.List<OperatorIndicator>> doInBackground() {
            final MainFrame m = (MainFrame)javax.swing.SwingUtilities.getAncestorOfClass(MainFrame.class, WizardIndicatorConstructionJPanel.this);
            final StockCodeAndSymbolDatabase stockCodeAndSymbolDatabase = m.getStockCodeAndSymbolDatabase();
            final StockHistorySerializer stockHistorySerializer = m.getStockHistorySerializer();
            final IndicatorProjectManager indicatorProjectManager = m.getIndicatorProjectManager();
            
            java.util.Map<Code, java.util.List<OperatorIndicator>> operatorIndicators = new java.util.HashMap<Code, java.util.List<OperatorIndicator>>();
            
            for(Code code : codes) {
                operatorIndicators.put(code, new java.util.ArrayList<OperatorIndicator>());
            }
            
            int count = 0;
            
            publish(count);
            
            root:
            for(Code code : codes) {
                final StockHistoryServer stockHistoryServer = stockHistorySerializer.load(code);
                
                if(stockHistoryServer == null) {
                    /* Cheating. */
                    count = count + projects.size();
                    publish(count);                    
                    continue;
                }
                
                java.util.List<OperatorIndicator> result = operatorIndicators.get(code);
                
                for(String project : projects) {
                    final Stock stock = Utils.getEmptyStock(code, stockCodeAndSymbolDatabase.codeToSymbol(code));
                    
                    if(isCancelled() || !runnable) {
                        return null;
                    }
                    
                    final OperatorIndicator operatorIndicator = indicatorProjectManager.getOperatorIndicator(project);
                    
                    if(operatorIndicator != null) {
                        operatorIndicator.setStockHistoryServer(stockHistoryServer);
                        
                        operatorIndicator.setStock(stock);
                        
                        operatorIndicator.preCalculate();
                        
                        result.add(operatorIndicator);
                    }
                    
                    count++;
                    publish(count);                    
                }                
            }
            
            return operatorIndicators;
         }

        @Override
         protected void process(java.util.List<Integer> progresses) {
             for (Integer progress : progresses) {
                 jProgressBar1.setValue(progress);
                 jLabel1.setForeground(Color.BLACK);
                 jLabel1.setText("Pre-calculation in progress. " + progress + " out of " + codes.size() * projects.size() + " indicator(s) completed");
             }
         }
         
        @Override
        public void done() {
            try {
                operatorIndicators = get();
            }
            catch(InterruptedException exp) {
                log.error("", exp);
            }
            catch(java.util.concurrent.ExecutionException exp) {
                log.error("", exp);
            }
            
            if(operatorIndicators != null)
            {
                jLabel1.setForeground(Color.BLUE);
                jLabel1.setText("Constructing completed with " + codes.size() * projects.size() + " indicator(s)");
                propertyChangeSupport.firePropertyChange("constructing", false, true);
            }
            else
            {
                jLabel1.setForeground(Color.RED);
                jLabel1.setText("Constructing is not completed");
            }
        }
    }
    
    public void startConstructing(java.util.List<String> projects, java.util.List<Code> codes) {
        operatorIndicators = null;
        
        if(indicatorConstructingTask != null) {
            indicatorConstructingTask._stop();
            try {
                indicatorConstructingTask.get();
            }
            catch(InterruptedException exp) {
                log.error("", exp);
            }
            catch(java.util.concurrent.ExecutionException exp) {
                log.error("", exp);
            }
        }
        
        jProgressBar1.setMaximum(codes.size());
        
        indicatorConstructingTask = new IndicatorConstructingTask(projects, codes);
        indicatorConstructingTask.execute();
    }
    
    public void stopConstructing() {
        if(indicatorConstructingTask != null) {
            indicatorConstructingTask._stop();
            try {
                indicatorConstructingTask.get();
            }
            catch(InterruptedException exp) {
                log.error("", exp);
            }
            catch(java.util.concurrent.ExecutionException exp) {
                log.error("", exp);
            }
        } 
        
        indicatorConstructingTask = null;
    }
    
    public void addMyPropertyChangeListener(java.beans.PropertyChangeListener listener) 
    {
        propertyChangeSupport.addPropertyChangeListener(listener);
    }
    
    // Code -> OperatorIndicator List
    public java.util.Map<Code, java.util.List<OperatorIndicator>> getOperatorIndicators() {
        return java.util.Collections.unmodifiableMap(operatorIndicators);
    }
    
    private static final Log log = LogFactory.getLog(WizardIndicatorConstructionJPanel.class);
    private IndicatorConstructingTask indicatorConstructingTask;
    private java.beans.PropertyChangeSupport propertyChangeSupport = new java.beans.PropertyChangeSupport(this);
    private java.util.Map<Code, java.util.List<OperatorIndicator>> operatorIndicators;
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JProgressBar jProgressBar1;
    private org.jdesktop.swingx.JXHeader jXHeader1;
    // End of variables declaration//GEN-END:variables
    
}
